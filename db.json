{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"f212d288b5790d4b0c65c6c0efb845933d71bdca","modified":1600627678427},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"059d1e0714668ed0818f87ac6cf81f479ead7c3e","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"9b878dfdc41cf617fc12f60c7c84dc41a66bfe69","modified":1600357672592},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"3b8fa0d77193941aa0aebcafd02789f043921df8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"4cfa8e76398a12af36c45cbcc68b1414368c702d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"c81e0ea89874d956ecead2eaa1fdaddc6ecf6f4c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"cf56d75a6d71b6905cada175838aaa26fc5acc21","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"d2855408652ddc23d143f02c79dd820633827297","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"c00c231fbfaae8e40ffe8e54d9d85ab85ca1995b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"4efacf1a471e90be6b1c89582901524419811fac","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"37c4c7e3f21544d84d88ec757643df047a26a232","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"3a238587e0092e000f85373bb27ad0c0398d355b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"1e3fb3ffd5658085b7a5298fb549bdd0cb15ff56","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"96c69e3383de0a39dd679d604683daf54f874b11","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"849effc2ac69a0ea3a189b135640bc3e6bf3b799","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"998c3a8faf82a98fda563bbce1f5c7241ba3239c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"7bbb6d1ead5d64b830d498c03ac9bb98cd7d1bea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"52e8a9a85038d5220d7b80ccc408de80cf10e370","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"dc11759285c67d9932ba98769501cce44ce02926","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"1ad643460d47176639450090393c8d78c192ff06","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"acf06ddda9ae3f671f6237fbd059360f631a3ef7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"09d3fa715d059e3e75e75e685cedb9e97c3b0285","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"748c4fa46a6e2ec73bda213bb966bb2ee840c095","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"8c665dad9ad7ecd64a5f969eba244a73c66a03a9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"28e1288bf0611d7e2735b1e70cdcd9e168feecd4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"aeeb66e4faec9099cb5effdbee7ce1902a4bb2da","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"0fe9ec8ba1fb87b998edb78a9d466f3bfd203187","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"a6b7a2891bbc7c71dcc2a0e756e9c9847bbb6729","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"d25b68e03754c61bc4966bea29dc25d04e3a7aa9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"46872ee9ca9483ee17ac20f227a2e4ce83a97e30","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"be5d28ba5098e36483d21f94e4deb0bd2ec075e4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"49a2a8c0508bad9446868c3c05e7fa3250855af8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"df708bc8a25d4eeec268969f014ad99f9e74ef7a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"0217f2af8a4d6731652a3a49b5801bbfe0e73fff","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":499162500000},{"_id":"source/_posts/我的第一篇博客.md","hash":"5ceb604d4de0d4472ec0a7f591fa8bfe2ec20f92","modified":1600362898172},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1602157178754},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1602157178754},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1602157178754},{"_id":"public/js/toc.js","hash":"d04f02478bd8db3d2817c45d453ce651d2d96c24","modified":1602157178754},{"_id":"public/content.json","hash":"5d0630c5d54b13a3fc6a14a2be02af967b96aedc","modified":1602691042160},{"_id":"public/2020/09/17/我的第一篇博客/index.html","hash":"dbbdb716c20227cebb116d6dda4e17e1077cd603","modified":1600627791996},{"_id":"public/2020/09/17/hello-world/index.html","hash":"00901920d9699d8a42b22057794ac319acd794dc","modified":1600625554273},{"_id":"public/archives/index.html","hash":"6ec7ddbf75ed679041cb28d0d5d4d061afd00276","modified":1602681568337},{"_id":"public/archives/2020/index.html","hash":"702c5dd380bf2355b2d730f97e355f2e6b28dd19","modified":1602681568337},{"_id":"public/archives/2020/09/index.html","hash":"d2b0e74f1bf5db88a945de2bfc36627fcabb810b","modified":1602681568337},{"_id":"public/index.html","hash":"7db4b738868eb0125abd589a123c1c86417ca797","modified":1602691070679},{"_id":"public/categories/index.html","hash":"0570faf2e9fb389b26f7ce3065555fd44e889e8b","modified":1602681568337},{"_id":"public/tags/index.html","hash":"18e5b39127f79d1a168c4027988f374301f17e5d","modified":1602681568337},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1600360643874},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1600360643874},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1600360643874},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1600360643874},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1600360643874},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1600360643874},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1600360643874},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1600360643874},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1600360643874},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1600360643874},{"_id":"public/css/cyberpunk.css","hash":"0d8dc4bf137bd7ccd0125f1bb6af45c1e51d7489","modified":1602155760985},{"_id":"public/css/default.css","hash":"f36bff9e79cb531e5ac60c5242c449644d3c7750","modified":1602156003255},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1602156282543},{"_id":"source/_posts/命令行入门.md","hash":"6616fbf95435e4c6c3a6ddf9a105455cbf29a323","modified":1600742920927},{"_id":"public/2020/09/20/命令行入门/index.html","hash":"57b5e91995031325444463b8f1ceaa03f2e97c75","modified":1602681568337},{"_id":"public/tags/命令行/index.html","hash":"d0268411422a0af0d186aa5f6cc1fb2ab7ec365b","modified":1602681568337},{"_id":"public/2020/09/20/hello-world/index.html","hash":"54aa985533ed0f35cb05f0ccc4450a28bc6f36f8","modified":1600627681311},{"_id":"source/_posts/git的基本操作和Github.md","hash":"798901b76b1a43bd495ff4e3577745113e152c54","modified":1600743051083},{"_id":"public/2020/09/21/git的基本操作和Github/index.html","hash":"d66e712cabaa08954d81b4381bf0240020edfbc3","modified":1602681568337},{"_id":"public/tags/git/index.html","hash":"f01a8988e8fa42ab4303c64951248d23f929f792","modified":1602681568337},{"_id":"source/_posts/HTML的历史和学习方法.md","hash":"7376243039b495b3da8c98305967dc04d71ae30c","modified":1600708781652},{"_id":"public/2020/09/21/HTML的历史和学习方法/index.html","hash":"e093c36b31b400e15e401e3d44fd15837f58731e","modified":1602681568337},{"_id":"public/tags/HTML/index.html","hash":"925d9f0d0265e6f2e6a0ca5d1df69337e55726b0","modified":1602681568337},{"_id":"source/_posts/Markdown的一些语法.md","hash":"4d28965dc9600d21f198f8ba5f59bb84b43891a8","modified":1600945410139},{"_id":"public/tags/markdown/index.html","hash":"f3375ce76e1837a255a8b65a0d5f916d1ea0ce36","modified":1602681568337},{"_id":"public/2020/09/21/Markdown的一些语法/index.html","hash":"0ad91c233ae362320a15d812b79959b9b1127cc6","modified":1602681568337},{"_id":"source/_posts/.HTML的历史和学习方法.md.swp","hash":"7245b090357d1e3e1da0f579fa517bf359d0abae","modified":1600709840260},{"_id":"source/_posts/heox","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600795011129},{"_id":"source/_posts/HTML标签.md","hash":"992ca6cc60d5d484b85da9d68c1629d9c0f2a1c9","modified":1600961449075},{"_id":"public/2020/09/22/HTML标签/index.html","hash":"0bbe50e6c0be9995f375a34af7b7e69c08527a84","modified":1602681568337},{"_id":"source/_posts/HTML重点标签.md","hash":"b8fcc39c1915065720e88e2cca2a59eba88f9180","modified":1600945199487},{"_id":"public/2020/09/24/HTML重点标签/index.html","hash":"a01a72f9238401b30337342d1f44e04506d09e60","modified":1602681568337},{"_id":"source/_posts/Ubuntu网络基本常识.md","hash":"ccb64aa76d08cd272144a704c5ae243d4eeaca70","modified":1601137795235},{"_id":"public/2020/09/26/Ubuntu网络基本常识/index.html","hash":"7a8b1248855e913d0f076aeda989808dd6c4b84b","modified":1602681568337},{"_id":"public/tags/ubuntu-网络/index.html","hash":"1bc90b8fc21b3ee89d1d1b906818113c96b4ae17","modified":1601135148661},{"_id":"public/tags/ubuntu网络/index.html","hash":"371c1b88d003737dd4f70db4441f9b6cfca4d315","modified":1602681568337},{"_id":"source/_posts/CSS基础.md","hash":"18a63967535457a6ebb91d84c870f8ceb037348d","modified":1601403983824},{"_id":"public/2020/09/29/CSS基础/index.html","hash":"e265d03e5df5bc6e971ab1ddb254e1ec3cee3142","modified":1602681568337},{"_id":"public/tags/CSS/index.html","hash":"9349441769f6675d329a0f9f96179a784c51f4f7","modified":1602681568337},{"_id":"source/_posts/CSS布局.md","hash":"d1d670ee9d081b1e82ea0e1eac1566dc2c8051d6","modified":1601490402070},{"_id":"public/2020/09/29/CSS布局/index.html","hash":"69745a83edc1253850bab712ddd5d8b8a637b42e","modified":1602681568337},{"_id":"source/_posts/.CSS布局.md.swp","hash":"b87a309ab0cc224237ae5b11ec827ed32d311c89","modified":1601482522803},{"_id":"source/_posts/CSS定位.md","hash":"4acd143feb80a7986afaea2b10692124ae5629c0","modified":1601627392599},{"_id":"public/2020/10/02/CSS定位/index.html","hash":"e475c6c4c796bff76e8b884668d67a462f59236b","modified":1602681568337},{"_id":"public/archives/2020/10/index.html","hash":"18f678396558b3e4a72046b6880297d3fc4e0030","modified":1602681568337},{"_id":"source/_posts/z-index与层叠上下文.md","hash":"61a135f744e2f2c84c6d755ecb608f5a87476eac","modified":1601627031294},{"_id":"public/2020/10/02/z-index与层叠上下文/index.html","hash":"e57fcfd969100903bc13649097bc5793a910ff80","modified":1602681568337},{"_id":"public/archives/page/2/index.html","hash":"951ffaf9319062250428d1cba265346c0379d78c","modified":1602681568337},{"_id":"public/archives/2020/page/2/index.html","hash":"663b5891d15d6c4abc8eedf44bcb0ac08238e37a","modified":1602681568337},{"_id":"public/page/2/index.html","hash":"d43c2b0c9c47629e160f1657f3302bb5d2260b3c","modified":1602681568337},{"_id":"source/_posts/CSS动画.md","hash":"1c245dd921b30bddbae147db34dde9097b718ffe","modified":1601743087615},{"_id":"public/2020/10/03/CSS动画/index.html","hash":"430f026d3462380f1ecea4ddab2c6c9c6865ba07","modified":1602681568337},{"_id":"source/_posts/.CSS动画.md.swp","hash":"16d45c6534437adabdddc0c27b77c378d119b0a8","modified":1601728323456},{"_id":"source/_posts/grid布局.md","hash":"3c525af23fd147b384e8ecec9c41bbec4287a75e","modified":1602513691631},{"_id":"public/2020/10/08/grid布局/index.html","hash":"49b64de3c7bed3be9ba877685b218f5f35630ddb","modified":1602681568337},{"_id":"public/tags/css/index.html","hash":"db92815dc54959d84834d5a0722975272d7cecb6","modified":1602160918034},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133474},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133474},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133474},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133474},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133474},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133470},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133470},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133470},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133470},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602155133470},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1602155133470},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1602155133470},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1602155133470},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1602155133470},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1602155133470},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1602155133470},{"_id":"themes/icarus/README.md","hash":"247ec8047ee3105d31099dd8e6ca498b6bff1336","modified":1602155133470},{"_id":"themes/icarus/package.json","hash":"cba0e28c5fb498dd45948dd87b90edc3ca87ea6f","modified":1602155133474},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1602155133470},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1602155133470},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1602155133470},{"_id":"themes/icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1602155133470},{"_id":"themes/icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1602155133470},{"_id":"themes/icarus/languages/de.yml","hash":"01d9c27c3c9224d8c58b1cf7099ef008b9411a45","modified":1602155133474},{"_id":"themes/icarus/languages/en.yml","hash":"1bdb74288808c4d306b46630860e586a1fcd88a7","modified":1602155133474},{"_id":"themes/icarus/languages/es.yml","hash":"48fe3d7d304239b5e5e93f63600093700d6f0fed","modified":1602155133474},{"_id":"themes/icarus/languages/fr.yml","hash":"14765cc6216b4af5a05341315c9f6ee54d636a78","modified":1602155133474},{"_id":"themes/icarus/languages/id.yml","hash":"c04fca89e536d539a8bf95980bff7dff79125ba3","modified":1602155133474},{"_id":"themes/icarus/languages/ja.yml","hash":"7568f246a21813527ccea8a1da72a9526aa2d233","modified":1602155133474},{"_id":"themes/icarus/languages/ko.yml","hash":"f2211a8ca1d73f05a1c931aa11accb4e34c483c4","modified":1602155133474},{"_id":"themes/icarus/languages/pl.yml","hash":"612639b0e0a15185c12eecfe3e8913b629ecdfdf","modified":1602155133474},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"531b22c71fab8aae60ddc7599aaa5f46140cf2c1","modified":1602155133474},{"_id":"themes/icarus/languages/ru.yml","hash":"bf784c6f31e8fb7ed78509468bddecd447c3b73b","modified":1602155133474},{"_id":"themes/icarus/languages/tr.yml","hash":"96d94f7a5d56b2682ae2792f0808139d4b950704","modified":1602155133474},{"_id":"themes/icarus/languages/vn.yml","hash":"64307bfa16d851334e2f37a29a84d644624c2060","modified":1602155133474},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"82ff607b1671b88d259d10b6ce8ca1bb05b2cff4","modified":1602155133474},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"92f8cf599ad06bb14f79f4806ac4c695f60044d7","modified":1602155133474},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1602155133474},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1602155133474},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1602155133474},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1602155133474},{"_id":"themes/icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":1602155133474},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1602155133474},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1602155133474},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1602155133474},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1602155133474},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1602155133474},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1602155133470},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1602155133470},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"42afb69546eae522e340e3adb99f7bfc4cc4c397","modified":1602155133470},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1602155133470},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1602155133470},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1602155133470},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1602155133470},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"71f04b66e48f065285ba109939999876ef411598","modified":1602155133470},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1602155133470},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"f816a5970f4ad4fcf6c8350dbcd4c300c6986cb4","modified":1602155133470},{"_id":"themes/icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1602155133470},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1602155133470},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1602155133470},{"_id":"themes/icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1602155133470},{"_id":"themes/icarus/include/style/article.styl","hash":"be25e890113e926bbac3bf1461d7ce5427914774","modified":1602155133470},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1602155133470},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1602155133470},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1602155133470},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1602155133470},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1602155133470},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1602155133470},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1602155133470},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1602155133470},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1602155133470},{"_id":"themes/icarus/include/style/plugin.styl","hash":"dc98160142c95ef81ba4789351002a5fcf29c04c","modified":1602155133470},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1602155133470},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1602155133470},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1602155133470},{"_id":"themes/icarus/include/style/widget.styl","hash":"af07ee43e209b6361eed22171bb50efaef7cbfeb","modified":1602155133474},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1602155133474},{"_id":"themes/icarus/layout/common/article.jsx","hash":"f31c5a78fc4b2d72acf4583342be9e72ac9adf21","modified":1602155133474},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1602155133474},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1602155133474},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1602155133474},{"_id":"themes/icarus/layout/common/head.jsx","hash":"bcee2e258d13af6ac439ee6adaeefc06ea384e7e","modified":1602155133474},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1602155133474},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1602155133474},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"a6b7a2891bbc7c71dcc2a0e756e9c9847bbb6729","modified":1602155133474},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1602155133474},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1602155133474},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":1602155133474},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1602155133474},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1602155133474},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"9163e30324930d241e044a25d2627f29d607d414","modified":1602155133474},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1602155133474},{"_id":"themes/icarus/source/css/default.css","hash":"1324868815df3bd7f749f1118d5ac9141e680b79","modified":1602155618749},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1602155985561},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1602155438968},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1602155133474},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1602155133474},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1602155133474},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1602155133474},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1602155133474},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1602155133474},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1602155133474},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1602155133474},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1602155133474},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1602155133474},{"_id":"themes/icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1602155133474},{"_id":"themes/icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"df708bc8a25d4eeec268969f014ad99f9e74ef7a","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1602155133470},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1602155133470},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1602155133470},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1602155133470},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1602155133470},{"_id":"public/manifest.json","hash":"735256743c5394eb6481e422c27c00ef646747e1","modified":1602157178754},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1600355966368},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1600355966368},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1600355966368},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1600355966368},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1600355966368},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1600355966368},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1600355966372},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1600355966368},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1600355966368},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1600355966368},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1600355966368},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1600355966368},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1600355966368},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1600355966368},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1600355966368},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1600355966368},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1600355966368},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1600355966368},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1600355966372},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1600355966372},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1600355966372},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1600355966372},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1600355966372},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1600355966372},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1600355966372},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1600355966368},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1600355966372},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1600355966372},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1600355966372},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1600355966372},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1600355966372},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1600355966372},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1600355966372},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1600355966372},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1600355966380},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1600355966380},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1600355966380},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1600355966372},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1600355966372},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1600355966372},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1600355966372},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1600355966372},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1600355966372},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1600355966372},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1600355966376},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1600355966376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1600355966376},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1600355966376},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1600355966376},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1602156282543},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1602156282543},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1602156282543},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1602156282543},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1602156282543},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1602156282543},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1602156282543},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1602156282543},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1602156282543},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1602156282543},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1602156282543},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1602156282543},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1602156282543},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1602156282543},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1602156282543},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1602156282543},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1602156282543},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1602156282543},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1602156282543},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1602156282543},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1602156282543},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1602156282543},{"_id":"source/_posts/HTTP入门.md","hash":"5980e8fcf8b245b73e71faf9ab642b934cdeba89","modified":1602691069121},{"_id":"public/2020/10/14/HTTP入门/index.html","hash":"14f95f4d553277e11d7f529edf3c6b006807a30b","modified":1602691070679},{"_id":"public/tags/HTTP/index.html","hash":"39d42a06907f97a0b1365a145e829f45f194a733","modified":1602691070679},{"_id":"source/_posts/.HTTP入门.md.swp","hash":"c88cb9fa186df810fe107d15cb4a0548d3dd7e34","modified":1602682079560}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"命令行入门","date":"2020-09-20T18:06:48.000Z","toc":true,"_content":"## 命令行常用命令\n#### 1.单词\n| 英文 | 翻译 | 缩写命令 | 英文 | 翻译 | 缩写命令 |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n|file  | 文件 |/| link | 链接|/|\n|mark  | 制作 |mk| find | 找到|/|\n|move | 动 | mv|echo | 回声|echo|\n|remove | 删除 |rm| touch |触摸|touch|\n|copy | 复制 | cp|change |改变|cd中的c|\n|lies | 列表 | ls|directory |目录/文件夹|cd中的d||recursive | 递归 r|| force| 强制|f|\n<!--more-->\n#### 2.命令中的增删改查\n##### 增：创建文件\n*  创建文件\n__touch xxx.txt__\n__echo hi > xxx.txt__  会覆盖之前xxx.txt内的内容\n__echo hihi >> xxx.txt__  追加‘hihi’到xxx.txt\n* 创建目录\n__mkdir a__\n__markdir -p a/b/c__\n* 同时创建多个文件\n__touch 1.txt 2.txt__\n* 复制文件\n__cp 1.txt 2.txt__  2.txt处也可以跟路径，意思是把1.txt 复制到某个目录下，命命名为2.txt\n* 复制目录\n__cp -r a b__\n\n##### 删：删除文件\n* 删除文件\n__rm xxx.txt__\n* 删除目录/文件夹\n__rm -rf xxx__ -rf的意思是强制递归方式删除目录\n\n##### 查：查看文件或目录\n* 查看当前目录的绝对路径\n__pwd__\n* 查看当前目录的内容\n__ls__\n__ls -a__ 可以查看隐藏的文件和文件的属性\n* 查看指定目录的内容\n__ls 路径__\n* 查看文件内容\n__cat__ 路径 全部查看\n__head__ 路径 查看前10行 跟参数-n 可以指定查看前n行，默认是10行\n__tail__ 路径 查看后10行 跟参数-n 可以指定查看后n行 ，默认是10行\n__less__ 路径  可以让查看的窗口变成滚动的\n\n> 可以以下命令来安装gtldr，来查询命令的常用参数\n```\nnpm i -g tldr\nyarn global add tldr\n```\n\n资料来源：饥人谷!!\n","source":"_posts/命令行入门.md","raw":"---\ntitle: 命令行入门\ndate: 2020-09-20 18:06:48\ntags: '命令行'\ntoc: true\n---\n## 命令行常用命令\n#### 1.单词\n| 英文 | 翻译 | 缩写命令 | 英文 | 翻译 | 缩写命令 |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n|file  | 文件 |/| link | 链接|/|\n|mark  | 制作 |mk| find | 找到|/|\n|move | 动 | mv|echo | 回声|echo|\n|remove | 删除 |rm| touch |触摸|touch|\n|copy | 复制 | cp|change |改变|cd中的c|\n|lies | 列表 | ls|directory |目录/文件夹|cd中的d||recursive | 递归 r|| force| 强制|f|\n<!--more-->\n#### 2.命令中的增删改查\n##### 增：创建文件\n*  创建文件\n__touch xxx.txt__\n__echo hi > xxx.txt__  会覆盖之前xxx.txt内的内容\n__echo hihi >> xxx.txt__  追加‘hihi’到xxx.txt\n* 创建目录\n__mkdir a__\n__markdir -p a/b/c__\n* 同时创建多个文件\n__touch 1.txt 2.txt__\n* 复制文件\n__cp 1.txt 2.txt__  2.txt处也可以跟路径，意思是把1.txt 复制到某个目录下，命命名为2.txt\n* 复制目录\n__cp -r a b__\n\n##### 删：删除文件\n* 删除文件\n__rm xxx.txt__\n* 删除目录/文件夹\n__rm -rf xxx__ -rf的意思是强制递归方式删除目录\n\n##### 查：查看文件或目录\n* 查看当前目录的绝对路径\n__pwd__\n* 查看当前目录的内容\n__ls__\n__ls -a__ 可以查看隐藏的文件和文件的属性\n* 查看指定目录的内容\n__ls 路径__\n* 查看文件内容\n__cat__ 路径 全部查看\n__head__ 路径 查看前10行 跟参数-n 可以指定查看前n行，默认是10行\n__tail__ 路径 查看后10行 跟参数-n 可以指定查看后n行 ，默认是10行\n__less__ 路径  可以让查看的窗口变成滚动的\n\n> 可以以下命令来安装gtldr，来查询命令的常用参数\n```\nnpm i -g tldr\nyarn global add tldr\n```\n\n资料来源：饥人谷!!\n","slug":"命令行入门","published":1,"updated":"2020-09-22T02:48:40.927Z","_id":"ckfbf0u0c0000kgfq1s28en8u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"命令行常用命令\"><a href=\"#命令行常用命令\" class=\"headerlink\" title=\"命令行常用命令\"></a>命令行常用命令</h2><h4 id=\"1-单词\"><a href=\"#1-单词\" class=\"headerlink\" title=\"1.单词\"></a>1.单词</h4><table>\n<thead>\n<tr>\n<th>英文</th>\n<th>翻译</th>\n<th>缩写命令</th>\n<th>英文</th>\n<th>翻译</th>\n<th>缩写命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>file</td>\n<td>文件</td>\n<td>/</td>\n<td>link</td>\n<td>链接</td>\n<td>/</td>\n</tr>\n<tr>\n<td>mark</td>\n<td>制作</td>\n<td>mk</td>\n<td>find</td>\n<td>找到</td>\n<td>/</td>\n</tr>\n<tr>\n<td>move</td>\n<td>动</td>\n<td>mv</td>\n<td>echo</td>\n<td>回声</td>\n<td>echo</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>删除</td>\n<td>rm</td>\n<td>touch</td>\n<td>触摸</td>\n<td>touch</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>复制</td>\n<td>cp</td>\n<td>change</td>\n<td>改变</td>\n<td>cd中的c</td>\n</tr>\n<tr>\n<td>lies</td>\n<td>列表</td>\n<td>ls</td>\n<td>directory</td>\n<td>目录/文件夹</td>\n<td>cd中的d</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n<h4 id=\"2-命令中的增删改查\"><a href=\"#2-命令中的增删改查\" class=\"headerlink\" title=\"2.命令中的增删改查\"></a>2.命令中的增删改查</h4><h5 id=\"增：创建文件\"><a href=\"#增：创建文件\" class=\"headerlink\" title=\"增：创建文件\"></a>增：创建文件</h5><ul>\n<li>创建文件<br><strong>touch xxx.txt</strong><br><strong>echo hi &gt; xxx.txt</strong>  会覆盖之前xxx.txt内的内容<br><strong>echo hihi &gt;&gt; xxx.txt</strong>  追加‘hihi’到xxx.txt</li>\n<li>创建目录<br><strong>mkdir a</strong><br><strong>markdir -p a/b/c</strong></li>\n<li>同时创建多个文件<br><strong>touch 1.txt 2.txt</strong></li>\n<li>复制文件<br><strong>cp 1.txt 2.txt</strong>  2.txt处也可以跟路径，意思是把1.txt 复制到某个目录下，命命名为2.txt</li>\n<li>复制目录<br><strong>cp -r a b</strong></li>\n</ul>\n<h5 id=\"删：删除文件\"><a href=\"#删：删除文件\" class=\"headerlink\" title=\"删：删除文件\"></a>删：删除文件</h5><ul>\n<li>删除文件<br><strong>rm xxx.txt</strong></li>\n<li>删除目录/文件夹<br><strong>rm -rf xxx</strong> -rf的意思是强制递归方式删除目录</li>\n</ul>\n<h5 id=\"查：查看文件或目录\"><a href=\"#查：查看文件或目录\" class=\"headerlink\" title=\"查：查看文件或目录\"></a>查：查看文件或目录</h5><ul>\n<li>查看当前目录的绝对路径<br><strong>pwd</strong></li>\n<li>查看当前目录的内容<br><strong>ls</strong><br><strong>ls -a</strong> 可以查看隐藏的文件和文件的属性</li>\n<li>查看指定目录的内容<br><strong>ls 路径</strong></li>\n<li>查看文件内容<br><strong>cat</strong> 路径 全部查看<br><strong>head</strong> 路径 查看前10行 跟参数-n 可以指定查看前n行，默认是10行<br><strong>tail</strong> 路径 查看后10行 跟参数-n 可以指定查看后n行 ，默认是10行<br><strong>less</strong> 路径  可以让查看的窗口变成滚动的</li>\n</ul>\n<blockquote>\n<p>可以以下命令来安装gtldr，来查询命令的常用参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g tldr</span><br><span class=\"line\">yarn global add tldr</span><br></pre></td></tr></table></figure>\n\n<p>资料来源：饥人谷!!</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"命令行常用命令\"><a href=\"#命令行常用命令\" class=\"headerlink\" title=\"命令行常用命令\"></a>命令行常用命令</h2><h4 id=\"1-单词\"><a href=\"#1-单词\" class=\"headerlink\" title=\"1.单词\"></a>1.单词</h4><table>\n<thead>\n<tr>\n<th>英文</th>\n<th>翻译</th>\n<th>缩写命令</th>\n<th>英文</th>\n<th>翻译</th>\n<th>缩写命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>file</td>\n<td>文件</td>\n<td>/</td>\n<td>link</td>\n<td>链接</td>\n<td>/</td>\n</tr>\n<tr>\n<td>mark</td>\n<td>制作</td>\n<td>mk</td>\n<td>find</td>\n<td>找到</td>\n<td>/</td>\n</tr>\n<tr>\n<td>move</td>\n<td>动</td>\n<td>mv</td>\n<td>echo</td>\n<td>回声</td>\n<td>echo</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>删除</td>\n<td>rm</td>\n<td>touch</td>\n<td>触摸</td>\n<td>touch</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>复制</td>\n<td>cp</td>\n<td>change</td>\n<td>改变</td>\n<td>cd中的c</td>\n</tr>\n<tr>\n<td>lies</td>\n<td>列表</td>\n<td>ls</td>\n<td>directory</td>\n<td>目录/文件夹</td>\n<td>cd中的d</td>\n</tr>\n</tbody></table>","more":"<h4 id=\"2-命令中的增删改查\"><a href=\"#2-命令中的增删改查\" class=\"headerlink\" title=\"2.命令中的增删改查\"></a>2.命令中的增删改查</h4><h5 id=\"增：创建文件\"><a href=\"#增：创建文件\" class=\"headerlink\" title=\"增：创建文件\"></a>增：创建文件</h5><ul>\n<li>创建文件<br><strong>touch xxx.txt</strong><br><strong>echo hi &gt; xxx.txt</strong>  会覆盖之前xxx.txt内的内容<br><strong>echo hihi &gt;&gt; xxx.txt</strong>  追加‘hihi’到xxx.txt</li>\n<li>创建目录<br><strong>mkdir a</strong><br><strong>markdir -p a/b/c</strong></li>\n<li>同时创建多个文件<br><strong>touch 1.txt 2.txt</strong></li>\n<li>复制文件<br><strong>cp 1.txt 2.txt</strong>  2.txt处也可以跟路径，意思是把1.txt 复制到某个目录下，命命名为2.txt</li>\n<li>复制目录<br><strong>cp -r a b</strong></li>\n</ul>\n<h5 id=\"删：删除文件\"><a href=\"#删：删除文件\" class=\"headerlink\" title=\"删：删除文件\"></a>删：删除文件</h5><ul>\n<li>删除文件<br><strong>rm xxx.txt</strong></li>\n<li>删除目录/文件夹<br><strong>rm -rf xxx</strong> -rf的意思是强制递归方式删除目录</li>\n</ul>\n<h5 id=\"查：查看文件或目录\"><a href=\"#查：查看文件或目录\" class=\"headerlink\" title=\"查：查看文件或目录\"></a>查：查看文件或目录</h5><ul>\n<li>查看当前目录的绝对路径<br><strong>pwd</strong></li>\n<li>查看当前目录的内容<br><strong>ls</strong><br><strong>ls -a</strong> 可以查看隐藏的文件和文件的属性</li>\n<li>查看指定目录的内容<br><strong>ls 路径</strong></li>\n<li>查看文件内容<br><strong>cat</strong> 路径 全部查看<br><strong>head</strong> 路径 查看前10行 跟参数-n 可以指定查看前n行，默认是10行<br><strong>tail</strong> 路径 查看后10行 跟参数-n 可以指定查看后n行 ，默认是10行<br><strong>less</strong> 路径  可以让查看的窗口变成滚动的</li>\n</ul>\n<blockquote>\n<p>可以以下命令来安装gtldr，来查询命令的常用参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g tldr</span><br><span class=\"line\">yarn global add tldr</span><br></pre></td></tr></table></figure>\n\n<p>资料来源：饥人谷!!</p>"},{"title":"git的基本操作和Github","date":"2020-09-21T07:20:43.000Z","toc":true,"_content":"# git的基本操作\n__配置本地的git__\n```git\ngit config --global user.name你的英文名\ngit config --global user.emai1你的邮箱\ngit config --globa1 push default simple\ngit config --global core. quotepath false\ngit config --global coreeditor code --wait\ngit config --globa1 core. autocrif input\n```\n<!--more-->\n__1.初始化本地仓库__\n```git\ngit init\n```\n操作完以后，本地会多出一个.git的目录，里面会记录各个版本的变化，如下图所示。\n![](./img/1.png)\n__2.把需要变动的内容提交到暂存区__\n```git\ngit add 路径  //提交某个路径下的文件\ngit add .     //把当前目录的所有文件提交到暂存区\n```\n__3.描述哪些文件不提交__\n```git\ntouch .gitignore\nvi .gitignore \n```\n.gitignore文件是描述哪些文件不会被提交到暂存区。把不需要提交的文件名写到.gitignore里面，就不会被提交。\n\n__4.把暂存区的文件提交到.git目录__\n```git\ngit commit -m 字符串 //提交并说明理由，字符串里面如果有空格，就要用引号包起来\ngit commit -v //会弹出对话框，告诉你这次提交变更了什么\n```\n__5.查看git的版本号__\n```git\ngit log 查看当前版本号之前历史版本\ngit reflog 查看所有git的历史版本\n```\n__6.回到之前的版本__\n```git\ngit reset --head xxxxxx\n```\n以上的xxxxxx代表版本号，可以通过git log 和 git reflog 来查看，需要回退的版本。\n\n__7.创建分支__\n```git\ngit branch xxx\n```\n创建一个分支，并命名为xxx\n\n__8.删除分支__\n```git\ngit branch -d xxx\n```\n删除分支xxx\n\n__9.切换分支__\n```git\ngit checkout xxx\n```\n切换分支到xxx ，默认的分支名是master\n\n__10.将一个分支合并到当前分支__\n```git\ngit merge xxx\n```\n将xxx分支合并到当前分支\n\n-------\n\n# git远程仓库GitHub\n> GItHub就是用来备份本地 `.git` 而已，没有什么高科技原理。\n\n__1.生成ssh key__\n```git\nssh-keygen -t rsa -b 4096 -C 'your Email'\n```\n连续点3个回车，就可以下载到本地目录了\n\n```git\ncat ~/.ssh/id_rsa.pub\n```\n得到公钥内容，复制到Github个人设置里面就可以了\n\n__2.Github上创建一个远程仓库__\n![](./img/2.png)\ngithub个人主页创建仓库\n![](./img/3.png)\n描述仓库的名称，并且生成仓库\n\n__3.把本地目录上传到远程仓库__\n```git\ngit remote add origin git@xxxxxxx\n```\n`origin` 是远程仓库的默认名字，可以换，但是建议不要换\n`git@xxxxxx` 是远程仓库的地址\n\n```git\ngit push -u origin master\n```\n第一次推送需要写全，以后写`git push`就可以了，这段代码的意思是推送本地master分支到远程仓库origin的master分支。\n如果提示`git pull` 就`git pull`。提示`git pull`是因为本地代码与远程仓库有不同，所以`git pull`就是让本地和远程仓库保持一致。\n\n__4.上传其他分支到github__\n```git\ngit push origin x:x\n```\n提交分支x到远程仓库origin的x分支\n\n```git\ngit checkout x\ngit push -u origin x\n```\n先切换到x分支，然后在x分支推送到远程仓库\n\n__5.下载远程仓库的代码__\n\n```git\ngit clone git@?/xxx.git  //会在当前目录创建一个xxx目录\ngit clone git@?/xxx.git yyy  ///会在本地新建yyy目录\ngit clone git@?/xxx.git . //不会新建目录，会在当前目录来装代码和.git\n```\n第三种方法最后当前目录是一个空目录，不然容易覆盖之前的.git，很危险。\n\n__6.git通灵术__\n```git\ngit stash 文件  //把某个文件临时藏起来\ngit stash pop 文件  //把某个文件释放出来\n```\n\n资料参考:饥人谷\n \n","source":"_posts/git的基本操作和Github.md","raw":"---\ntitle: git的基本操作和Github\ndate: 2020-09-21 07:20:43\ntags: 'git'\ntoc : true\n---\n# git的基本操作\n__配置本地的git__\n```git\ngit config --global user.name你的英文名\ngit config --global user.emai1你的邮箱\ngit config --globa1 push default simple\ngit config --global core. quotepath false\ngit config --global coreeditor code --wait\ngit config --globa1 core. autocrif input\n```\n<!--more-->\n__1.初始化本地仓库__\n```git\ngit init\n```\n操作完以后，本地会多出一个.git的目录，里面会记录各个版本的变化，如下图所示。\n![](./img/1.png)\n__2.把需要变动的内容提交到暂存区__\n```git\ngit add 路径  //提交某个路径下的文件\ngit add .     //把当前目录的所有文件提交到暂存区\n```\n__3.描述哪些文件不提交__\n```git\ntouch .gitignore\nvi .gitignore \n```\n.gitignore文件是描述哪些文件不会被提交到暂存区。把不需要提交的文件名写到.gitignore里面，就不会被提交。\n\n__4.把暂存区的文件提交到.git目录__\n```git\ngit commit -m 字符串 //提交并说明理由，字符串里面如果有空格，就要用引号包起来\ngit commit -v //会弹出对话框，告诉你这次提交变更了什么\n```\n__5.查看git的版本号__\n```git\ngit log 查看当前版本号之前历史版本\ngit reflog 查看所有git的历史版本\n```\n__6.回到之前的版本__\n```git\ngit reset --head xxxxxx\n```\n以上的xxxxxx代表版本号，可以通过git log 和 git reflog 来查看，需要回退的版本。\n\n__7.创建分支__\n```git\ngit branch xxx\n```\n创建一个分支，并命名为xxx\n\n__8.删除分支__\n```git\ngit branch -d xxx\n```\n删除分支xxx\n\n__9.切换分支__\n```git\ngit checkout xxx\n```\n切换分支到xxx ，默认的分支名是master\n\n__10.将一个分支合并到当前分支__\n```git\ngit merge xxx\n```\n将xxx分支合并到当前分支\n\n-------\n\n# git远程仓库GitHub\n> GItHub就是用来备份本地 `.git` 而已，没有什么高科技原理。\n\n__1.生成ssh key__\n```git\nssh-keygen -t rsa -b 4096 -C 'your Email'\n```\n连续点3个回车，就可以下载到本地目录了\n\n```git\ncat ~/.ssh/id_rsa.pub\n```\n得到公钥内容，复制到Github个人设置里面就可以了\n\n__2.Github上创建一个远程仓库__\n![](./img/2.png)\ngithub个人主页创建仓库\n![](./img/3.png)\n描述仓库的名称，并且生成仓库\n\n__3.把本地目录上传到远程仓库__\n```git\ngit remote add origin git@xxxxxxx\n```\n`origin` 是远程仓库的默认名字，可以换，但是建议不要换\n`git@xxxxxx` 是远程仓库的地址\n\n```git\ngit push -u origin master\n```\n第一次推送需要写全，以后写`git push`就可以了，这段代码的意思是推送本地master分支到远程仓库origin的master分支。\n如果提示`git pull` 就`git pull`。提示`git pull`是因为本地代码与远程仓库有不同，所以`git pull`就是让本地和远程仓库保持一致。\n\n__4.上传其他分支到github__\n```git\ngit push origin x:x\n```\n提交分支x到远程仓库origin的x分支\n\n```git\ngit checkout x\ngit push -u origin x\n```\n先切换到x分支，然后在x分支推送到远程仓库\n\n__5.下载远程仓库的代码__\n\n```git\ngit clone git@?/xxx.git  //会在当前目录创建一个xxx目录\ngit clone git@?/xxx.git yyy  ///会在本地新建yyy目录\ngit clone git@?/xxx.git . //不会新建目录，会在当前目录来装代码和.git\n```\n第三种方法最后当前目录是一个空目录，不然容易覆盖之前的.git，很危险。\n\n__6.git通灵术__\n```git\ngit stash 文件  //把某个文件临时藏起来\ngit stash pop 文件  //把某个文件释放出来\n```\n\n资料参考:饥人谷\n \n","slug":"git的基本操作和Github","published":1,"updated":"2020-09-22T02:50:51.083Z","_id":"ckfc7es4u0000b8fqhom1azv7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"git的基本操作\"><a href=\"#git的基本操作\" class=\"headerlink\" title=\"git的基本操作\"></a>git的基本操作</h1><p><strong>配置本地的git</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name你的英文名</span><br><span class=\"line\">git config --global user.emai1你的邮箱</span><br><span class=\"line\">git config --globa1 push default simple</span><br><span class=\"line\">git config --global core. quotepath false</span><br><span class=\"line\">git config --global coreeditor code --wait</span><br><span class=\"line\">git config --globa1 core. autocrif input</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>1.初始化本地仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>操作完以后，本地会多出一个.git的目录，里面会记录各个版本的变化，如下图所示。<br><img src=\"./img/1.png\"><br><strong>2.把需要变动的内容提交到暂存区</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 路径  &#x2F;&#x2F;提交某个路径下的文件</span><br><span class=\"line\">git add .     &#x2F;&#x2F;把当前目录的所有文件提交到暂存区</span><br></pre></td></tr></table></figure>\n<p><strong>3.描述哪些文件不提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch .gitignore</span><br><span class=\"line\">vi .gitignore </span><br></pre></td></tr></table></figure>\n<p>.gitignore文件是描述哪些文件不会被提交到暂存区。把不需要提交的文件名写到.gitignore里面，就不会被提交。</p>\n<p><strong>4.把暂存区的文件提交到.git目录</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m 字符串 &#x2F;&#x2F;提交并说明理由，字符串里面如果有空格，就要用引号包起来</span><br><span class=\"line\">git commit -v &#x2F;&#x2F;会弹出对话框，告诉你这次提交变更了什么</span><br></pre></td></tr></table></figure>\n<p><strong>5.查看git的版本号</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log 查看当前版本号之前历史版本</span><br><span class=\"line\">git reflog 查看所有git的历史版本</span><br></pre></td></tr></table></figure>\n<p><strong>6.回到之前的版本</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --head xxxxxx</span><br></pre></td></tr></table></figure>\n<p>以上的xxxxxx代表版本号，可以通过git log 和 git reflog 来查看，需要回退的版本。</p>\n<p><strong>7.创建分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch xxx</span><br></pre></td></tr></table></figure>\n<p>创建一个分支，并命名为xxx</p>\n<p><strong>8.删除分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d xxx</span><br></pre></td></tr></table></figure>\n<p>删除分支xxx</p>\n<p><strong>9.切换分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout xxx</span><br></pre></td></tr></table></figure>\n<p>切换分支到xxx ，默认的分支名是master</p>\n<p><strong>10.将一个分支合并到当前分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge xxx</span><br></pre></td></tr></table></figure>\n<p>将xxx分支合并到当前分支</p>\n<hr>\n<h1 id=\"git远程仓库GitHub\"><a href=\"#git远程仓库GitHub\" class=\"headerlink\" title=\"git远程仓库GitHub\"></a>git远程仓库GitHub</h1><blockquote>\n<p>GItHub就是用来备份本地 <code>.git</code> 而已，没有什么高科技原理。</p>\n</blockquote>\n<p><strong>1.生成ssh key</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &#39;your Email&#39;</span><br></pre></td></tr></table></figure>\n<p>连续点3个回车，就可以下载到本地目录了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>得到公钥内容，复制到Github个人设置里面就可以了</p>\n<p><strong>2.Github上创建一个远程仓库</strong><br><img src=\"./img/2.png\"><br>github个人主页创建仓库<br><img src=\"./img/3.png\"><br>描述仓库的名称，并且生成仓库</p>\n<p><strong>3.把本地目录上传到远程仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@xxxxxxx</span><br></pre></td></tr></table></figure>\n<p><code>origin</code> 是远程仓库的默认名字，可以换，但是建议不要换<br><code>git@xxxxxx</code> 是远程仓库的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>第一次推送需要写全，以后写<code>git push</code>就可以了，这段代码的意思是推送本地master分支到远程仓库origin的master分支。<br>如果提示<code>git pull</code> 就<code>git pull</code>。提示<code>git pull</code>是因为本地代码与远程仓库有不同，所以<code>git pull</code>就是让本地和远程仓库保持一致。</p>\n<p><strong>4.上传其他分支到github</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin x:x</span><br></pre></td></tr></table></figure>\n<p>提交分支x到远程仓库origin的x分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout x</span><br><span class=\"line\">git push -u origin x</span><br></pre></td></tr></table></figure>\n<p>先切换到x分支，然后在x分支推送到远程仓库</p>\n<p><strong>5.下载远程仓库的代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@?&#x2F;xxx.git  &#x2F;&#x2F;会在当前目录创建一个xxx目录</span><br><span class=\"line\">git clone git@?&#x2F;xxx.git yyy  &#x2F;&#x2F;&#x2F;会在本地新建yyy目录</span><br><span class=\"line\">git clone git@?&#x2F;xxx.git . &#x2F;&#x2F;不会新建目录，会在当前目录来装代码和.git</span><br></pre></td></tr></table></figure>\n<p>第三种方法最后当前目录是一个空目录，不然容易覆盖之前的.git，很危险。</p>\n<p><strong>6.git通灵术</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash 文件  &#x2F;&#x2F;把某个文件临时藏起来</span><br><span class=\"line\">git stash pop 文件  &#x2F;&#x2F;把某个文件释放出来</span><br></pre></td></tr></table></figure>\n\n<p>资料参考:饥人谷</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"git的基本操作\"><a href=\"#git的基本操作\" class=\"headerlink\" title=\"git的基本操作\"></a>git的基本操作</h1><p><strong>配置本地的git</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name你的英文名</span><br><span class=\"line\">git config --global user.emai1你的邮箱</span><br><span class=\"line\">git config --globa1 push default simple</span><br><span class=\"line\">git config --global core. quotepath false</span><br><span class=\"line\">git config --global coreeditor code --wait</span><br><span class=\"line\">git config --globa1 core. autocrif input</span><br></pre></td></tr></table></figure>","more":"<p><strong>1.初始化本地仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>操作完以后，本地会多出一个.git的目录，里面会记录各个版本的变化，如下图所示。<br><img src=\"./img/1.png\"><br><strong>2.把需要变动的内容提交到暂存区</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 路径  &#x2F;&#x2F;提交某个路径下的文件</span><br><span class=\"line\">git add .     &#x2F;&#x2F;把当前目录的所有文件提交到暂存区</span><br></pre></td></tr></table></figure>\n<p><strong>3.描述哪些文件不提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch .gitignore</span><br><span class=\"line\">vi .gitignore </span><br></pre></td></tr></table></figure>\n<p>.gitignore文件是描述哪些文件不会被提交到暂存区。把不需要提交的文件名写到.gitignore里面，就不会被提交。</p>\n<p><strong>4.把暂存区的文件提交到.git目录</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m 字符串 &#x2F;&#x2F;提交并说明理由，字符串里面如果有空格，就要用引号包起来</span><br><span class=\"line\">git commit -v &#x2F;&#x2F;会弹出对话框，告诉你这次提交变更了什么</span><br></pre></td></tr></table></figure>\n<p><strong>5.查看git的版本号</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log 查看当前版本号之前历史版本</span><br><span class=\"line\">git reflog 查看所有git的历史版本</span><br></pre></td></tr></table></figure>\n<p><strong>6.回到之前的版本</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --head xxxxxx</span><br></pre></td></tr></table></figure>\n<p>以上的xxxxxx代表版本号，可以通过git log 和 git reflog 来查看，需要回退的版本。</p>\n<p><strong>7.创建分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch xxx</span><br></pre></td></tr></table></figure>\n<p>创建一个分支，并命名为xxx</p>\n<p><strong>8.删除分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d xxx</span><br></pre></td></tr></table></figure>\n<p>删除分支xxx</p>\n<p><strong>9.切换分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout xxx</span><br></pre></td></tr></table></figure>\n<p>切换分支到xxx ，默认的分支名是master</p>\n<p><strong>10.将一个分支合并到当前分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge xxx</span><br></pre></td></tr></table></figure>\n<p>将xxx分支合并到当前分支</p>\n<hr>\n<h1 id=\"git远程仓库GitHub\"><a href=\"#git远程仓库GitHub\" class=\"headerlink\" title=\"git远程仓库GitHub\"></a>git远程仓库GitHub</h1><blockquote>\n<p>GItHub就是用来备份本地 <code>.git</code> 而已，没有什么高科技原理。</p>\n</blockquote>\n<p><strong>1.生成ssh key</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &#39;your Email&#39;</span><br></pre></td></tr></table></figure>\n<p>连续点3个回车，就可以下载到本地目录了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>得到公钥内容，复制到Github个人设置里面就可以了</p>\n<p><strong>2.Github上创建一个远程仓库</strong><br><img src=\"./img/2.png\"><br>github个人主页创建仓库<br><img src=\"./img/3.png\"><br>描述仓库的名称，并且生成仓库</p>\n<p><strong>3.把本地目录上传到远程仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@xxxxxxx</span><br></pre></td></tr></table></figure>\n<p><code>origin</code> 是远程仓库的默认名字，可以换，但是建议不要换<br><code>git@xxxxxx</code> 是远程仓库的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>第一次推送需要写全，以后写<code>git push</code>就可以了，这段代码的意思是推送本地master分支到远程仓库origin的master分支。<br>如果提示<code>git pull</code> 就<code>git pull</code>。提示<code>git pull</code>是因为本地代码与远程仓库有不同，所以<code>git pull</code>就是让本地和远程仓库保持一致。</p>\n<p><strong>4.上传其他分支到github</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin x:x</span><br></pre></td></tr></table></figure>\n<p>提交分支x到远程仓库origin的x分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout x</span><br><span class=\"line\">git push -u origin x</span><br></pre></td></tr></table></figure>\n<p>先切换到x分支，然后在x分支推送到远程仓库</p>\n<p><strong>5.下载远程仓库的代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@?&#x2F;xxx.git  &#x2F;&#x2F;会在当前目录创建一个xxx目录</span><br><span class=\"line\">git clone git@?&#x2F;xxx.git yyy  &#x2F;&#x2F;&#x2F;会在本地新建yyy目录</span><br><span class=\"line\">git clone git@?&#x2F;xxx.git . &#x2F;&#x2F;不会新建目录，会在当前目录来装代码和.git</span><br></pre></td></tr></table></figure>\n<p>第三种方法最后当前目录是一个空目录，不然容易覆盖之前的.git，很危险。</p>\n<p><strong>6.git通灵术</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash 文件  &#x2F;&#x2F;把某个文件临时藏起来</span><br><span class=\"line\">git stash pop 文件  &#x2F;&#x2F;把某个文件释放出来</span><br></pre></td></tr></table></figure>\n\n<p>资料参考:饥人谷</p>"},{"title":"HTML的历史和学习方法","date":"2020-09-21T16:39:31.000Z","_content":"# __HTML历史__\n__WWW = URL + HTTP + HTML__\nWWW 就是万维网 World Wide Web 中文直翻就是「像世界一样大的网」\n`URL` 就是一个网址\n`HTTP` 一种传输的协议\n`HTML` 超文本编辑语言，这里可以理解成网页\n以上三样东西组成了WWW万维网\n<!--more-->\n> 万维网和互联网是有区别的,互联网出现在万维网之前，互联网就是ip和ip是可以互联的，可以就行数据互通，比如可以发送邮件和文件。而万维网是我知道ip，在浏览器输入ip就可以打开我要看到网页，可以说万维网是基于互联网发明出来的。\n\n<div align=center><img src = \"./img/1.png\" width = \"80%\"></div>\n\n# __HTML的学习方法__\n__HTML全称HtyperText Markup Language 超文本编辑语言__\n狭义的HTML5指，新增的100多个标签及功能\n广义的HTML5指，HTML5和它的朋友们（包括CSS3等）\n\n# __体系化学习__\n1.学习一门语言必须学会什么\n* 语法（代码怎么写）\n* 如何调试（怎么知道自己的代码写错了）\n* 在哪里查资料（其实就是为了抄代码）推荐MDN\n* 标准制定者是谁 HTML的标准制定者是W3C\n\n2.如何学(CRM学习法)\n* Copy 抄代码，抄老师\n* Run 放在自己的机器上运行成功\n* Modify 加一点自己的想法，然后重新运行成\n\n\n资料来源：饥人谷\n\n","source":"_posts/HTML的历史和学习方法.md","raw":"---\ntitle: HTML的历史和学习方法\ndate: 2020-09-21 16:39:31\ntags: HTML\n---\n# __HTML历史__\n__WWW = URL + HTTP + HTML__\nWWW 就是万维网 World Wide Web 中文直翻就是「像世界一样大的网」\n`URL` 就是一个网址\n`HTTP` 一种传输的协议\n`HTML` 超文本编辑语言，这里可以理解成网页\n以上三样东西组成了WWW万维网\n<!--more-->\n> 万维网和互联网是有区别的,互联网出现在万维网之前，互联网就是ip和ip是可以互联的，可以就行数据互通，比如可以发送邮件和文件。而万维网是我知道ip，在浏览器输入ip就可以打开我要看到网页，可以说万维网是基于互联网发明出来的。\n\n<div align=center><img src = \"./img/1.png\" width = \"80%\"></div>\n\n# __HTML的学习方法__\n__HTML全称HtyperText Markup Language 超文本编辑语言__\n狭义的HTML5指，新增的100多个标签及功能\n广义的HTML5指，HTML5和它的朋友们（包括CSS3等）\n\n# __体系化学习__\n1.学习一门语言必须学会什么\n* 语法（代码怎么写）\n* 如何调试（怎么知道自己的代码写错了）\n* 在哪里查资料（其实就是为了抄代码）推荐MDN\n* 标准制定者是谁 HTML的标准制定者是W3C\n\n2.如何学(CRM学习法)\n* Copy 抄代码，抄老师\n* Run 放在自己的机器上运行成功\n* Modify 加一点自己的想法，然后重新运行成\n\n\n资料来源：饥人谷\n\n","slug":"HTML的历史和学习方法","published":1,"updated":"2020-09-21T17:19:41.652Z","_id":"ckfcri0au0000dsfqflgnfhsq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HTML历史\"><a href=\"#HTML历史\" class=\"headerlink\" title=\"HTML历史\"></a><strong>HTML历史</strong></h1><p><strong>WWW = URL + HTTP + HTML</strong><br>WWW 就是万维网 World Wide Web 中文直翻就是「像世界一样大的网」<br><code>URL</code> 就是一个网址<br><code>HTTP</code> 一种传输的协议<br><code>HTML</code> 超文本编辑语言，这里可以理解成网页<br>以上三样东西组成了WWW万维网</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>万维网和互联网是有区别的,互联网出现在万维网之前，互联网就是ip和ip是可以互联的，可以就行数据互通，比如可以发送邮件和文件。而万维网是我知道ip，在浏览器输入ip就可以打开我要看到网页，可以说万维网是基于互联网发明出来的。</p>\n</blockquote>\n<div align=center><img src = \"./img/1.png\" width = \"80%\"></div>\n\n<h1 id=\"HTML的学习方法\"><a href=\"#HTML的学习方法\" class=\"headerlink\" title=\"HTML的学习方法\"></a><strong>HTML的学习方法</strong></h1><p><strong>HTML全称HtyperText Markup Language 超文本编辑语言</strong><br>狭义的HTML5指，新增的100多个标签及功能<br>广义的HTML5指，HTML5和它的朋友们（包括CSS3等）</p>\n<h1 id=\"体系化学习\"><a href=\"#体系化学习\" class=\"headerlink\" title=\"体系化学习\"></a><strong>体系化学习</strong></h1><p>1.学习一门语言必须学会什么</p>\n<ul>\n<li>语法（代码怎么写）</li>\n<li>如何调试（怎么知道自己的代码写错了）</li>\n<li>在哪里查资料（其实就是为了抄代码）推荐MDN</li>\n<li>标准制定者是谁 HTML的标准制定者是W3C</li>\n</ul>\n<p>2.如何学(CRM学习法)</p>\n<ul>\n<li>Copy 抄代码，抄老师</li>\n<li>Run 放在自己的机器上运行成功</li>\n<li>Modify 加一点自己的想法，然后重新运行成</li>\n</ul>\n<p>资料来源：饥人谷</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"HTML历史\"><a href=\"#HTML历史\" class=\"headerlink\" title=\"HTML历史\"></a><strong>HTML历史</strong></h1><p><strong>WWW = URL + HTTP + HTML</strong><br>WWW 就是万维网 World Wide Web 中文直翻就是「像世界一样大的网」<br><code>URL</code> 就是一个网址<br><code>HTTP</code> 一种传输的协议<br><code>HTML</code> 超文本编辑语言，这里可以理解成网页<br>以上三样东西组成了WWW万维网</p>","more":"<blockquote>\n<p>万维网和互联网是有区别的,互联网出现在万维网之前，互联网就是ip和ip是可以互联的，可以就行数据互通，比如可以发送邮件和文件。而万维网是我知道ip，在浏览器输入ip就可以打开我要看到网页，可以说万维网是基于互联网发明出来的。</p>\n</blockquote>\n<div align=center><img src = \"./img/1.png\" width = \"80%\"></div>\n\n<h1 id=\"HTML的学习方法\"><a href=\"#HTML的学习方法\" class=\"headerlink\" title=\"HTML的学习方法\"></a><strong>HTML的学习方法</strong></h1><p><strong>HTML全称HtyperText Markup Language 超文本编辑语言</strong><br>狭义的HTML5指，新增的100多个标签及功能<br>广义的HTML5指，HTML5和它的朋友们（包括CSS3等）</p>\n<h1 id=\"体系化学习\"><a href=\"#体系化学习\" class=\"headerlink\" title=\"体系化学习\"></a><strong>体系化学习</strong></h1><p>1.学习一门语言必须学会什么</p>\n<ul>\n<li>语法（代码怎么写）</li>\n<li>如何调试（怎么知道自己的代码写错了）</li>\n<li>在哪里查资料（其实就是为了抄代码）推荐MDN</li>\n<li>标准制定者是谁 HTML的标准制定者是W3C</li>\n</ul>\n<p>2.如何学(CRM学习法)</p>\n<ul>\n<li>Copy 抄代码，抄老师</li>\n<li>Run 放在自己的机器上运行成功</li>\n<li>Modify 加一点自己的想法，然后重新运行成</li>\n</ul>\n<p>资料来源：饥人谷</p>"},{"title":"Markdown的一些语法","date":"2020-09-21T17:27:31.000Z","cover":"./img/markdown.jpg","toc":true,"_content":"\n* __字体加粗__\n```markdown\n__内容__\n```\n<!--more-->\n* __插入入图片__\n```markdown\n![图片的描述](图片的地址)\n```\n这样插入的图片，无法控制大小，和位置（默认都是靠左）\n\n\n* __插入控制大小和位置的图片__\n```html\n<div align=\"center\"><img src = \"图片地址\" width = 50%></div>\n```\nmarkdown里面居然还可以写HTML，惊了...\n\n* __给文字加入超链接__\n```markdown\n[文字]( url )\n```\n* __表格__\n```markdown\n|标题1|标题2|标题3|标题4|\n|----|----|----|----|\n|内容1|内容2|内容3|内容4|\n```\n* __文字字体颜色大小__\n```markdown\n<font color=\"red\" face=\"微软雅黑\" size=7>我是字体</font>\n```\n\n","source":"_posts/Markdown的一些语法.md","raw":"---\ntitle: Markdown的一些语法\ndate: 2020-09-21 17:27:31\ncover: ./img/markdown.jpg\ntags: markdown\ntoc: true\n---\n\n* __字体加粗__\n```markdown\n__内容__\n```\n<!--more-->\n* __插入入图片__\n```markdown\n![图片的描述](图片的地址)\n```\n这样插入的图片，无法控制大小，和位置（默认都是靠左）\n\n\n* __插入控制大小和位置的图片__\n```html\n<div align=\"center\"><img src = \"图片地址\" width = 50%></div>\n```\nmarkdown里面居然还可以写HTML，惊了...\n\n* __给文字加入超链接__\n```markdown\n[文字]( url )\n```\n* __表格__\n```markdown\n|标题1|标题2|标题3|标题4|\n|----|----|----|----|\n|内容1|内容2|内容3|内容4|\n```\n* __文字字体颜色大小__\n```markdown\n<font color=\"red\" face=\"微软雅黑\" size=7>我是字体</font>\n```\n\n","slug":"Markdown的一些语法","published":1,"updated":"2020-09-24T11:03:30.139Z","_id":"ckfct8ks5000009fq7x1u683h","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><strong>字体加粗</strong><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">__内容__</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><strong>插入入图片</strong><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片的描述</span>](<span class=\"link\">图片的地址</span>)</span><br></pre></td></tr></table></figure>\n这样插入的图片，无法控制大小，和位置（默认都是靠左）</li>\n</ul>\n<ul>\n<li><p><strong>插入控制大小和位置的图片</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;图片地址&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">50%</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>markdown里面居然还可以写HTML，惊了…</p>\n</li>\n<li><p><strong>给文字加入超链接</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">文字</span>](<span class=\"link\"> url </span>)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>表格</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|标题1|标题2|标题3|标题4|</span><br><span class=\"line\">|----|----|----|----|</span><br><span class=\"line\">|内容1|内容2|内容3|内容4|</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>文字字体颜色大小</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;red&quot;</span> <span class=\"attr\">face</span>=<span class=\"string\">&quot;微软雅黑&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">7</span>&gt;</span></span>我是字体<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><strong>字体加粗</strong><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">__内容__</span></span><br></pre></td></tr></table></figure>","more":"</li>\n<li><strong>插入入图片</strong><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片的描述</span>](<span class=\"link\">图片的地址</span>)</span><br></pre></td></tr></table></figure>\n这样插入的图片，无法控制大小，和位置（默认都是靠左）</li>\n</ul>\n<ul>\n<li><p><strong>插入控制大小和位置的图片</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;图片地址&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">50%</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>markdown里面居然还可以写HTML，惊了…</p>\n</li>\n<li><p><strong>给文字加入超链接</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">文字</span>](<span class=\"link\"> url </span>)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>表格</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|标题1|标题2|标题3|标题4|</span><br><span class=\"line\">|----|----|----|----|</span><br><span class=\"line\">|内容1|内容2|内容3|内容4|</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>文字字体颜色大小</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;red&quot;</span> <span class=\"attr\">face</span>=<span class=\"string\">&quot;微软雅黑&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">7</span>&gt;</span></span>我是字体<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>"},{"title":"HTML标签","date":"2020-09-22T17:12:59.000Z","toc":true,"_content":"## __英语小课堂__\n\n|英文|翻译|英文|翻译|\n|----|----|----|----|\n|heading|标题|body|身体，正文|\n|paragraph|段落|section|章节|\n|article|一篇文章|main|主要|\n|aside|旁边的|anchor|锚点，定点|\n|strong|强壮，重要|emphasis|强调|\n|order|顺序|ordered|有顺序的|\n|unordered|无顺序的|description|描述|\n|term|术语|data|数据|\n|quote|引用|block|块|\n|inline|行内，内联|break|打断|\n<!--more-->\n\n推荐书籍《[网道HTML教程](https://wangdoc.com/html/)》阮一峰的网络文档。\n推荐工具 [JSbin](https://jsbin.com/?html,output) [代码沙盒](https://codesandbox.io/) 测速代码的时候可以用。\n\n## __HTML起手式__\n```HTML\n<!DOCTYPE html>  //文档类型\n<html lang=\"zh-CN\"> //html标签\n<head>\n    <meta charset=\"UTF-8\"> 》//文件的字符编码\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">  //防止页面缩放\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"/>  //告诉IE用最新的内核渲染页面\n    <title>Document</title>  //网页的标题\n</head>\n<body>\n    <div class=\"\"></div>\n</body>\n</html>\n```\n\n## __章节标签__\n\n标题 `h1~h6`\n章节 `section`\n文章 `article`\n段落 `p`\n头部 `header`\n脚部 `footer`\n主要内容 `main`\n划分 `div`\n其实我觉得html标签就是根据标签的语义，在网页合理使用。让网页看上去是有结构的。\n\n## __全局属性(所有标签都有的属性)__\n`class` 类\n`contenteditable` 可以让该标签内的内容可以被编辑\n`hidden` 让一个东西看不到\n`id` \n`style` 样式\n`tabindex` 用「Tab」键可以在页面里面切换\n`title`鼠标浮动到元素上，可以显示title的内容\n\n## __内容标签__\n`ol + li` 有序列表\n`ul + li` 无序列表\n`dl + dt + dd ` 描述列表\ndl = description list 描述列\ndt = description term 描述的术语\ndd = description data 描述的数据\n\n`pre`  在pre里面的段落，可以保留标签内的格式\n`code` 里面可以写代码\n`hr` 分割线\n`a` 超链接标签\n`em` 强调 语气\n`strong` 强调 本质\n`quote` 引用标签 属于内联标签\n`blockquote` 引用标签 属于块级标签\n\n\n资料参考：饥人谷\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/HTML标签.md","raw":"---\ntitle: HTML标签\ndate: 2020-09-22 17:12:59\ntags: HTML\ntoc : true\n---\n## __英语小课堂__\n\n|英文|翻译|英文|翻译|\n|----|----|----|----|\n|heading|标题|body|身体，正文|\n|paragraph|段落|section|章节|\n|article|一篇文章|main|主要|\n|aside|旁边的|anchor|锚点，定点|\n|strong|强壮，重要|emphasis|强调|\n|order|顺序|ordered|有顺序的|\n|unordered|无顺序的|description|描述|\n|term|术语|data|数据|\n|quote|引用|block|块|\n|inline|行内，内联|break|打断|\n<!--more-->\n\n推荐书籍《[网道HTML教程](https://wangdoc.com/html/)》阮一峰的网络文档。\n推荐工具 [JSbin](https://jsbin.com/?html,output) [代码沙盒](https://codesandbox.io/) 测速代码的时候可以用。\n\n## __HTML起手式__\n```HTML\n<!DOCTYPE html>  //文档类型\n<html lang=\"zh-CN\"> //html标签\n<head>\n    <meta charset=\"UTF-8\"> 》//文件的字符编码\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">  //防止页面缩放\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"/>  //告诉IE用最新的内核渲染页面\n    <title>Document</title>  //网页的标题\n</head>\n<body>\n    <div class=\"\"></div>\n</body>\n</html>\n```\n\n## __章节标签__\n\n标题 `h1~h6`\n章节 `section`\n文章 `article`\n段落 `p`\n头部 `header`\n脚部 `footer`\n主要内容 `main`\n划分 `div`\n其实我觉得html标签就是根据标签的语义，在网页合理使用。让网页看上去是有结构的。\n\n## __全局属性(所有标签都有的属性)__\n`class` 类\n`contenteditable` 可以让该标签内的内容可以被编辑\n`hidden` 让一个东西看不到\n`id` \n`style` 样式\n`tabindex` 用「Tab」键可以在页面里面切换\n`title`鼠标浮动到元素上，可以显示title的内容\n\n## __内容标签__\n`ol + li` 有序列表\n`ul + li` 无序列表\n`dl + dt + dd ` 描述列表\ndl = description list 描述列\ndt = description term 描述的术语\ndd = description data 描述的数据\n\n`pre`  在pre里面的段落，可以保留标签内的格式\n`code` 里面可以写代码\n`hr` 分割线\n`a` 超链接标签\n`em` 强调 语气\n`strong` 强调 本质\n`quote` 引用标签 属于内联标签\n`blockquote` 引用标签 属于块级标签\n\n\n资料参考：饥人谷\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"HTML标签","published":1,"updated":"2020-09-24T15:30:49.075Z","_id":"ckfe81by60000zvfqdnm557m2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"英语小课堂\"><a href=\"#英语小课堂\" class=\"headerlink\" title=\"英语小课堂\"></a><strong>英语小课堂</strong></h2><table>\n<thead>\n<tr>\n<th>英文</th>\n<th>翻译</th>\n<th>英文</th>\n<th>翻译</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>heading</td>\n<td>标题</td>\n<td>body</td>\n<td>身体，正文</td>\n</tr>\n<tr>\n<td>paragraph</td>\n<td>段落</td>\n<td>section</td>\n<td>章节</td>\n</tr>\n<tr>\n<td>article</td>\n<td>一篇文章</td>\n<td>main</td>\n<td>主要</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>旁边的</td>\n<td>anchor</td>\n<td>锚点，定点</td>\n</tr>\n<tr>\n<td>strong</td>\n<td>强壮，重要</td>\n<td>emphasis</td>\n<td>强调</td>\n</tr>\n<tr>\n<td>order</td>\n<td>顺序</td>\n<td>ordered</td>\n<td>有顺序的</td>\n</tr>\n<tr>\n<td>unordered</td>\n<td>无顺序的</td>\n<td>description</td>\n<td>描述</td>\n</tr>\n<tr>\n<td>term</td>\n<td>术语</td>\n<td>data</td>\n<td>数据</td>\n</tr>\n<tr>\n<td>quote</td>\n<td>引用</td>\n<td>block</td>\n<td>块</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内，内联</td>\n<td>break</td>\n<td>打断</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n<p>推荐书籍《<a href=\"https://wangdoc.com/html/\">网道HTML教程</a>》阮一峰的网络文档。<br>推荐工具 <a href=\"https://jsbin.com/?html,output\">JSbin</a> <a href=\"https://codesandbox.io/\">代码沙盒</a> 测速代码的时候可以用。</p>\n<h2 id=\"HTML起手式\"><a href=\"#HTML起手式\" class=\"headerlink\" title=\"HTML起手式\"></a><strong>HTML起手式</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span>  //文档类型</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-CN&quot;</span>&gt;</span> //html标签</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span> 》//文件的字符编码</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span>  //防止页面缩放</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>/&gt;</span>  //告诉IE用最新的内核渲染页面</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>  //网页的标题</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"章节标签\"><a href=\"#章节标签\" class=\"headerlink\" title=\"章节标签\"></a><strong>章节标签</strong></h2><p>标题 <code>h1~h6</code><br>章节 <code>section</code><br>文章 <code>article</code><br>段落 <code>p</code><br>头部 <code>header</code><br>脚部 <code>footer</code><br>主要内容 <code>main</code><br>划分 <code>div</code><br>其实我觉得html标签就是根据标签的语义，在网页合理使用。让网页看上去是有结构的。</p>\n<h2 id=\"全局属性-所有标签都有的属性\"><a href=\"#全局属性-所有标签都有的属性\" class=\"headerlink\" title=\"全局属性(所有标签都有的属性)\"></a><strong>全局属性(所有标签都有的属性)</strong></h2><p><code>class</code> 类<br><code>contenteditable</code> 可以让该标签内的内容可以被编辑<br><code>hidden</code> 让一个东西看不到<br><code>id</code><br><code>style</code> 样式<br><code>tabindex</code> 用「Tab」键可以在页面里面切换<br><code>title</code>鼠标浮动到元素上，可以显示title的内容</p>\n<h2 id=\"内容标签\"><a href=\"#内容标签\" class=\"headerlink\" title=\"内容标签\"></a><strong>内容标签</strong></h2><p><code>ol + li</code> 有序列表<br><code>ul + li</code> 无序列表<br><code>dl + dt + dd </code> 描述列表<br>dl = description list 描述列<br>dt = description term 描述的术语<br>dd = description data 描述的数据</p>\n<p><code>pre</code>  在pre里面的段落，可以保留标签内的格式<br><code>code</code> 里面可以写代码<br><code>hr</code> 分割线<br><code>a</code> 超链接标签<br><code>em</code> 强调 语气<br><code>strong</code> 强调 本质<br><code>quote</code> 引用标签 属于内联标签<br><code>blockquote</code> 引用标签 属于块级标签</p>\n<p>资料参考：饥人谷</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"英语小课堂\"><a href=\"#英语小课堂\" class=\"headerlink\" title=\"英语小课堂\"></a><strong>英语小课堂</strong></h2><table>\n<thead>\n<tr>\n<th>英文</th>\n<th>翻译</th>\n<th>英文</th>\n<th>翻译</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>heading</td>\n<td>标题</td>\n<td>body</td>\n<td>身体，正文</td>\n</tr>\n<tr>\n<td>paragraph</td>\n<td>段落</td>\n<td>section</td>\n<td>章节</td>\n</tr>\n<tr>\n<td>article</td>\n<td>一篇文章</td>\n<td>main</td>\n<td>主要</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>旁边的</td>\n<td>anchor</td>\n<td>锚点，定点</td>\n</tr>\n<tr>\n<td>strong</td>\n<td>强壮，重要</td>\n<td>emphasis</td>\n<td>强调</td>\n</tr>\n<tr>\n<td>order</td>\n<td>顺序</td>\n<td>ordered</td>\n<td>有顺序的</td>\n</tr>\n<tr>\n<td>unordered</td>\n<td>无顺序的</td>\n<td>description</td>\n<td>描述</td>\n</tr>\n<tr>\n<td>term</td>\n<td>术语</td>\n<td>data</td>\n<td>数据</td>\n</tr>\n<tr>\n<td>quote</td>\n<td>引用</td>\n<td>block</td>\n<td>块</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内，内联</td>\n<td>break</td>\n<td>打断</td>\n</tr>\n</tbody></table>","more":"<p>推荐书籍《<a href=\"https://wangdoc.com/html/\">网道HTML教程</a>》阮一峰的网络文档。<br>推荐工具 <a href=\"https://jsbin.com/?html,output\">JSbin</a> <a href=\"https://codesandbox.io/\">代码沙盒</a> 测速代码的时候可以用。</p>\n<h2 id=\"HTML起手式\"><a href=\"#HTML起手式\" class=\"headerlink\" title=\"HTML起手式\"></a><strong>HTML起手式</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span>  //文档类型</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-CN&quot;</span>&gt;</span> //html标签</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span> 》//文件的字符编码</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span>  //防止页面缩放</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>/&gt;</span>  //告诉IE用最新的内核渲染页面</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>  //网页的标题</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"章节标签\"><a href=\"#章节标签\" class=\"headerlink\" title=\"章节标签\"></a><strong>章节标签</strong></h2><p>标题 <code>h1~h6</code><br>章节 <code>section</code><br>文章 <code>article</code><br>段落 <code>p</code><br>头部 <code>header</code><br>脚部 <code>footer</code><br>主要内容 <code>main</code><br>划分 <code>div</code><br>其实我觉得html标签就是根据标签的语义，在网页合理使用。让网页看上去是有结构的。</p>\n<h2 id=\"全局属性-所有标签都有的属性\"><a href=\"#全局属性-所有标签都有的属性\" class=\"headerlink\" title=\"全局属性(所有标签都有的属性)\"></a><strong>全局属性(所有标签都有的属性)</strong></h2><p><code>class</code> 类<br><code>contenteditable</code> 可以让该标签内的内容可以被编辑<br><code>hidden</code> 让一个东西看不到<br><code>id</code><br><code>style</code> 样式<br><code>tabindex</code> 用「Tab」键可以在页面里面切换<br><code>title</code>鼠标浮动到元素上，可以显示title的内容</p>\n<h2 id=\"内容标签\"><a href=\"#内容标签\" class=\"headerlink\" title=\"内容标签\"></a><strong>内容标签</strong></h2><p><code>ol + li</code> 有序列表<br><code>ul + li</code> 无序列表<br><code>dl + dt + dd </code> 描述列表<br>dl = description list 描述列<br>dt = description term 描述的术语<br>dd = description data 描述的数据</p>\n<p><code>pre</code>  在pre里面的段落，可以保留标签内的格式<br><code>code</code> 里面可以写代码<br><code>hr</code> 分割线<br><code>a</code> 超链接标签<br><code>em</code> 强调 语气<br><code>strong</code> 强调 本质<br><code>quote</code> 引用标签 属于内联标签<br><code>blockquote</code> 引用标签 属于块级标签</p>\n<p>资料参考：饥人谷</p>"},{"title":"HTML重点标签","date":"2020-09-24T08:36:25.000Z","toc":true,"_content":"## __英语小课堂__\n\n|英文|翻译|英文|翻译|英文|翻译|\n|----|----|----|----|----|----|\n|hyper|超级|target|目标|refer+ence|引用|\n|frame|边框|erroe|错误|blank|空白|\n|parent|父母之一|self|自己|load|加载|\n|canvas|画布|\n<!--more-->\n\n## __前端开发打开HTML文件的正确姿势__\n\n1 http-server -c-1 //-c缓存 缓存等于-1 就是不要缓存\n2 parcel xxxx.html\n\n## __a标签__\n\n* 作用：跳转到一个页面，跳转内部锚点，发邮件打电话\n* 常用属性\n\n1 __herf__\n  * 网址\n  * 路径\n  * 文件名 \n    配合download使用，这样a标签就变成了一个下载按钮，可以下载该文件。\n  * 伪协议: javascript:; mailto:邮箱 tel:电话号码 \n    javasctipt:; 里面如果写js代码，就可以执行js命令，如果什么都不写，就会变成一个点击以后没有任何动作的a标签。\n  * id\n    href=\"#xxx\" 可以跳转到本页面，id为xxx的元素上。\n\n2 __target__\n\n  * `_blank` 在空白的页面上打开。\n  * `_self` 在当前页面打开，是默认值\n  * `_top` 配合`ifram`e理解,当一个页面里面，有一个iframe，iframe里面的a标签，target是`_top`的话，就在<font color=red>最上层</font>页面打开。 \n  * `_parent` 配合iframe理解，当一个页面里面，有一个iframe，iframe里面的a标签，target是`_paren`t的话，就在<font color=red>上一层</font>的页面打开\n  * xxx 在一个新的窗口打开并且把该页面命名为xxx，以后再新打开的窗口都会在xxx打开。利用一个窗口打开新的页面。例子：youku防止用户不看广告，所有新开的视频都在一个页面上打开。\n  * iframe 便签的name ，可以在不同的iframe打开。\n\n3 __download__ \n  * 只写`download`，就会把整个网页都下载下来。\n  * `download='xxxx'` 就是下载的文件命名为xxx\n\n## __iframe标签__\n   作用：在网页内内嵌一个窗口。（已经很少使用，只有很多古老的网站还在使用）\n\n## __table标签__\n   table里面要包含 thead tbody tfoot\n   ```html\n   <table>\n     <thead>\n       <tr>  //table raw 表格里的一行\n       \t <th>英文</th> //table head 表头\n         <th>翻译</th>\n       </tr>\n     </thead>\n     <tbody>\n\t<tr>\n\t <td>table</td> //table data 表格里的数据\n         <td>表格</td>\n\t</tr>\n     </tbody>\n     <tfoot></tfoot>\n   </table>\n   ```\n## __img标签__\n   * src=\"图片的地址也可以是相对路径\"\n   * alt=\"xxxx\" 图片下载失败的时候，提示用户alt里面的内容\n   * width，height 单独写一个，图片会自适应\n   * max-width:100% 图片会根据屏幕大小自适应\n\n## __form标签__\n  __作用__ :表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。\n  __属性__\n  * action:xxx 请求一个页面\n  * method:get/post 控制请求是get还是post\n  * autocomplete:on/off 可以自动建议之前输入过的用户名\n  * target:xxxx 提交到那个页面，该页面更新\nform标签里面必须有一个type=submit的东西，不然form就不会提交。\n\n## __input标签__\n  * __作用__ :包含在form标签里面，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件\n  属性太多，具体参考[MDN input](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input)\n\n参考资料:饥人谷\n\n\n\n\n","source":"_posts/HTML重点标签.md","raw":"---\ntitle: HTML重点标签\ndate: 2020-09-24 08:36:25\ntags: HTML\ntoc: true\n---\n## __英语小课堂__\n\n|英文|翻译|英文|翻译|英文|翻译|\n|----|----|----|----|----|----|\n|hyper|超级|target|目标|refer+ence|引用|\n|frame|边框|erroe|错误|blank|空白|\n|parent|父母之一|self|自己|load|加载|\n|canvas|画布|\n<!--more-->\n\n## __前端开发打开HTML文件的正确姿势__\n\n1 http-server -c-1 //-c缓存 缓存等于-1 就是不要缓存\n2 parcel xxxx.html\n\n## __a标签__\n\n* 作用：跳转到一个页面，跳转内部锚点，发邮件打电话\n* 常用属性\n\n1 __herf__\n  * 网址\n  * 路径\n  * 文件名 \n    配合download使用，这样a标签就变成了一个下载按钮，可以下载该文件。\n  * 伪协议: javascript:; mailto:邮箱 tel:电话号码 \n    javasctipt:; 里面如果写js代码，就可以执行js命令，如果什么都不写，就会变成一个点击以后没有任何动作的a标签。\n  * id\n    href=\"#xxx\" 可以跳转到本页面，id为xxx的元素上。\n\n2 __target__\n\n  * `_blank` 在空白的页面上打开。\n  * `_self` 在当前页面打开，是默认值\n  * `_top` 配合`ifram`e理解,当一个页面里面，有一个iframe，iframe里面的a标签，target是`_top`的话，就在<font color=red>最上层</font>页面打开。 \n  * `_parent` 配合iframe理解，当一个页面里面，有一个iframe，iframe里面的a标签，target是`_paren`t的话，就在<font color=red>上一层</font>的页面打开\n  * xxx 在一个新的窗口打开并且把该页面命名为xxx，以后再新打开的窗口都会在xxx打开。利用一个窗口打开新的页面。例子：youku防止用户不看广告，所有新开的视频都在一个页面上打开。\n  * iframe 便签的name ，可以在不同的iframe打开。\n\n3 __download__ \n  * 只写`download`，就会把整个网页都下载下来。\n  * `download='xxxx'` 就是下载的文件命名为xxx\n\n## __iframe标签__\n   作用：在网页内内嵌一个窗口。（已经很少使用，只有很多古老的网站还在使用）\n\n## __table标签__\n   table里面要包含 thead tbody tfoot\n   ```html\n   <table>\n     <thead>\n       <tr>  //table raw 表格里的一行\n       \t <th>英文</th> //table head 表头\n         <th>翻译</th>\n       </tr>\n     </thead>\n     <tbody>\n\t<tr>\n\t <td>table</td> //table data 表格里的数据\n         <td>表格</td>\n\t</tr>\n     </tbody>\n     <tfoot></tfoot>\n   </table>\n   ```\n## __img标签__\n   * src=\"图片的地址也可以是相对路径\"\n   * alt=\"xxxx\" 图片下载失败的时候，提示用户alt里面的内容\n   * width，height 单独写一个，图片会自适应\n   * max-width:100% 图片会根据屏幕大小自适应\n\n## __form标签__\n  __作用__ :表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。\n  __属性__\n  * action:xxx 请求一个页面\n  * method:get/post 控制请求是get还是post\n  * autocomplete:on/off 可以自动建议之前输入过的用户名\n  * target:xxxx 提交到那个页面，该页面更新\nform标签里面必须有一个type=submit的东西，不然form就不会提交。\n\n## __input标签__\n  * __作用__ :包含在form标签里面，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件\n  属性太多，具体参考[MDN input](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input)\n\n参考资料:饥人谷\n\n\n\n\n","slug":"HTML重点标签","published":1,"updated":"2020-09-24T10:59:59.487Z","_id":"ckfgkinwi000016fq84s42i8z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"英语小课堂\"><a href=\"#英语小课堂\" class=\"headerlink\" title=\"英语小课堂\"></a><strong>英语小课堂</strong></h2><table>\n<thead>\n<tr>\n<th>英文</th>\n<th>翻译</th>\n<th>英文</th>\n<th>翻译</th>\n<th>英文</th>\n<th>翻译</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hyper</td>\n<td>超级</td>\n<td>target</td>\n<td>目标</td>\n<td>refer+ence</td>\n<td>引用</td>\n</tr>\n<tr>\n<td>frame</td>\n<td>边框</td>\n<td>erroe</td>\n<td>错误</td>\n<td>blank</td>\n<td>空白</td>\n</tr>\n<tr>\n<td>parent</td>\n<td>父母之一</td>\n<td>self</td>\n<td>自己</td>\n<td>load</td>\n<td>加载</td>\n</tr>\n<tr>\n<td>canvas</td>\n<td>画布</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n<h2 id=\"前端开发打开HTML文件的正确姿势\"><a href=\"#前端开发打开HTML文件的正确姿势\" class=\"headerlink\" title=\"前端开发打开HTML文件的正确姿势\"></a><strong>前端开发打开HTML文件的正确姿势</strong></h2><p>1 http-server -c-1 //-c缓存 缓存等于-1 就是不要缓存<br>2 parcel xxxx.html</p>\n<h2 id=\"a标签\"><a href=\"#a标签\" class=\"headerlink\" title=\"a标签\"></a><strong>a标签</strong></h2><ul>\n<li>作用：跳转到一个页面，跳转内部锚点，发邮件打电话</li>\n<li>常用属性</li>\n</ul>\n<p>1 <strong>herf</strong></p>\n<ul>\n<li>网址</li>\n<li>路径</li>\n<li>文件名<br>配合download使用，这样a标签就变成了一个下载按钮，可以下载该文件。</li>\n<li>伪协议: javascript:; mailto:邮箱 tel:电话号码<br>javasctipt:; 里面如果写js代码，就可以执行js命令，如果什么都不写，就会变成一个点击以后没有任何动作的a标签。</li>\n<li>id<br>href=”#xxx” 可以跳转到本页面，id为xxx的元素上。</li>\n</ul>\n<p>2 <strong>target</strong></p>\n<ul>\n<li><code>_blank</code> 在空白的页面上打开。</li>\n<li><code>_self</code> 在当前页面打开，是默认值</li>\n<li><code>_top</code> 配合<code>ifram</code>e理解,当一个页面里面，有一个iframe，iframe里面的a标签，target是<code>_top</code>的话，就在<font color=red>最上层</font>页面打开。 </li>\n<li><code>_parent</code> 配合iframe理解，当一个页面里面，有一个iframe，iframe里面的a标签，target是<code>_paren</code>t的话，就在<font color=red>上一层</font>的页面打开</li>\n<li>xxx 在一个新的窗口打开并且把该页面命名为xxx，以后再新打开的窗口都会在xxx打开。利用一个窗口打开新的页面。例子：youku防止用户不看广告，所有新开的视频都在一个页面上打开。</li>\n<li>iframe 便签的name ，可以在不同的iframe打开。</li>\n</ul>\n<p>3 <strong>download</strong> </p>\n<ul>\n<li>只写<code>download</code>，就会把整个网页都下载下来。</li>\n<li><code>download=&#39;xxxx&#39;</code> 就是下载的文件命名为xxx</li>\n</ul>\n<h2 id=\"iframe标签\"><a href=\"#iframe标签\" class=\"headerlink\" title=\"iframe标签\"></a><strong>iframe标签</strong></h2><p>   作用：在网页内内嵌一个窗口。（已经很少使用，只有很多古老的网站还在使用）</p>\n<h2 id=\"table标签\"><a href=\"#table标签\" class=\"headerlink\" title=\"table标签\"></a><strong>table标签</strong></h2><p>   table里面要包含 thead tbody tfoot<br>   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>  //table raw 表格里的一行</span><br><span class=\"line\">      \t <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>英文<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span> //table head 表头</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>翻译<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> //table data 表格里的数据</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>表格<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"img标签\"><a href=\"#img标签\" class=\"headerlink\" title=\"img标签\"></a><strong>img标签</strong></h2><ul>\n<li>src=”图片的地址也可以是相对路径”</li>\n<li>alt=”xxxx” 图片下载失败的时候，提示用户alt里面的内容</li>\n<li>width，height 单独写一个，图片会自适应</li>\n<li>max-width:100% 图片会根据屏幕大小自适应</li>\n</ul>\n<h2 id=\"form标签\"><a href=\"#form标签\" class=\"headerlink\" title=\"form标签\"></a><strong>form标签</strong></h2><p>  <strong>作用</strong> :表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。<br>  <strong>属性</strong></p>\n<ul>\n<li>action:xxx 请求一个页面</li>\n<li>method:get/post 控制请求是get还是post</li>\n<li>autocomplete:on/off 可以自动建议之前输入过的用户名</li>\n<li>target:xxxx 提交到那个页面，该页面更新<br>form标签里面必须有一个type=submit的东西，不然form就不会提交。</li>\n</ul>\n<h2 id=\"input标签\"><a href=\"#input标签\" class=\"headerlink\" title=\"input标签\"></a><strong>input标签</strong></h2><ul>\n<li><strong>作用</strong> :包含在form标签里面，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件<br>属性太多，具体参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\">MDN input</a></li>\n</ul>\n<p>参考资料:饥人谷</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"英语小课堂\"><a href=\"#英语小课堂\" class=\"headerlink\" title=\"英语小课堂\"></a><strong>英语小课堂</strong></h2><table>\n<thead>\n<tr>\n<th>英文</th>\n<th>翻译</th>\n<th>英文</th>\n<th>翻译</th>\n<th>英文</th>\n<th>翻译</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hyper</td>\n<td>超级</td>\n<td>target</td>\n<td>目标</td>\n<td>refer+ence</td>\n<td>引用</td>\n</tr>\n<tr>\n<td>frame</td>\n<td>边框</td>\n<td>erroe</td>\n<td>错误</td>\n<td>blank</td>\n<td>空白</td>\n</tr>\n<tr>\n<td>parent</td>\n<td>父母之一</td>\n<td>self</td>\n<td>自己</td>\n<td>load</td>\n<td>加载</td>\n</tr>\n<tr>\n<td>canvas</td>\n<td>画布</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>","more":"<h2 id=\"前端开发打开HTML文件的正确姿势\"><a href=\"#前端开发打开HTML文件的正确姿势\" class=\"headerlink\" title=\"前端开发打开HTML文件的正确姿势\"></a><strong>前端开发打开HTML文件的正确姿势</strong></h2><p>1 http-server -c-1 //-c缓存 缓存等于-1 就是不要缓存<br>2 parcel xxxx.html</p>\n<h2 id=\"a标签\"><a href=\"#a标签\" class=\"headerlink\" title=\"a标签\"></a><strong>a标签</strong></h2><ul>\n<li>作用：跳转到一个页面，跳转内部锚点，发邮件打电话</li>\n<li>常用属性</li>\n</ul>\n<p>1 <strong>herf</strong></p>\n<ul>\n<li>网址</li>\n<li>路径</li>\n<li>文件名<br>配合download使用，这样a标签就变成了一个下载按钮，可以下载该文件。</li>\n<li>伪协议: javascript:; mailto:邮箱 tel:电话号码<br>javasctipt:; 里面如果写js代码，就可以执行js命令，如果什么都不写，就会变成一个点击以后没有任何动作的a标签。</li>\n<li>id<br>href=”#xxx” 可以跳转到本页面，id为xxx的元素上。</li>\n</ul>\n<p>2 <strong>target</strong></p>\n<ul>\n<li><code>_blank</code> 在空白的页面上打开。</li>\n<li><code>_self</code> 在当前页面打开，是默认值</li>\n<li><code>_top</code> 配合<code>ifram</code>e理解,当一个页面里面，有一个iframe，iframe里面的a标签，target是<code>_top</code>的话，就在<font color=red>最上层</font>页面打开。 </li>\n<li><code>_parent</code> 配合iframe理解，当一个页面里面，有一个iframe，iframe里面的a标签，target是<code>_paren</code>t的话，就在<font color=red>上一层</font>的页面打开</li>\n<li>xxx 在一个新的窗口打开并且把该页面命名为xxx，以后再新打开的窗口都会在xxx打开。利用一个窗口打开新的页面。例子：youku防止用户不看广告，所有新开的视频都在一个页面上打开。</li>\n<li>iframe 便签的name ，可以在不同的iframe打开。</li>\n</ul>\n<p>3 <strong>download</strong> </p>\n<ul>\n<li>只写<code>download</code>，就会把整个网页都下载下来。</li>\n<li><code>download=&#39;xxxx&#39;</code> 就是下载的文件命名为xxx</li>\n</ul>\n<h2 id=\"iframe标签\"><a href=\"#iframe标签\" class=\"headerlink\" title=\"iframe标签\"></a><strong>iframe标签</strong></h2><p>   作用：在网页内内嵌一个窗口。（已经很少使用，只有很多古老的网站还在使用）</p>\n<h2 id=\"table标签\"><a href=\"#table标签\" class=\"headerlink\" title=\"table标签\"></a><strong>table标签</strong></h2><p>   table里面要包含 thead tbody tfoot<br>   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>  //table raw 表格里的一行</span><br><span class=\"line\">      \t <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>英文<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span> //table head 表头</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>翻译<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> //table data 表格里的数据</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>表格<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"img标签\"><a href=\"#img标签\" class=\"headerlink\" title=\"img标签\"></a><strong>img标签</strong></h2><ul>\n<li>src=”图片的地址也可以是相对路径”</li>\n<li>alt=”xxxx” 图片下载失败的时候，提示用户alt里面的内容</li>\n<li>width，height 单独写一个，图片会自适应</li>\n<li>max-width:100% 图片会根据屏幕大小自适应</li>\n</ul>\n<h2 id=\"form标签\"><a href=\"#form标签\" class=\"headerlink\" title=\"form标签\"></a><strong>form标签</strong></h2><p>  <strong>作用</strong> :表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。<br>  <strong>属性</strong></p>\n<ul>\n<li>action:xxx 请求一个页面</li>\n<li>method:get/post 控制请求是get还是post</li>\n<li>autocomplete:on/off 可以自动建议之前输入过的用户名</li>\n<li>target:xxxx 提交到那个页面，该页面更新<br>form标签里面必须有一个type=submit的东西，不然form就不会提交。</li>\n</ul>\n<h2 id=\"input标签\"><a href=\"#input标签\" class=\"headerlink\" title=\"input标签\"></a><strong>input标签</strong></h2><ul>\n<li><strong>作用</strong> :包含在form标签里面，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件<br>属性太多，具体参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\">MDN input</a></li>\n</ul>\n<p>参考资料:饥人谷</p>"},{"title":"Ubuntu网络基本常识","date":"2020-09-26T15:43:33.000Z","toc":true,"cover":"./img/ubuntu.jpg","_content":"## __基本命令__\n\n* <font color=\"#DC461D\"><b>ifconfig</b></font>  查看ubuntu网络信息\n* <font color=\"#DC461D\"><b>ifconfig</b><i>网卡名</i></font> 查看网卡信息\n* <font color=\"#DC461D\"><b>sudo ifconfig up/down</b></font> 激活或禁用网卡\n* <font color=\"#DC461D\"><b>sudo /etc/networking star/stop</b></font> 启用或禁用网络\n<!--more-->\n\n## __Ubuntu18.04设置静态ip和动态ip方法__\n\n### __新旧版本对比__\n* 之前Ubuntu16.04版本里的网卡配置文件 /etc/network/interfaces  不起作用了，改成了netplan方式。\n\n### __什么是netplan__\n* netplan官网说它是一个在Linux系统中简单方便配置网络的程序，使用YAML格式的文件进行配置。\n\n### __netplan工作方式__\n* netplan 从配置文件 `/etc/netplan/*.yaml` 读取网络配置，启动后 netplan 在 `/run` 目录中生成特定网卡名称后缀的配置文件，然后将网卡设备的控制权移交给特定的网络守护程序。\n\n### __查看网卡用netplan配置信息__\n```\nroot@leeho:~# networkctl status ens160\n● 2: ens160\n       Link File: /lib/systemd/network/99-default.link\n    Network File: /run/systemd/network/10-netplan-ens160.network\n            Type: ether\n           State: routable (configured)\n            Path: pci-0000:03:00.0\n          Driver: vmxnet3\n          Vendor: VMware\n           Model: VMXNET3 Ethernet Controller\n      HW Address: 00:0c:29:04:52:18 (VMware, Inc.)\n         Address: 192.168.10.4\n                  fdb3:3ac8:f5cf::a36\n                  fdb3:3ac8:f5cf:0:20c:29ff:fe04:5218\n                  fe80::20c:29ff:fe04:5218\n         Gateway: 192.168.10.3 (VMware, Inc.)\n                  fe80::20c:29ff:fe86:36cf (VMware, Inc.)\n             DNS: 192.168.10.3\n                  223.5.5.5\n                  fdb3:3ac8:f5cf::1\n```\n### __如何使用netplan__\n* 配置文件：`/etc/netplan/*.yaml`\n* 命令：`netplan apply`\n* 每个网卡都需要在 `/etc/netplan` 目录中设置配置文件，在配置中指定网卡ip信息，使用DHCP或者静态ip方式。`/etc/netplan/` 目录下的配置文件，扩展名为.yaml（例如 `/etc/netplan/config.yaml`），然后运行 netplan apply 此命令分析配置信息并将其应用生效。配置文档示例：\n```\n#网卡eth0使用dhcp方式配置ip网络，配置如下。yaml配置是用空格作为缩进对齐，不能使用tab键。\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: yes\n      dhcp6: no\n#网卡eth0使用静态ip方式，用关键字addresses指定ip地址和子网掩码（支持ipv4和ivp6），gateway4指定网关ip，nameservers 指定DNS。\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      addresses:\n      - 10.10.10.2/24\n      gateway4: 10.10.10.1\n      nameservers:\n          search: [mydomain, otherdomain]\n          addresses: [10.10.10.1, 1.1.1.1]\n```\n配置文件里的关键字说明：\n`renderer`：指定后端网络服务，支持networkd（Systemd-networkd） 和 Network,Manager两种，默认是networkd。\n`ethernets`：指定是以太网配置，其他的还包括 wifis 或者 bridges\n`eth0`：以太网网卡名称\n`dhcp4`：开启使用ipv4的DHCP，默认是关闭。\n`dhcp6`：开启使用ipv6的DHCP，默认是关闭。\n`addresses`：对应网卡配置的静态ip地址，是ip/掩码的格式，支持ipv6地址，例如 addresses: [192.168.14.2/24, \"2001:1::1/64\"]\n`gateway4, gateway6`：指定IPv4/6默认网关，使用静态ip配置时使用。例如IPv4: gateway4: 172.16.0.1 例如IPv6: gateway6: \"2001:4::1\"\n`nameservers`：设置DNS服务器和搜索域。有两个受支持的字段：addresses:是DNS地址列表，search:是搜索域列表,没有特殊需要可以不配置search这项。\n\n资源来源:https://developer.aliyun.com/article/744737\n\n\n","source":"_posts/Ubuntu网络基本常识.md","raw":"---\ntitle: Ubuntu网络基本常识\ndate: 2020-09-26 15:43:33\ntags: ubuntu网络\ntoc: true\ncover: ./img/ubuntu.jpg\n---\n## __基本命令__\n\n* <font color=\"#DC461D\"><b>ifconfig</b></font>  查看ubuntu网络信息\n* <font color=\"#DC461D\"><b>ifconfig</b><i>网卡名</i></font> 查看网卡信息\n* <font color=\"#DC461D\"><b>sudo ifconfig up/down</b></font> 激活或禁用网卡\n* <font color=\"#DC461D\"><b>sudo /etc/networking star/stop</b></font> 启用或禁用网络\n<!--more-->\n\n## __Ubuntu18.04设置静态ip和动态ip方法__\n\n### __新旧版本对比__\n* 之前Ubuntu16.04版本里的网卡配置文件 /etc/network/interfaces  不起作用了，改成了netplan方式。\n\n### __什么是netplan__\n* netplan官网说它是一个在Linux系统中简单方便配置网络的程序，使用YAML格式的文件进行配置。\n\n### __netplan工作方式__\n* netplan 从配置文件 `/etc/netplan/*.yaml` 读取网络配置，启动后 netplan 在 `/run` 目录中生成特定网卡名称后缀的配置文件，然后将网卡设备的控制权移交给特定的网络守护程序。\n\n### __查看网卡用netplan配置信息__\n```\nroot@leeho:~# networkctl status ens160\n● 2: ens160\n       Link File: /lib/systemd/network/99-default.link\n    Network File: /run/systemd/network/10-netplan-ens160.network\n            Type: ether\n           State: routable (configured)\n            Path: pci-0000:03:00.0\n          Driver: vmxnet3\n          Vendor: VMware\n           Model: VMXNET3 Ethernet Controller\n      HW Address: 00:0c:29:04:52:18 (VMware, Inc.)\n         Address: 192.168.10.4\n                  fdb3:3ac8:f5cf::a36\n                  fdb3:3ac8:f5cf:0:20c:29ff:fe04:5218\n                  fe80::20c:29ff:fe04:5218\n         Gateway: 192.168.10.3 (VMware, Inc.)\n                  fe80::20c:29ff:fe86:36cf (VMware, Inc.)\n             DNS: 192.168.10.3\n                  223.5.5.5\n                  fdb3:3ac8:f5cf::1\n```\n### __如何使用netplan__\n* 配置文件：`/etc/netplan/*.yaml`\n* 命令：`netplan apply`\n* 每个网卡都需要在 `/etc/netplan` 目录中设置配置文件，在配置中指定网卡ip信息，使用DHCP或者静态ip方式。`/etc/netplan/` 目录下的配置文件，扩展名为.yaml（例如 `/etc/netplan/config.yaml`），然后运行 netplan apply 此命令分析配置信息并将其应用生效。配置文档示例：\n```\n#网卡eth0使用dhcp方式配置ip网络，配置如下。yaml配置是用空格作为缩进对齐，不能使用tab键。\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: yes\n      dhcp6: no\n#网卡eth0使用静态ip方式，用关键字addresses指定ip地址和子网掩码（支持ipv4和ivp6），gateway4指定网关ip，nameservers 指定DNS。\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      addresses:\n      - 10.10.10.2/24\n      gateway4: 10.10.10.1\n      nameservers:\n          search: [mydomain, otherdomain]\n          addresses: [10.10.10.1, 1.1.1.1]\n```\n配置文件里的关键字说明：\n`renderer`：指定后端网络服务，支持networkd（Systemd-networkd） 和 Network,Manager两种，默认是networkd。\n`ethernets`：指定是以太网配置，其他的还包括 wifis 或者 bridges\n`eth0`：以太网网卡名称\n`dhcp4`：开启使用ipv4的DHCP，默认是关闭。\n`dhcp6`：开启使用ipv6的DHCP，默认是关闭。\n`addresses`：对应网卡配置的静态ip地址，是ip/掩码的格式，支持ipv6地址，例如 addresses: [192.168.14.2/24, \"2001:1::1/64\"]\n`gateway4, gateway6`：指定IPv4/6默认网关，使用静态ip配置时使用。例如IPv4: gateway4: 172.16.0.1 例如IPv6: gateway6: \"2001:4::1\"\n`nameservers`：设置DNS服务器和搜索域。有两个受支持的字段：addresses:是DNS地址列表，search:是搜索域列表,没有特殊需要可以不配置search这项。\n\n资源来源:https://developer.aliyun.com/article/744737\n\n\n","slug":"Ubuntu网络基本常识","published":1,"updated":"2020-09-26T16:29:55.235Z","_id":"ckfjuh4ut0000tufqh4v86j2y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a><strong>基本命令</strong></h2><ul>\n<li><font color=\"#DC461D\"><b>ifconfig</b></font>  查看ubuntu网络信息</li>\n<li><font color=\"#DC461D\"><b>ifconfig</b><i>网卡名</i></font> 查看网卡信息</li>\n<li><font color=\"#DC461D\"><b>sudo ifconfig up/down</b></font> 激活或禁用网卡</li>\n<li><font color=\"#DC461D\"><b>sudo /etc/networking star/stop</b></font> 启用或禁用网络<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"Ubuntu18-04设置静态ip和动态ip方法\"><a href=\"#Ubuntu18-04设置静态ip和动态ip方法\" class=\"headerlink\" title=\"Ubuntu18.04设置静态ip和动态ip方法\"></a><strong>Ubuntu18.04设置静态ip和动态ip方法</strong></h2><h3 id=\"新旧版本对比\"><a href=\"#新旧版本对比\" class=\"headerlink\" title=\"新旧版本对比\"></a><strong>新旧版本对比</strong></h3><ul>\n<li>之前Ubuntu16.04版本里的网卡配置文件 /etc/network/interfaces  不起作用了，改成了netplan方式。</li>\n</ul>\n<h3 id=\"什么是netplan\"><a href=\"#什么是netplan\" class=\"headerlink\" title=\"什么是netplan\"></a><strong>什么是netplan</strong></h3><ul>\n<li>netplan官网说它是一个在Linux系统中简单方便配置网络的程序，使用YAML格式的文件进行配置。</li>\n</ul>\n<h3 id=\"netplan工作方式\"><a href=\"#netplan工作方式\" class=\"headerlink\" title=\"netplan工作方式\"></a><strong>netplan工作方式</strong></h3><ul>\n<li>netplan 从配置文件 <code>/etc/netplan/*.yaml</code> 读取网络配置，启动后 netplan 在 <code>/run</code> 目录中生成特定网卡名称后缀的配置文件，然后将网卡设备的控制权移交给特定的网络守护程序。</li>\n</ul>\n<h3 id=\"查看网卡用netplan配置信息\"><a href=\"#查看网卡用netplan配置信息\" class=\"headerlink\" title=\"查看网卡用netplan配置信息\"></a><strong>查看网卡用netplan配置信息</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@leeho:~# networkctl status ens160</span><br><span class=\"line\">● 2: ens160</span><br><span class=\"line\">       Link File: &#x2F;lib&#x2F;systemd&#x2F;network&#x2F;99-default.link</span><br><span class=\"line\">    Network File: &#x2F;run&#x2F;systemd&#x2F;network&#x2F;10-netplan-ens160.network</span><br><span class=\"line\">            Type: ether</span><br><span class=\"line\">           State: routable (configured)</span><br><span class=\"line\">            Path: pci-0000:03:00.0</span><br><span class=\"line\">          Driver: vmxnet3</span><br><span class=\"line\">          Vendor: VMware</span><br><span class=\"line\">           Model: VMXNET3 Ethernet Controller</span><br><span class=\"line\">      HW Address: 00:0c:29:04:52:18 (VMware, Inc.)</span><br><span class=\"line\">         Address: 192.168.10.4</span><br><span class=\"line\">                  fdb3:3ac8:f5cf::a36</span><br><span class=\"line\">                  fdb3:3ac8:f5cf:0:20c:29ff:fe04:5218</span><br><span class=\"line\">                  fe80::20c:29ff:fe04:5218</span><br><span class=\"line\">         Gateway: 192.168.10.3 (VMware, Inc.)</span><br><span class=\"line\">                  fe80::20c:29ff:fe86:36cf (VMware, Inc.)</span><br><span class=\"line\">             DNS: 192.168.10.3</span><br><span class=\"line\">                  223.5.5.5</span><br><span class=\"line\">                  fdb3:3ac8:f5cf::1</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何使用netplan\"><a href=\"#如何使用netplan\" class=\"headerlink\" title=\"如何使用netplan\"></a><strong>如何使用netplan</strong></h3><ul>\n<li>配置文件：<code>/etc/netplan/*.yaml</code></li>\n<li>命令：<code>netplan apply</code></li>\n<li>每个网卡都需要在 <code>/etc/netplan</code> 目录中设置配置文件，在配置中指定网卡ip信息，使用DHCP或者静态ip方式。<code>/etc/netplan/</code> 目录下的配置文件，扩展名为.yaml（例如 <code>/etc/netplan/config.yaml</code>），然后运行 netplan apply 此命令分析配置信息并将其应用生效。配置文档示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#网卡eth0使用dhcp方式配置ip网络，配置如下。yaml配置是用空格作为缩进对齐，不能使用tab键。</span><br><span class=\"line\">network:</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\">  renderer: networkd</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    eth0:</span><br><span class=\"line\">      dhcp4: yes</span><br><span class=\"line\">      dhcp6: no</span><br><span class=\"line\">#网卡eth0使用静态ip方式，用关键字addresses指定ip地址和子网掩码（支持ipv4和ivp6），gateway4指定网关ip，nameservers 指定DNS。</span><br><span class=\"line\">network:</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\">  renderer: networkd</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    eth0:</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">      - 10.10.10.2&#x2F;24</span><br><span class=\"line\">      gateway4: 10.10.10.1</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">          search: [mydomain, otherdomain]</span><br><span class=\"line\">          addresses: [10.10.10.1, 1.1.1.1]</span><br></pre></td></tr></table></figure>\n配置文件里的关键字说明：<br><code>renderer</code>：指定后端网络服务，支持networkd（Systemd-networkd） 和 Network,Manager两种，默认是networkd。<br><code>ethernets</code>：指定是以太网配置，其他的还包括 wifis 或者 bridges<br><code>eth0</code>：以太网网卡名称<br><code>dhcp4</code>：开启使用ipv4的DHCP，默认是关闭。<br><code>dhcp6</code>：开启使用ipv6的DHCP，默认是关闭。<br><code>addresses</code>：对应网卡配置的静态ip地址，是ip/掩码的格式，支持ipv6地址，例如 addresses: [192.168.14.2/24, “2001:1::1/64”]<br><code>gateway4, gateway6</code>：指定IPv4/6默认网关，使用静态ip配置时使用。例如IPv4: gateway4: 172.16.0.1 例如IPv6: gateway6: “2001:4::1”<br><code>nameservers</code>：设置DNS服务器和搜索域。有两个受支持的字段：addresses:是DNS地址列表，search:是搜索域列表,没有特殊需要可以不配置search这项。</li>\n</ul>\n<p>资源来源:<a href=\"https://developer.aliyun.com/article/744737\">https://developer.aliyun.com/article/744737</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a><strong>基本命令</strong></h2><ul>\n<li><font color=\"#DC461D\"><b>ifconfig</b></font>  查看ubuntu网络信息</li>\n<li><font color=\"#DC461D\"><b>ifconfig</b><i>网卡名</i></font> 查看网卡信息</li>\n<li><font color=\"#DC461D\"><b>sudo ifconfig up/down</b></font> 激活或禁用网卡</li>\n<li><font color=\"#DC461D\"><b>sudo /etc/networking star/stop</b></font> 启用或禁用网络","more":"</li>\n</ul>\n<h2 id=\"Ubuntu18-04设置静态ip和动态ip方法\"><a href=\"#Ubuntu18-04设置静态ip和动态ip方法\" class=\"headerlink\" title=\"Ubuntu18.04设置静态ip和动态ip方法\"></a><strong>Ubuntu18.04设置静态ip和动态ip方法</strong></h2><h3 id=\"新旧版本对比\"><a href=\"#新旧版本对比\" class=\"headerlink\" title=\"新旧版本对比\"></a><strong>新旧版本对比</strong></h3><ul>\n<li>之前Ubuntu16.04版本里的网卡配置文件 /etc/network/interfaces  不起作用了，改成了netplan方式。</li>\n</ul>\n<h3 id=\"什么是netplan\"><a href=\"#什么是netplan\" class=\"headerlink\" title=\"什么是netplan\"></a><strong>什么是netplan</strong></h3><ul>\n<li>netplan官网说它是一个在Linux系统中简单方便配置网络的程序，使用YAML格式的文件进行配置。</li>\n</ul>\n<h3 id=\"netplan工作方式\"><a href=\"#netplan工作方式\" class=\"headerlink\" title=\"netplan工作方式\"></a><strong>netplan工作方式</strong></h3><ul>\n<li>netplan 从配置文件 <code>/etc/netplan/*.yaml</code> 读取网络配置，启动后 netplan 在 <code>/run</code> 目录中生成特定网卡名称后缀的配置文件，然后将网卡设备的控制权移交给特定的网络守护程序。</li>\n</ul>\n<h3 id=\"查看网卡用netplan配置信息\"><a href=\"#查看网卡用netplan配置信息\" class=\"headerlink\" title=\"查看网卡用netplan配置信息\"></a><strong>查看网卡用netplan配置信息</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@leeho:~# networkctl status ens160</span><br><span class=\"line\">● 2: ens160</span><br><span class=\"line\">       Link File: &#x2F;lib&#x2F;systemd&#x2F;network&#x2F;99-default.link</span><br><span class=\"line\">    Network File: &#x2F;run&#x2F;systemd&#x2F;network&#x2F;10-netplan-ens160.network</span><br><span class=\"line\">            Type: ether</span><br><span class=\"line\">           State: routable (configured)</span><br><span class=\"line\">            Path: pci-0000:03:00.0</span><br><span class=\"line\">          Driver: vmxnet3</span><br><span class=\"line\">          Vendor: VMware</span><br><span class=\"line\">           Model: VMXNET3 Ethernet Controller</span><br><span class=\"line\">      HW Address: 00:0c:29:04:52:18 (VMware, Inc.)</span><br><span class=\"line\">         Address: 192.168.10.4</span><br><span class=\"line\">                  fdb3:3ac8:f5cf::a36</span><br><span class=\"line\">                  fdb3:3ac8:f5cf:0:20c:29ff:fe04:5218</span><br><span class=\"line\">                  fe80::20c:29ff:fe04:5218</span><br><span class=\"line\">         Gateway: 192.168.10.3 (VMware, Inc.)</span><br><span class=\"line\">                  fe80::20c:29ff:fe86:36cf (VMware, Inc.)</span><br><span class=\"line\">             DNS: 192.168.10.3</span><br><span class=\"line\">                  223.5.5.5</span><br><span class=\"line\">                  fdb3:3ac8:f5cf::1</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何使用netplan\"><a href=\"#如何使用netplan\" class=\"headerlink\" title=\"如何使用netplan\"></a><strong>如何使用netplan</strong></h3><ul>\n<li>配置文件：<code>/etc/netplan/*.yaml</code></li>\n<li>命令：<code>netplan apply</code></li>\n<li>每个网卡都需要在 <code>/etc/netplan</code> 目录中设置配置文件，在配置中指定网卡ip信息，使用DHCP或者静态ip方式。<code>/etc/netplan/</code> 目录下的配置文件，扩展名为.yaml（例如 <code>/etc/netplan/config.yaml</code>），然后运行 netplan apply 此命令分析配置信息并将其应用生效。配置文档示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#网卡eth0使用dhcp方式配置ip网络，配置如下。yaml配置是用空格作为缩进对齐，不能使用tab键。</span><br><span class=\"line\">network:</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\">  renderer: networkd</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    eth0:</span><br><span class=\"line\">      dhcp4: yes</span><br><span class=\"line\">      dhcp6: no</span><br><span class=\"line\">#网卡eth0使用静态ip方式，用关键字addresses指定ip地址和子网掩码（支持ipv4和ivp6），gateway4指定网关ip，nameservers 指定DNS。</span><br><span class=\"line\">network:</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\">  renderer: networkd</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    eth0:</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">      - 10.10.10.2&#x2F;24</span><br><span class=\"line\">      gateway4: 10.10.10.1</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">          search: [mydomain, otherdomain]</span><br><span class=\"line\">          addresses: [10.10.10.1, 1.1.1.1]</span><br></pre></td></tr></table></figure>\n配置文件里的关键字说明：<br><code>renderer</code>：指定后端网络服务，支持networkd（Systemd-networkd） 和 Network,Manager两种，默认是networkd。<br><code>ethernets</code>：指定是以太网配置，其他的还包括 wifis 或者 bridges<br><code>eth0</code>：以太网网卡名称<br><code>dhcp4</code>：开启使用ipv4的DHCP，默认是关闭。<br><code>dhcp6</code>：开启使用ipv6的DHCP，默认是关闭。<br><code>addresses</code>：对应网卡配置的静态ip地址，是ip/掩码的格式，支持ipv6地址，例如 addresses: [192.168.14.2/24, “2001:1::1/64”]<br><code>gateway4, gateway6</code>：指定IPv4/6默认网关，使用静态ip配置时使用。例如IPv4: gateway4: 172.16.0.1 例如IPv6: gateway6: “2001:4::1”<br><code>nameservers</code>：设置DNS服务器和搜索域。有两个受支持的字段：addresses:是DNS地址列表，search:是搜索域列表,没有特殊需要可以不配置search这项。</li>\n</ul>\n<p>资源来源:<a href=\"https://developer.aliyun.com/article/744737\">https://developer.aliyun.com/article/744737</a></p>"},{"title":"CSS基础概念","date":"2020-09-29T17:03:22.000Z","toc":true,"cover":"./img/csslogo.jpg","_content":"## __CSS的历史__\n* CSS全称_Cascading Style Sheets_ ，又称层叠样式表。\n* 于1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS。他们在1994年首次在芝加哥的一次会议上第一次展示了CSS的建议。\n<!--more-->\n\n## __层叠指的是什么__\n* 样式层叠\n可以多次对同一选择器进行样式声明\n* 选择器层叠\n可以用不同选择器对同一元素进行样式声明\n* 文件层叠\n可以用多个文件进行层叠\n\n## __CSS的历史版本__\n<div align=\"center\" ><img src=\"./img/2.png\"></div>\n\n## __CSS语法__\n* 样式语法\n```css\n选择器{\n 属性名：属性值;\n /*注释*/\n}\n```\n* @语法\n```css\n@charset \"UTF-8\"; //告诉浏览器用UTF-8的编码方式解析；必须放在第一行；\n@import url(style.css); //从外部引入CSS样式；\n@media (min-width:100px) and (max-width:200px){\n   样式语法\n} //当设备的最小宽度为100px,最大宽度为200px时，才会执行。\n```\n\n## __如何调试__\n* Border调试法\n```CSS\nborder:1px solid red;\n```\n怀疑某个元素有问题，就给这个元素加个border，border没有出现，说明选择器错了或者语法错了，border出现了，看看边界是否符合预期。\n\n## __在哪查资料__\n* Google搜索关键词时加MDN\n* CSS tricks https://css-tricks.com/\n* 张鑫旭的博客\n\n## __CSS文档流__\n<div align=\"center\" ><img src=\"./img/1.png\"></div>\n\n* 流动方向\n`inline`元素从左到右，达到最右才会换行\n`block`元素从上到下，每一个都另起一行\n`inline-block`元素从左到右，但是都是以块的形式存在，不会分离\n\n## __元素的高度和宽度__\n<div align=\"center\" ><img src=\"./img/3.png\"></div>\n\n元素不分是内联还是块级元素，可以通过`display`来设置元素是块级元素还是内联元素。\n\n* 宽度\n`inline`元素的宽度为内部`inline`元素的和，不能用宽度来指定，可以由`padding`来把宽度撑开。\n`block`元素默认自动计算宽度，默认是占满一行，但不是100%,但是不建议写宽度100%，可以由`width`来指定。\n`inline-block`元素，默认宽度是有里面的内容来决定，但是也可以由`width`来指定。\n\n* 高度\n`inline`元素高度由`line-height`间接决定的，跟`height`无关。虽然可以通过padding来把inline元素撑开，但那不是它的高度，而是他的可视高地。\n`block`元素高度由内部文档流元素觉得，可以通过`height`来设定\n`inline-block`跟block类似，可以通过`height`来设定\n\n## __overflow溢出__\n* 当内容的宽度和高度大于容器的时候，会溢出容器。可以通过overflow来设置是否显示滚动条。\n```CSS\noverflow:auto // 只有当文字溢出的时候，才会显示，不溢出就不会显示。\noverflow:scroll // 不管是否溢出，都显示滚动条。\noverflow:hidden // 直接隐藏溢出部分 \noverflow:visible //默认设置，会显示溢出部分\n```\n\n## __盒模型__\n<div align=\"center\" ><img src=\"./img/4.png\"></div>\n* 盒模型有两种，一种是content盒模型/内容盒模型 ； 一种是border盒模型/边框盒模型。\ncontent盒模型-内容就是盒子的边界。\nborder盒模型-边框才是盒子的边界。\n\n* 公式\ncontent-box width/height = 内容的宽度\nborder-box width/height = 内容宽度 + padding + border\n\n## __margin合并__\n* 哪些情况会发送`margin`合并\n 父子`margin`合并\n 兄弟元素`margin`合并\n\n\n* 如何组织`margin`合并\n 父子合并用`padding`/`border`挡住\n 父子合并用`overflow:hidden`挡住\n 父子合并用`display:flex`\n 兄弟合并用`inline-block`消除\n\n## __基本单位__\n* 长度单位\npx  像素\nem  相对于自身font-size的倍数\n%\n整数\n\n* 颜色\n十六进制#FF6600 或者 #F60\nRGBA颜色rgb(0,0.0)或者rgba(0,0,0,1) rgba最后的1，表示透明度，1代表不透明，0代表完全透明\n\n资源来源:饥人谷\n","source":"_posts/CSS基础.md","raw":"---\ntitle: CSS基础概念\ndate: 2020-09-29 17:03:22\ntags: CSS\ntoc: true\ncover: ./img/csslogo.jpg\n---\n## __CSS的历史__\n* CSS全称_Cascading Style Sheets_ ，又称层叠样式表。\n* 于1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS。他们在1994年首次在芝加哥的一次会议上第一次展示了CSS的建议。\n<!--more-->\n\n## __层叠指的是什么__\n* 样式层叠\n可以多次对同一选择器进行样式声明\n* 选择器层叠\n可以用不同选择器对同一元素进行样式声明\n* 文件层叠\n可以用多个文件进行层叠\n\n## __CSS的历史版本__\n<div align=\"center\" ><img src=\"./img/2.png\"></div>\n\n## __CSS语法__\n* 样式语法\n```css\n选择器{\n 属性名：属性值;\n /*注释*/\n}\n```\n* @语法\n```css\n@charset \"UTF-8\"; //告诉浏览器用UTF-8的编码方式解析；必须放在第一行；\n@import url(style.css); //从外部引入CSS样式；\n@media (min-width:100px) and (max-width:200px){\n   样式语法\n} //当设备的最小宽度为100px,最大宽度为200px时，才会执行。\n```\n\n## __如何调试__\n* Border调试法\n```CSS\nborder:1px solid red;\n```\n怀疑某个元素有问题，就给这个元素加个border，border没有出现，说明选择器错了或者语法错了，border出现了，看看边界是否符合预期。\n\n## __在哪查资料__\n* Google搜索关键词时加MDN\n* CSS tricks https://css-tricks.com/\n* 张鑫旭的博客\n\n## __CSS文档流__\n<div align=\"center\" ><img src=\"./img/1.png\"></div>\n\n* 流动方向\n`inline`元素从左到右，达到最右才会换行\n`block`元素从上到下，每一个都另起一行\n`inline-block`元素从左到右，但是都是以块的形式存在，不会分离\n\n## __元素的高度和宽度__\n<div align=\"center\" ><img src=\"./img/3.png\"></div>\n\n元素不分是内联还是块级元素，可以通过`display`来设置元素是块级元素还是内联元素。\n\n* 宽度\n`inline`元素的宽度为内部`inline`元素的和，不能用宽度来指定，可以由`padding`来把宽度撑开。\n`block`元素默认自动计算宽度，默认是占满一行，但不是100%,但是不建议写宽度100%，可以由`width`来指定。\n`inline-block`元素，默认宽度是有里面的内容来决定，但是也可以由`width`来指定。\n\n* 高度\n`inline`元素高度由`line-height`间接决定的，跟`height`无关。虽然可以通过padding来把inline元素撑开，但那不是它的高度，而是他的可视高地。\n`block`元素高度由内部文档流元素觉得，可以通过`height`来设定\n`inline-block`跟block类似，可以通过`height`来设定\n\n## __overflow溢出__\n* 当内容的宽度和高度大于容器的时候，会溢出容器。可以通过overflow来设置是否显示滚动条。\n```CSS\noverflow:auto // 只有当文字溢出的时候，才会显示，不溢出就不会显示。\noverflow:scroll // 不管是否溢出，都显示滚动条。\noverflow:hidden // 直接隐藏溢出部分 \noverflow:visible //默认设置，会显示溢出部分\n```\n\n## __盒模型__\n<div align=\"center\" ><img src=\"./img/4.png\"></div>\n* 盒模型有两种，一种是content盒模型/内容盒模型 ； 一种是border盒模型/边框盒模型。\ncontent盒模型-内容就是盒子的边界。\nborder盒模型-边框才是盒子的边界。\n\n* 公式\ncontent-box width/height = 内容的宽度\nborder-box width/height = 内容宽度 + padding + border\n\n## __margin合并__\n* 哪些情况会发送`margin`合并\n 父子`margin`合并\n 兄弟元素`margin`合并\n\n\n* 如何组织`margin`合并\n 父子合并用`padding`/`border`挡住\n 父子合并用`overflow:hidden`挡住\n 父子合并用`display:flex`\n 兄弟合并用`inline-block`消除\n\n## __基本单位__\n* 长度单位\npx  像素\nem  相对于自身font-size的倍数\n%\n整数\n\n* 颜色\n十六进制#FF6600 或者 #F60\nRGBA颜色rgb(0,0.0)或者rgba(0,0,0,1) rgba最后的1，表示透明度，1代表不透明，0代表完全透明\n\n资源来源:饥人谷\n","slug":"CSS基础","published":1,"updated":"2020-09-29T18:26:23.824Z","_id":"ckfo7o8j40000xrfq2424dj55","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"CSS的历史\"><a href=\"#CSS的历史\" class=\"headerlink\" title=\"CSS的历史\"></a><strong>CSS的历史</strong></h2><ul>\n<li>CSS全称<em>Cascading Style Sheets</em> ，又称层叠样式表。</li>\n<li>于1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS。他们在1994年首次在芝加哥的一次会议上第一次展示了CSS的建议。<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"层叠指的是什么\"><a href=\"#层叠指的是什么\" class=\"headerlink\" title=\"层叠指的是什么\"></a><strong>层叠指的是什么</strong></h2><ul>\n<li>样式层叠<br>可以多次对同一选择器进行样式声明</li>\n<li>选择器层叠<br>可以用不同选择器对同一元素进行样式声明</li>\n<li>文件层叠<br>可以用多个文件进行层叠</li>\n</ul>\n<h2 id=\"CSS的历史版本\"><a href=\"#CSS的历史版本\" class=\"headerlink\" title=\"CSS的历史版本\"></a><strong>CSS的历史版本</strong></h2><div align=\"center\" ><img src=\"./img/2.png\"></div>\n\n<h2 id=\"CSS语法\"><a href=\"#CSS语法\" class=\"headerlink\" title=\"CSS语法\"></a><strong>CSS语法</strong></h2><ul>\n<li>样式语法<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器&#123;</span><br><span class=\"line\"> 属性名：属性值;</span><br><span class=\"line\"> <span class=\"comment\">/*注释*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>@语法<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@charset &quot;UTF-8&quot;; //告诉浏览器用UTF-8的编码方式解析；必须放在第一行；</span><br><span class=\"line\">@import url(style.css); //从外部引入CSS样式；</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width:</span><span class=\"number\">100px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width:</span><span class=\"number\">200px</span>)&#123;</span><br><span class=\"line\">   样式语法</span><br><span class=\"line\">&#125; //当设备的最小宽度为100px,最大宽度为200px时，才会执行。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"如何调试\"><a href=\"#如何调试\" class=\"headerlink\" title=\"如何调试\"></a><strong>如何调试</strong></h2><ul>\n<li>Border调试法<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>;</span><br></pre></td></tr></table></figure>\n怀疑某个元素有问题，就给这个元素加个border，border没有出现，说明选择器错了或者语法错了，border出现了，看看边界是否符合预期。</li>\n</ul>\n<h2 id=\"在哪查资料\"><a href=\"#在哪查资料\" class=\"headerlink\" title=\"在哪查资料\"></a><strong>在哪查资料</strong></h2><ul>\n<li>Google搜索关键词时加MDN</li>\n<li>CSS tricks <a href=\"https://css-tricks.com/\">https://css-tricks.com/</a></li>\n<li>张鑫旭的博客</li>\n</ul>\n<h2 id=\"CSS文档流\"><a href=\"#CSS文档流\" class=\"headerlink\" title=\"CSS文档流\"></a><strong>CSS文档流</strong></h2><div align=\"center\" ><img src=\"./img/1.png\"></div>\n\n<ul>\n<li>流动方向<br><code>inline</code>元素从左到右，达到最右才会换行<br><code>block</code>元素从上到下，每一个都另起一行<br><code>inline-block</code>元素从左到右，但是都是以块的形式存在，不会分离</li>\n</ul>\n<h2 id=\"元素的高度和宽度\"><a href=\"#元素的高度和宽度\" class=\"headerlink\" title=\"元素的高度和宽度\"></a><strong>元素的高度和宽度</strong></h2><div align=\"center\" ><img src=\"./img/3.png\"></div>\n\n<p>元素不分是内联还是块级元素，可以通过<code>display</code>来设置元素是块级元素还是内联元素。</p>\n<ul>\n<li><p>宽度<br><code>inline</code>元素的宽度为内部<code>inline</code>元素的和，不能用宽度来指定，可以由<code>padding</code>来把宽度撑开。<br><code>block</code>元素默认自动计算宽度，默认是占满一行，但不是100%,但是不建议写宽度100%，可以由<code>width</code>来指定。<br><code>inline-block</code>元素，默认宽度是有里面的内容来决定，但是也可以由<code>width</code>来指定。</p>\n</li>\n<li><p>高度<br><code>inline</code>元素高度由<code>line-height</code>间接决定的，跟<code>height</code>无关。虽然可以通过padding来把inline元素撑开，但那不是它的高度，而是他的可视高地。<br><code>block</code>元素高度由内部文档流元素觉得，可以通过<code>height</code>来设定<br><code>inline-block</code>跟block类似，可以通过<code>height</code>来设定</p>\n</li>\n</ul>\n<h2 id=\"overflow溢出\"><a href=\"#overflow溢出\" class=\"headerlink\" title=\"overflow溢出\"></a><strong>overflow溢出</strong></h2><ul>\n<li>当内容的宽度和高度大于容器的时候，会溢出容器。可以通过overflow来设置是否显示滚动条。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow:auto // 只有当文字溢出的时候，才会显示，不溢出就不会显示。</span><br><span class=\"line\">overflow:scroll // 不管是否溢出，都显示滚动条。</span><br><span class=\"line\">overflow:hidden // 直接隐藏溢出部分 </span><br><span class=\"line\">overflow:visible //默认设置，会显示溢出部分</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a><strong>盒模型</strong></h2><div align=\"center\" ><img src=\"./img/4.png\"></div>\n* 盒模型有两种，一种是content盒模型/内容盒模型 ； 一种是border盒模型/边框盒模型。\ncontent盒模型-内容就是盒子的边界。\nborder盒模型-边框才是盒子的边界。\n\n<ul>\n<li>公式<br>content-box width/height = 内容的宽度<br>border-box width/height = 内容宽度 + padding + border</li>\n</ul>\n<h2 id=\"margin合并\"><a href=\"#margin合并\" class=\"headerlink\" title=\"margin合并\"></a><strong>margin合并</strong></h2><ul>\n<li>哪些情况会发送<code>margin</code>合并<br>父子<code>margin</code>合并<br>兄弟元素<code>margin</code>合并</li>\n</ul>\n<ul>\n<li>如何组织<code>margin</code>合并<br>父子合并用<code>padding</code>/<code>border</code>挡住<br>父子合并用<code>overflow:hidden</code>挡住<br>父子合并用<code>display:flex</code><br>兄弟合并用<code>inline-block</code>消除</li>\n</ul>\n<h2 id=\"基本单位\"><a href=\"#基本单位\" class=\"headerlink\" title=\"基本单位\"></a><strong>基本单位</strong></h2><ul>\n<li><p>长度单位<br>px  像素<br>em  相对于自身font-size的倍数<br>%<br>整数</p>\n</li>\n<li><p>颜色<br>十六进制#FF6600 或者 #F60<br>RGBA颜色rgb(0,0.0)或者rgba(0,0,0,1) rgba最后的1，表示透明度，1代表不透明，0代表完全透明</p>\n</li>\n</ul>\n<p>资源来源:饥人谷</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CSS的历史\"><a href=\"#CSS的历史\" class=\"headerlink\" title=\"CSS的历史\"></a><strong>CSS的历史</strong></h2><ul>\n<li>CSS全称<em>Cascading Style Sheets</em> ，又称层叠样式表。</li>\n<li>于1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS。他们在1994年首次在芝加哥的一次会议上第一次展示了CSS的建议。","more":"</li>\n</ul>\n<h2 id=\"层叠指的是什么\"><a href=\"#层叠指的是什么\" class=\"headerlink\" title=\"层叠指的是什么\"></a><strong>层叠指的是什么</strong></h2><ul>\n<li>样式层叠<br>可以多次对同一选择器进行样式声明</li>\n<li>选择器层叠<br>可以用不同选择器对同一元素进行样式声明</li>\n<li>文件层叠<br>可以用多个文件进行层叠</li>\n</ul>\n<h2 id=\"CSS的历史版本\"><a href=\"#CSS的历史版本\" class=\"headerlink\" title=\"CSS的历史版本\"></a><strong>CSS的历史版本</strong></h2><div align=\"center\" ><img src=\"./img/2.png\"></div>\n\n<h2 id=\"CSS语法\"><a href=\"#CSS语法\" class=\"headerlink\" title=\"CSS语法\"></a><strong>CSS语法</strong></h2><ul>\n<li>样式语法<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器&#123;</span><br><span class=\"line\"> 属性名：属性值;</span><br><span class=\"line\"> <span class=\"comment\">/*注释*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>@语法<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@charset &quot;UTF-8&quot;; //告诉浏览器用UTF-8的编码方式解析；必须放在第一行；</span><br><span class=\"line\">@import url(style.css); //从外部引入CSS样式；</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width:</span><span class=\"number\">100px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width:</span><span class=\"number\">200px</span>)&#123;</span><br><span class=\"line\">   样式语法</span><br><span class=\"line\">&#125; //当设备的最小宽度为100px,最大宽度为200px时，才会执行。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"如何调试\"><a href=\"#如何调试\" class=\"headerlink\" title=\"如何调试\"></a><strong>如何调试</strong></h2><ul>\n<li>Border调试法<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>;</span><br></pre></td></tr></table></figure>\n怀疑某个元素有问题，就给这个元素加个border，border没有出现，说明选择器错了或者语法错了，border出现了，看看边界是否符合预期。</li>\n</ul>\n<h2 id=\"在哪查资料\"><a href=\"#在哪查资料\" class=\"headerlink\" title=\"在哪查资料\"></a><strong>在哪查资料</strong></h2><ul>\n<li>Google搜索关键词时加MDN</li>\n<li>CSS tricks <a href=\"https://css-tricks.com/\">https://css-tricks.com/</a></li>\n<li>张鑫旭的博客</li>\n</ul>\n<h2 id=\"CSS文档流\"><a href=\"#CSS文档流\" class=\"headerlink\" title=\"CSS文档流\"></a><strong>CSS文档流</strong></h2><div align=\"center\" ><img src=\"./img/1.png\"></div>\n\n<ul>\n<li>流动方向<br><code>inline</code>元素从左到右，达到最右才会换行<br><code>block</code>元素从上到下，每一个都另起一行<br><code>inline-block</code>元素从左到右，但是都是以块的形式存在，不会分离</li>\n</ul>\n<h2 id=\"元素的高度和宽度\"><a href=\"#元素的高度和宽度\" class=\"headerlink\" title=\"元素的高度和宽度\"></a><strong>元素的高度和宽度</strong></h2><div align=\"center\" ><img src=\"./img/3.png\"></div>\n\n<p>元素不分是内联还是块级元素，可以通过<code>display</code>来设置元素是块级元素还是内联元素。</p>\n<ul>\n<li><p>宽度<br><code>inline</code>元素的宽度为内部<code>inline</code>元素的和，不能用宽度来指定，可以由<code>padding</code>来把宽度撑开。<br><code>block</code>元素默认自动计算宽度，默认是占满一行，但不是100%,但是不建议写宽度100%，可以由<code>width</code>来指定。<br><code>inline-block</code>元素，默认宽度是有里面的内容来决定，但是也可以由<code>width</code>来指定。</p>\n</li>\n<li><p>高度<br><code>inline</code>元素高度由<code>line-height</code>间接决定的，跟<code>height</code>无关。虽然可以通过padding来把inline元素撑开，但那不是它的高度，而是他的可视高地。<br><code>block</code>元素高度由内部文档流元素觉得，可以通过<code>height</code>来设定<br><code>inline-block</code>跟block类似，可以通过<code>height</code>来设定</p>\n</li>\n</ul>\n<h2 id=\"overflow溢出\"><a href=\"#overflow溢出\" class=\"headerlink\" title=\"overflow溢出\"></a><strong>overflow溢出</strong></h2><ul>\n<li>当内容的宽度和高度大于容器的时候，会溢出容器。可以通过overflow来设置是否显示滚动条。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow:auto // 只有当文字溢出的时候，才会显示，不溢出就不会显示。</span><br><span class=\"line\">overflow:scroll // 不管是否溢出，都显示滚动条。</span><br><span class=\"line\">overflow:hidden // 直接隐藏溢出部分 </span><br><span class=\"line\">overflow:visible //默认设置，会显示溢出部分</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a><strong>盒模型</strong></h2><div align=\"center\" ><img src=\"./img/4.png\"></div>\n* 盒模型有两种，一种是content盒模型/内容盒模型 ； 一种是border盒模型/边框盒模型。\ncontent盒模型-内容就是盒子的边界。\nborder盒模型-边框才是盒子的边界。\n\n<ul>\n<li>公式<br>content-box width/height = 内容的宽度<br>border-box width/height = 内容宽度 + padding + border</li>\n</ul>\n<h2 id=\"margin合并\"><a href=\"#margin合并\" class=\"headerlink\" title=\"margin合并\"></a><strong>margin合并</strong></h2><ul>\n<li>哪些情况会发送<code>margin</code>合并<br>父子<code>margin</code>合并<br>兄弟元素<code>margin</code>合并</li>\n</ul>\n<ul>\n<li>如何组织<code>margin</code>合并<br>父子合并用<code>padding</code>/<code>border</code>挡住<br>父子合并用<code>overflow:hidden</code>挡住<br>父子合并用<code>display:flex</code><br>兄弟合并用<code>inline-block</code>消除</li>\n</ul>\n<h2 id=\"基本单位\"><a href=\"#基本单位\" class=\"headerlink\" title=\"基本单位\"></a><strong>基本单位</strong></h2><ul>\n<li><p>长度单位<br>px  像素<br>em  相对于自身font-size的倍数<br>%<br>整数</p>\n</li>\n<li><p>颜色<br>十六进制#FF6600 或者 #F60<br>RGBA颜色rgb(0,0.0)或者rgba(0,0,0,1) rgba最后的1，表示透明度，1代表不透明，0代表完全透明</p>\n</li>\n</ul>\n<p>资源来源:饥人谷</p>"},{"title":"CSS布局","date":"2020-09-29T18:29:46.000Z","toc":true,"cover":"./img/csslayout.jpg","_content":"## __布局是什么__\n* 把页面分成一块一块的，按左中右，上中下排列\n\n## __布局分类__\n1. 固定宽度布局，一般宽度为960px/1000px/1024px\n2. 不固定宽度布局，主要靠文档流的原理来布局\n3. 响应式布局，意思就是pc上固定宽度，手机上不固定宽度。是一种混合型的布局。\n<!--more-->\n\n## __布局思路__\n<div align=\"center\"><img src=\"./img/1.png\"></div>\n\n## __float布局__\n* float布局会让元素脱离文档流。\n* 在子元素上加上`float:left/right` \n* 因为float让元素脱离了文档流，父元素就“包不住”子元素，为了避免异常发生，所以父元素上需要清除浮动。\n```css\n.clear{\n content:\"\";\n display:block;\n both:clear;\n}\n```\n把`clear`这个类名加到父元素的类上，就可以清除浮动。\n\n## __负margin__\n在做平均布局的时候，最后一个元素的margin-right生效，因为空间不够，会把最后一个元素挤到下一排，现在我们可以用一个容器把元素包起来，然后在设置负margin，就可以让最后一个元素不被挤到下一排。因为正数的margin会让元素移动，但是如果margin的值是负数的话，就会让元素让css读取的空间增加。\n\n## __:nth-child()选择器__\n平均布局除了可以用负margin来解决，也可以用`:nth-child()`选择器，来解决，可以选择到最后一个元素的margin-right为0，来解决被到下一排的问题\n```html\n.parent div:nth-child(5){\n   margin-right:0px;\n}\n<div class='paretn'>\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n</div>\n```\n## __flex布局__\nFlex是`Flexble Box`的缩写，意为'弹性盒子'，用来为盒模型提供最大的灵活性。\n任何一个容器都可以指定为flex布局\n```css\n.box{\n  display:flex;\n}\n```\n行内元素也可以使用flex布局\n```css\n.box{\n  display:inline-flex;\n}\n```\n设置为flex的元素，子元素`float`、`clear`、`vertical-align`属性就会失效。\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n### __容器的属性__\n```css\nflex-direction  //决定项目的排列方向\nflex-wrap  // 怎么样换行,默认情况下，元素都会在一行，不会换行\nflex-flow  // flex-direction和flex-wrap的缩写\njustify-content // 主轴的对齐方式\nalign-items // 定义项目在交叉轴(垂直)上如何对齐\nalign-content // 多行内容，如何排列\n```\n### __flex-direction__\n决定主轴的方向，即项目的排列方向\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n```css\n.box{\n flex-direction:row | row-reverse | column | column-reverse\n}\n```\n\n`row`(默认值)：主轴为水平方向，起点在左端\n`row-reverse`: 主轴为水平方向，起点在右端\n`column`:主轴垂直方向，起点在上沿\n`column-reverse`：主轴为垂直方向，起点在下沿\n\n\n### __flex-wrap__\n默认情况下，项目都会排在一条线上，`flex-wrap`定义，如果一条线上排不下，是否换行。\n\n<div align='center'><img src='./img/3.png'></div>\n\n```css\n.box{\nflex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n`nowrap` 默认属性，默认情况不管多少元素都是排在一行\n`wrap` 换行，空间不够就换行\n`wrap-reverse` 也是换行，不过是反过来的\n\n### __flex-flow__\n`flex-flow`属性是`flex-direction`和`flex-wrap`属性的缩写形式，默认值为`row  nowrap`。\n```css\n.box{\nflex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n### __justify-content__\n`justify-content`定义项目在主轴上的对齐方式。\n```css\n.box{\njustify-content: flex-start | flex-end | center | space-between | space-around|\n}\n```\n<div align='center'><img src='./img/4.png'></div>\n\n`flex-start` 默认值，左对齐\n`flex-end` 右对齐\n`center` 居中\n`space-between` 两端对齐，项目之间的空间都相等\n`space-around` 每个项目两侧间隔都相等。\n`space-evenly` 每个项目之间的距离都是相等的.\n### __align-items__\n`align-items`属性定义项目在垂直方向上如何对齐。\n```css\n.box{\nalign-items: flex-start | flex-end | ceneten | baseline | stretch；\n}\n```\n<div align='center'><img src='./img/5.png'></div>\n\n`flex-start` 垂直的起点对齐\n`flex-end`垂直方向的重点对齐\n`center`垂直方向的中点对齐\n`baseline`项目的第一行文字的基线对齐\n`stretch`默认值，如果项目没有设置高度，将占满容器的高度\n\n### __align-content__\n`align-content`属性定义多跟轴线对齐方式，如果只有一跟轴线改属性不起作用。\n```css\n.box{\nalign-content: flex-start | flex-end | center | space-between | space-around | stretch |\n}\n```\n\n<div align='center'><img src='./img/6.png'></div>\n\n`flex-start`与交叉轴的起点对齐\n`flex-end`与交叉轴的终点对齐\n`center`与交叉的中点对齐\n`space-between`\t与交叉轴两端对齐，轴线之间的间隔平均分布\n`space-around` 每跟轴线两侧间隔都相等\n`stretch`轴线占满整个交叉轴，默认值\n\n### __项目属性__\n### __order__\n定义项目的排列顺序，数值越大，排列越靠前，默认为0\n```css\n.item{\norder:<整数>\n}\n```\n<div align='center'><img src='./img/7.png'></div>\n\n### __flex-grow__\n定义项目的放大比例，默认为0，就是如果存在剩余空间，也不放大。\n```css\n.item{\nflex-grow:<数字>\n}\n```\n<div align='center'><img src='./img/8.png'></div>\n\n如果所有项目的`flex-grow`属性都为1，则他们将等分剩余空间。如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项目多一倍\n\n### __flex-shrink__\n`flex-shrink`定义了项目缩小的比例，默认是1即如果空间不足，项目将怎么缩小。\n```css\n.item{\nflex-shrink:<数字>\n}\n```\n<div align='center'><img src='./img/9.png'></div>\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小，如果一个项目的`flex-shrink`属性为0，其他项目为1，则空间缩小的时候，前者不缩小。\n\n### __flex-basis__\n定义了在分配多余空间之前，项目占据主轴空间，浏览器根据这个属性，计算主轴是否有多余空间，它的默认值为0，即项目的本来大小。\n\n### __flex__\n`flex`属性是`flex-grow`,`flex-shrink`和`flex-basis`的缩写\n\n### __align-self__\n`align-self`属性允许单个项目与其他项目不一样的对齐方式，可以覆盖`align-items`属性\n<div align='center'><img src='./img/10.png'></div>\n\n\n资料参考：\n阮一峰flex布局教程：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n饥人谷\n\n\n","source":"_posts/CSS布局.md","raw":"---\ntitle: CSS布局\ndate: 2020-09-29 18:29:46\ntags: CSS\ntoc: true\ncover: ./img/csslayout.jpg\n---\n## __布局是什么__\n* 把页面分成一块一块的，按左中右，上中下排列\n\n## __布局分类__\n1. 固定宽度布局，一般宽度为960px/1000px/1024px\n2. 不固定宽度布局，主要靠文档流的原理来布局\n3. 响应式布局，意思就是pc上固定宽度，手机上不固定宽度。是一种混合型的布局。\n<!--more-->\n\n## __布局思路__\n<div align=\"center\"><img src=\"./img/1.png\"></div>\n\n## __float布局__\n* float布局会让元素脱离文档流。\n* 在子元素上加上`float:left/right` \n* 因为float让元素脱离了文档流，父元素就“包不住”子元素，为了避免异常发生，所以父元素上需要清除浮动。\n```css\n.clear{\n content:\"\";\n display:block;\n both:clear;\n}\n```\n把`clear`这个类名加到父元素的类上，就可以清除浮动。\n\n## __负margin__\n在做平均布局的时候，最后一个元素的margin-right生效，因为空间不够，会把最后一个元素挤到下一排，现在我们可以用一个容器把元素包起来，然后在设置负margin，就可以让最后一个元素不被挤到下一排。因为正数的margin会让元素移动，但是如果margin的值是负数的话，就会让元素让css读取的空间增加。\n\n## __:nth-child()选择器__\n平均布局除了可以用负margin来解决，也可以用`:nth-child()`选择器，来解决，可以选择到最后一个元素的margin-right为0，来解决被到下一排的问题\n```html\n.parent div:nth-child(5){\n   margin-right:0px;\n}\n<div class='paretn'>\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n</div>\n```\n## __flex布局__\nFlex是`Flexble Box`的缩写，意为'弹性盒子'，用来为盒模型提供最大的灵活性。\n任何一个容器都可以指定为flex布局\n```css\n.box{\n  display:flex;\n}\n```\n行内元素也可以使用flex布局\n```css\n.box{\n  display:inline-flex;\n}\n```\n设置为flex的元素，子元素`float`、`clear`、`vertical-align`属性就会失效。\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n### __容器的属性__\n```css\nflex-direction  //决定项目的排列方向\nflex-wrap  // 怎么样换行,默认情况下，元素都会在一行，不会换行\nflex-flow  // flex-direction和flex-wrap的缩写\njustify-content // 主轴的对齐方式\nalign-items // 定义项目在交叉轴(垂直)上如何对齐\nalign-content // 多行内容，如何排列\n```\n### __flex-direction__\n决定主轴的方向，即项目的排列方向\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n```css\n.box{\n flex-direction:row | row-reverse | column | column-reverse\n}\n```\n\n`row`(默认值)：主轴为水平方向，起点在左端\n`row-reverse`: 主轴为水平方向，起点在右端\n`column`:主轴垂直方向，起点在上沿\n`column-reverse`：主轴为垂直方向，起点在下沿\n\n\n### __flex-wrap__\n默认情况下，项目都会排在一条线上，`flex-wrap`定义，如果一条线上排不下，是否换行。\n\n<div align='center'><img src='./img/3.png'></div>\n\n```css\n.box{\nflex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n`nowrap` 默认属性，默认情况不管多少元素都是排在一行\n`wrap` 换行，空间不够就换行\n`wrap-reverse` 也是换行，不过是反过来的\n\n### __flex-flow__\n`flex-flow`属性是`flex-direction`和`flex-wrap`属性的缩写形式，默认值为`row  nowrap`。\n```css\n.box{\nflex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n### __justify-content__\n`justify-content`定义项目在主轴上的对齐方式。\n```css\n.box{\njustify-content: flex-start | flex-end | center | space-between | space-around|\n}\n```\n<div align='center'><img src='./img/4.png'></div>\n\n`flex-start` 默认值，左对齐\n`flex-end` 右对齐\n`center` 居中\n`space-between` 两端对齐，项目之间的空间都相等\n`space-around` 每个项目两侧间隔都相等。\n`space-evenly` 每个项目之间的距离都是相等的.\n### __align-items__\n`align-items`属性定义项目在垂直方向上如何对齐。\n```css\n.box{\nalign-items: flex-start | flex-end | ceneten | baseline | stretch；\n}\n```\n<div align='center'><img src='./img/5.png'></div>\n\n`flex-start` 垂直的起点对齐\n`flex-end`垂直方向的重点对齐\n`center`垂直方向的中点对齐\n`baseline`项目的第一行文字的基线对齐\n`stretch`默认值，如果项目没有设置高度，将占满容器的高度\n\n### __align-content__\n`align-content`属性定义多跟轴线对齐方式，如果只有一跟轴线改属性不起作用。\n```css\n.box{\nalign-content: flex-start | flex-end | center | space-between | space-around | stretch |\n}\n```\n\n<div align='center'><img src='./img/6.png'></div>\n\n`flex-start`与交叉轴的起点对齐\n`flex-end`与交叉轴的终点对齐\n`center`与交叉的中点对齐\n`space-between`\t与交叉轴两端对齐，轴线之间的间隔平均分布\n`space-around` 每跟轴线两侧间隔都相等\n`stretch`轴线占满整个交叉轴，默认值\n\n### __项目属性__\n### __order__\n定义项目的排列顺序，数值越大，排列越靠前，默认为0\n```css\n.item{\norder:<整数>\n}\n```\n<div align='center'><img src='./img/7.png'></div>\n\n### __flex-grow__\n定义项目的放大比例，默认为0，就是如果存在剩余空间，也不放大。\n```css\n.item{\nflex-grow:<数字>\n}\n```\n<div align='center'><img src='./img/8.png'></div>\n\n如果所有项目的`flex-grow`属性都为1，则他们将等分剩余空间。如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项目多一倍\n\n### __flex-shrink__\n`flex-shrink`定义了项目缩小的比例，默认是1即如果空间不足，项目将怎么缩小。\n```css\n.item{\nflex-shrink:<数字>\n}\n```\n<div align='center'><img src='./img/9.png'></div>\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小，如果一个项目的`flex-shrink`属性为0，其他项目为1，则空间缩小的时候，前者不缩小。\n\n### __flex-basis__\n定义了在分配多余空间之前，项目占据主轴空间，浏览器根据这个属性，计算主轴是否有多余空间，它的默认值为0，即项目的本来大小。\n\n### __flex__\n`flex`属性是`flex-grow`,`flex-shrink`和`flex-basis`的缩写\n\n### __align-self__\n`align-self`属性允许单个项目与其他项目不一样的对齐方式，可以覆盖`align-items`属性\n<div align='center'><img src='./img/10.png'></div>\n\n\n资料参考：\n阮一峰flex布局教程：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n饥人谷\n\n\n","slug":"CSS布局","published":1,"updated":"2020-09-30T18:26:42.070Z","_id":"ckfoav38z00007yfqbht7hr7v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"布局是什么\"><a href=\"#布局是什么\" class=\"headerlink\" title=\"布局是什么\"></a><strong>布局是什么</strong></h2><ul>\n<li>把页面分成一块一块的，按左中右，上中下排列</li>\n</ul>\n<h2 id=\"布局分类\"><a href=\"#布局分类\" class=\"headerlink\" title=\"布局分类\"></a><strong>布局分类</strong></h2><ol>\n<li>固定宽度布局，一般宽度为960px/1000px/1024px</li>\n<li>不固定宽度布局，主要靠文档流的原理来布局</li>\n<li>响应式布局，意思就是pc上固定宽度，手机上不固定宽度。是一种混合型的布局。<a id=\"more\"></a>\n\n</li>\n</ol>\n<h2 id=\"布局思路\"><a href=\"#布局思路\" class=\"headerlink\" title=\"布局思路\"></a><strong>布局思路</strong></h2><div align=\"center\"><img src=\"./img/1.png\"></div>\n\n<h2 id=\"float布局\"><a href=\"#float布局\" class=\"headerlink\" title=\"float布局\"></a><strong>float布局</strong></h2><ul>\n<li>float布局会让元素脱离文档流。</li>\n<li>在子元素上加上<code>float:left/right</code> </li>\n<li>因为float让元素脱离了文档流，父元素就“包不住”子元素，为了避免异常发生，所以父元素上需要清除浮动。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\"> <span class=\"attribute\">both</span>:clear;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n把<code>clear</code>这个类名加到父元素的类上，就可以清除浮动。</li>\n</ul>\n<h2 id=\"负margin\"><a href=\"#负margin\" class=\"headerlink\" title=\"负margin\"></a><strong>负margin</strong></h2><p>在做平均布局的时候，最后一个元素的margin-right生效，因为空间不够，会把最后一个元素挤到下一排，现在我们可以用一个容器把元素包起来，然后在设置负margin，就可以让最后一个元素不被挤到下一排。因为正数的margin会让元素移动，但是如果margin的值是负数的话，就会让元素让css读取的空间增加。</p>\n<h2 id=\"nth-child-选择器\"><a href=\"#nth-child-选择器\" class=\"headerlink\" title=\":nth-child()选择器\"></a><strong>:nth-child()选择器</strong></h2><p>平均布局除了可以用负margin来解决，也可以用<code>:nth-child()</code>选择器，来解决，可以选择到最后一个元素的margin-right为0，来解决被到下一排的问题</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent div:nth-child(5)&#123;</span><br><span class=\"line\">   margin-right:0px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;paretn&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a><strong>flex布局</strong></h2><p>Flex是<code>Flexble Box</code>的缩写，意为’弹性盒子’，用来为盒模型提供最大的灵活性。<br>任何一个容器都可以指定为flex布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>行内元素也可以使用flex布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置为flex的元素，子元素<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性就会失效。</p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a><strong>容器的属性</strong></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction  //决定项目的排列方向</span><br><span class=\"line\">flex-wrap  // 怎么样换行,默认情况下，元素都会在一行，不会换行</span><br><span class=\"line\">flex-flow  // flex-direction和flex-wrap的缩写</span><br><span class=\"line\">justify-content // 主轴的对齐方式</span><br><span class=\"line\">align-items // 定义项目在交叉轴(垂直)上如何对齐</span><br><span class=\"line\">align-content // 多行内容，如何排列</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a><strong>flex-direction</strong></h3><p>决定主轴的方向，即项目的排列方向</p>\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">flex-direction</span>:row | row-reverse | column | column-reverse</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>row</code>(默认值)：主轴为水平方向，起点在左端<br><code>row-reverse</code>: 主轴为水平方向，起点在右端<br><code>column</code>:主轴垂直方向，起点在上沿<br><code>column-reverse</code>：主轴为垂直方向，起点在下沿</p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a><strong>flex-wrap</strong></h3><p>默认情况下，项目都会排在一条线上，<code>flex-wrap</code>定义，如果一条线上排不下，是否换行。</p>\n<div align='center'><img src='./img/3.png'></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>nowrap</code> 默认属性，默认情况不管多少元素都是排在一行<br><code>wrap</code> 换行，空间不够就换行<br><code>wrap-reverse</code> 也是换行，不过是反过来的</p>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a><strong>flex-flow</strong></h3><p><code>flex-flow</code>属性是<code>flex-direction</code>和<code>flex-wrap</code>属性的缩写形式，默认值为<code>row  nowrap</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a><strong>justify-content</strong></h3><p><code>justify-content</code>定义项目在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around|</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/4.png'></div>\n\n<p><code>flex-start</code> 默认值，左对齐<br><code>flex-end</code> 右对齐<br><code>center</code> 居中<br><code>space-between</code> 两端对齐，项目之间的空间都相等<br><code>space-around</code> 每个项目两侧间隔都相等。<br><code>space-evenly</code> 每个项目之间的距离都是相等的.</p>\n<h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a><strong>align-items</strong></h3><p><code>align-items</code>属性定义项目在垂直方向上如何对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>: flex-start | flex-end | ceneten | baseline | stretch；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/5.png'></div>\n\n<p><code>flex-start</code> 垂直的起点对齐<br><code>flex-end</code>垂直方向的重点对齐<br><code>center</code>垂直方向的中点对齐<br><code>baseline</code>项目的第一行文字的基线对齐<br><code>stretch</code>默认值，如果项目没有设置高度，将占满容器的高度</p>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a><strong>align-content</strong></h3><p><code>align-content</code>属性定义多跟轴线对齐方式，如果只有一跟轴线改属性不起作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch |</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div align='center'><img src='./img/6.png'></div>\n\n<p><code>flex-start</code>与交叉轴的起点对齐<br><code>flex-end</code>与交叉轴的终点对齐<br><code>center</code>与交叉的中点对齐<br><code>space-between</code>    与交叉轴两端对齐，轴线之间的间隔平均分布<br><code>space-around</code> 每跟轴线两侧间隔都相等<br><code>stretch</code>轴线占满整个交叉轴，默认值</p>\n<h3 id=\"项目属性\"><a href=\"#项目属性\" class=\"headerlink\" title=\"项目属性\"></a><strong>项目属性</strong></h3><h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a><strong>order</strong></h3><p>定义项目的排列顺序，数值越大，排列越靠前，默认为0</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">order</span>:&lt;整数&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/7.png'></div>\n\n<h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a><strong>flex-grow</strong></h3><p>定义项目的放大比例，默认为0，就是如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-grow</span>:&lt;数字&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/8.png'></div>\n\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则他们将等分剩余空间。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项目多一倍</p>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a><strong>flex-shrink</strong></h3><p><code>flex-shrink</code>定义了项目缩小的比例，默认是1即如果空间不足，项目将怎么缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-shrink</span>:&lt;数字&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/9.png'></div>\n\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小，如果一个项目的<code>flex-shrink</code>属性为0，其他项目为1，则空间缩小的时候，前者不缩小。</p>\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a><strong>flex-basis</strong></h3><p>定义了在分配多余空间之前，项目占据主轴空间，浏览器根据这个属性，计算主轴是否有多余空间，它的默认值为0，即项目的本来大小。</p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a><strong>flex</strong></h3><p><code>flex</code>属性是<code>flex-grow</code>,<code>flex-shrink</code>和<code>flex-basis</code>的缩写</p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a><strong>align-self</strong></h3><p><code>align-self</code>属性允许单个项目与其他项目不一样的对齐方式，可以覆盖<code>align-items</code>属性</p>\n<div align='center'><img src='./img/10.png'></div>\n\n\n<p>资料参考：<br>阮一峰flex布局教程：<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><br>饥人谷</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"布局是什么\"><a href=\"#布局是什么\" class=\"headerlink\" title=\"布局是什么\"></a><strong>布局是什么</strong></h2><ul>\n<li>把页面分成一块一块的，按左中右，上中下排列</li>\n</ul>\n<h2 id=\"布局分类\"><a href=\"#布局分类\" class=\"headerlink\" title=\"布局分类\"></a><strong>布局分类</strong></h2><ol>\n<li>固定宽度布局，一般宽度为960px/1000px/1024px</li>\n<li>不固定宽度布局，主要靠文档流的原理来布局</li>\n<li>响应式布局，意思就是pc上固定宽度，手机上不固定宽度。是一种混合型的布局。","more":"</li>\n</ol>\n<h2 id=\"布局思路\"><a href=\"#布局思路\" class=\"headerlink\" title=\"布局思路\"></a><strong>布局思路</strong></h2><div align=\"center\"><img src=\"./img/1.png\"></div>\n\n<h2 id=\"float布局\"><a href=\"#float布局\" class=\"headerlink\" title=\"float布局\"></a><strong>float布局</strong></h2><ul>\n<li>float布局会让元素脱离文档流。</li>\n<li>在子元素上加上<code>float:left/right</code> </li>\n<li>因为float让元素脱离了文档流，父元素就“包不住”子元素，为了避免异常发生，所以父元素上需要清除浮动。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\"> <span class=\"attribute\">both</span>:clear;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n把<code>clear</code>这个类名加到父元素的类上，就可以清除浮动。</li>\n</ul>\n<h2 id=\"负margin\"><a href=\"#负margin\" class=\"headerlink\" title=\"负margin\"></a><strong>负margin</strong></h2><p>在做平均布局的时候，最后一个元素的margin-right生效，因为空间不够，会把最后一个元素挤到下一排，现在我们可以用一个容器把元素包起来，然后在设置负margin，就可以让最后一个元素不被挤到下一排。因为正数的margin会让元素移动，但是如果margin的值是负数的话，就会让元素让css读取的空间增加。</p>\n<h2 id=\"nth-child-选择器\"><a href=\"#nth-child-选择器\" class=\"headerlink\" title=\":nth-child()选择器\"></a><strong>:nth-child()选择器</strong></h2><p>平均布局除了可以用负margin来解决，也可以用<code>:nth-child()</code>选择器，来解决，可以选择到最后一个元素的margin-right为0，来解决被到下一排的问题</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent div:nth-child(5)&#123;</span><br><span class=\"line\">   margin-right:0px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;paretn&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a><strong>flex布局</strong></h2><p>Flex是<code>Flexble Box</code>的缩写，意为’弹性盒子’，用来为盒模型提供最大的灵活性。<br>任何一个容器都可以指定为flex布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>行内元素也可以使用flex布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置为flex的元素，子元素<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性就会失效。</p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a><strong>容器的属性</strong></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction  //决定项目的排列方向</span><br><span class=\"line\">flex-wrap  // 怎么样换行,默认情况下，元素都会在一行，不会换行</span><br><span class=\"line\">flex-flow  // flex-direction和flex-wrap的缩写</span><br><span class=\"line\">justify-content // 主轴的对齐方式</span><br><span class=\"line\">align-items // 定义项目在交叉轴(垂直)上如何对齐</span><br><span class=\"line\">align-content // 多行内容，如何排列</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a><strong>flex-direction</strong></h3><p>决定主轴的方向，即项目的排列方向</p>\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">flex-direction</span>:row | row-reverse | column | column-reverse</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>row</code>(默认值)：主轴为水平方向，起点在左端<br><code>row-reverse</code>: 主轴为水平方向，起点在右端<br><code>column</code>:主轴垂直方向，起点在上沿<br><code>column-reverse</code>：主轴为垂直方向，起点在下沿</p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a><strong>flex-wrap</strong></h3><p>默认情况下，项目都会排在一条线上，<code>flex-wrap</code>定义，如果一条线上排不下，是否换行。</p>\n<div align='center'><img src='./img/3.png'></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>nowrap</code> 默认属性，默认情况不管多少元素都是排在一行<br><code>wrap</code> 换行，空间不够就换行<br><code>wrap-reverse</code> 也是换行，不过是反过来的</p>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a><strong>flex-flow</strong></h3><p><code>flex-flow</code>属性是<code>flex-direction</code>和<code>flex-wrap</code>属性的缩写形式，默认值为<code>row  nowrap</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a><strong>justify-content</strong></h3><p><code>justify-content</code>定义项目在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around|</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/4.png'></div>\n\n<p><code>flex-start</code> 默认值，左对齐<br><code>flex-end</code> 右对齐<br><code>center</code> 居中<br><code>space-between</code> 两端对齐，项目之间的空间都相等<br><code>space-around</code> 每个项目两侧间隔都相等。<br><code>space-evenly</code> 每个项目之间的距离都是相等的.</p>\n<h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a><strong>align-items</strong></h3><p><code>align-items</code>属性定义项目在垂直方向上如何对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>: flex-start | flex-end | ceneten | baseline | stretch；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/5.png'></div>\n\n<p><code>flex-start</code> 垂直的起点对齐<br><code>flex-end</code>垂直方向的重点对齐<br><code>center</code>垂直方向的中点对齐<br><code>baseline</code>项目的第一行文字的基线对齐<br><code>stretch</code>默认值，如果项目没有设置高度，将占满容器的高度</p>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a><strong>align-content</strong></h3><p><code>align-content</code>属性定义多跟轴线对齐方式，如果只有一跟轴线改属性不起作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch |</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div align='center'><img src='./img/6.png'></div>\n\n<p><code>flex-start</code>与交叉轴的起点对齐<br><code>flex-end</code>与交叉轴的终点对齐<br><code>center</code>与交叉的中点对齐<br><code>space-between</code>    与交叉轴两端对齐，轴线之间的间隔平均分布<br><code>space-around</code> 每跟轴线两侧间隔都相等<br><code>stretch</code>轴线占满整个交叉轴，默认值</p>\n<h3 id=\"项目属性\"><a href=\"#项目属性\" class=\"headerlink\" title=\"项目属性\"></a><strong>项目属性</strong></h3><h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a><strong>order</strong></h3><p>定义项目的排列顺序，数值越大，排列越靠前，默认为0</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">order</span>:&lt;整数&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/7.png'></div>\n\n<h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a><strong>flex-grow</strong></h3><p>定义项目的放大比例，默认为0，就是如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-grow</span>:&lt;数字&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/8.png'></div>\n\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则他们将等分剩余空间。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项目多一倍</p>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a><strong>flex-shrink</strong></h3><p><code>flex-shrink</code>定义了项目缩小的比例，默认是1即如果空间不足，项目将怎么缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">flex-shrink</span>:&lt;数字&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align='center'><img src='./img/9.png'></div>\n\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小，如果一个项目的<code>flex-shrink</code>属性为0，其他项目为1，则空间缩小的时候，前者不缩小。</p>\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a><strong>flex-basis</strong></h3><p>定义了在分配多余空间之前，项目占据主轴空间，浏览器根据这个属性，计算主轴是否有多余空间，它的默认值为0，即项目的本来大小。</p>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a><strong>flex</strong></h3><p><code>flex</code>属性是<code>flex-grow</code>,<code>flex-shrink</code>和<code>flex-basis</code>的缩写</p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a><strong>align-self</strong></h3><p><code>align-self</code>属性允许单个项目与其他项目不一样的对齐方式，可以覆盖<code>align-items</code>属性</p>\n<div align='center'><img src='./img/10.png'></div>\n\n\n<p>资料参考：<br>阮一峰flex布局教程：<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><br>饥人谷</p>"},{"title":"CSS定位","date":"2020-10-02T03:11:02.000Z","toc":true,"cover":"./img/cssposition.jpg","_content":"\n## __position的五个取值__\n`position`属性用来指定一个元素在网页上的位置。有以下五个属性值。\n* `static`\n* `relative`\n* `absolute`\n* `fixed`\n* `sticky`\n<!--more-->\n\n<font class=\"ff6666\">测速</font>\n\n### __static属性值__\n`static`静态的意思，是`position`的默认取值，如果省略`position`属性，浏览器就认为该元素是`static`定位。\n\n### __relative,absolute,fixed属性值__\n`relative` 、`absolute`、` fixed`这三个属性值有一个共同点，都是相对于某个<font color=#FF3333><b>基点</b></font>定位。不同之处仅仅在于<font color=#FF3333><b>基点</b></font>的不同。\n\n*  `relative`相对的意思，表示相对于默认的位置,即<font color=#FF6666><b>定位基点</b></font>就是元素默认的位置。不会脱离文档流。只是浮起来，原先的位置所占的空间还在文档流中。用于做位移和给`absolute`元素做父元素。\n\n\n* `absolute`绝对的意思，表示相对于离它最近的定位元素定位（必须是非static属性),即<font color=#FF6666><b>定位基点</b></font>是离它做最近的非定位元素。会脱离文档流，另起一层。`absolute`定位<font color=#FF3333><b>必须</b></font>就搭配`top`、`bottom`、`left`、`right`这四个属性里面的两个使用，不然有些浏览器会出现异常，用于做对话框的关闭按钮和鼠标提示。\n\n* `fixed`固定的意思,表达相对于视口(viewport，浏览器窗口)进行偏移，<font color=#FF6666><b>定位基点</b></font>是浏览器窗口，这会导致元素的位置不会随着页面滚动而变化，好像是固定在网页上某个位置一样。他如果搭配`top`、`bottom`、`left`、`right`这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。\n\n### __sticky属性值__\n* `sticky`粘滞的意思。可以理解成`relative`和`fixed`的结合。正常时候是relative的属性，待在自己该在的位置。当页面滚动到设置了`sticky`的元素的时候，他就会根据设置top、bottom、left、right来进行定位，属性有点像`flex`。\n\n```css\nwhite-wrap:nowrap //让文章不换行\n```\n### __opacity与rgba的区别__\n`opactiy`会创建层叠上下文，而且会让整个元素包括子元素都变成透明。\n`rgba`不会创建层叠上下文，只会作用在该元素上，不会影响其他元素。\n\n\n\n\n资料参考：\n阮一峰CSS详解：http://www.ruanyifeng.com/blog/2019/11/css-position.html\n饥人谷\n\n\n(完)\n","source":"_posts/CSS定位.md","raw":"---\ntitle: CSS定位\ndate: 2020-10-02 03:11:02\ntags: CSS\ntoc: true\ncover: ./img/cssposition.jpg\n---\n\n## __position的五个取值__\n`position`属性用来指定一个元素在网页上的位置。有以下五个属性值。\n* `static`\n* `relative`\n* `absolute`\n* `fixed`\n* `sticky`\n<!--more-->\n\n<font class=\"ff6666\">测速</font>\n\n### __static属性值__\n`static`静态的意思，是`position`的默认取值，如果省略`position`属性，浏览器就认为该元素是`static`定位。\n\n### __relative,absolute,fixed属性值__\n`relative` 、`absolute`、` fixed`这三个属性值有一个共同点，都是相对于某个<font color=#FF3333><b>基点</b></font>定位。不同之处仅仅在于<font color=#FF3333><b>基点</b></font>的不同。\n\n*  `relative`相对的意思，表示相对于默认的位置,即<font color=#FF6666><b>定位基点</b></font>就是元素默认的位置。不会脱离文档流。只是浮起来，原先的位置所占的空间还在文档流中。用于做位移和给`absolute`元素做父元素。\n\n\n* `absolute`绝对的意思，表示相对于离它最近的定位元素定位（必须是非static属性),即<font color=#FF6666><b>定位基点</b></font>是离它做最近的非定位元素。会脱离文档流，另起一层。`absolute`定位<font color=#FF3333><b>必须</b></font>就搭配`top`、`bottom`、`left`、`right`这四个属性里面的两个使用，不然有些浏览器会出现异常，用于做对话框的关闭按钮和鼠标提示。\n\n* `fixed`固定的意思,表达相对于视口(viewport，浏览器窗口)进行偏移，<font color=#FF6666><b>定位基点</b></font>是浏览器窗口，这会导致元素的位置不会随着页面滚动而变化，好像是固定在网页上某个位置一样。他如果搭配`top`、`bottom`、`left`、`right`这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。\n\n### __sticky属性值__\n* `sticky`粘滞的意思。可以理解成`relative`和`fixed`的结合。正常时候是relative的属性，待在自己该在的位置。当页面滚动到设置了`sticky`的元素的时候，他就会根据设置top、bottom、left、right来进行定位，属性有点像`flex`。\n\n```css\nwhite-wrap:nowrap //让文章不换行\n```\n### __opacity与rgba的区别__\n`opactiy`会创建层叠上下文，而且会让整个元素包括子元素都变成透明。\n`rgba`不会创建层叠上下文，只会作用在该元素上，不会影响其他元素。\n\n\n\n\n资料参考：\n阮一峰CSS详解：http://www.ruanyifeng.com/blog/2019/11/css-position.html\n饥人谷\n\n\n(完)\n","slug":"CSS定位","published":1,"updated":"2020-10-02T08:29:52.599Z","_id":"ckfrodsoe0000aufqc2pt3043","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"position的五个取值\"><a href=\"#position的五个取值\" class=\"headerlink\" title=\"position的五个取值\"></a><strong>position的五个取值</strong></h2><p><code>position</code>属性用来指定一个元素在网页上的位置。有以下五个属性值。</p>\n<ul>\n<li><code>static</code></li>\n<li><code>relative</code></li>\n<li><code>absolute</code></li>\n<li><code>fixed</code></li>\n<li><code>sticky</code><a id=\"more\"></a>\n\n</li>\n</ul>\n<p><font class=\"ff6666\">测速</font></p>\n<h3 id=\"static属性值\"><a href=\"#static属性值\" class=\"headerlink\" title=\"static属性值\"></a><strong>static属性值</strong></h3><p><code>static</code>静态的意思，是<code>position</code>的默认取值，如果省略<code>position</code>属性，浏览器就认为该元素是<code>static</code>定位。</p>\n<h3 id=\"relative-absolute-fixed属性值\"><a href=\"#relative-absolute-fixed属性值\" class=\"headerlink\" title=\"relative,absolute,fixed属性值\"></a><strong>relative,absolute,fixed属性值</strong></h3><p><code>relative</code> 、<code>absolute</code>、<code> fixed</code>这三个属性值有一个共同点，都是相对于某个<font color=#FF3333><b>基点</b></font>定位。不同之处仅仅在于<font color=#FF3333><b>基点</b></font>的不同。</p>\n<ul>\n<li><code>relative</code>相对的意思，表示相对于默认的位置,即<font color=#FF6666><b>定位基点</b></font>就是元素默认的位置。不会脱离文档流。只是浮起来，原先的位置所占的空间还在文档流中。用于做位移和给<code>absolute</code>元素做父元素。</li>\n</ul>\n<ul>\n<li><p><code>absolute</code>绝对的意思，表示相对于离它最近的定位元素定位（必须是非static属性),即<font color=#FF6666><b>定位基点</b></font>是离它做最近的非定位元素。会脱离文档流，另起一层。<code>absolute</code>定位<font color=#FF3333><b>必须</b></font>就搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性里面的两个使用，不然有些浏览器会出现异常，用于做对话框的关闭按钮和鼠标提示。</p>\n</li>\n<li><p><code>fixed</code>固定的意思,表达相对于视口(viewport，浏览器窗口)进行偏移，<font color=#FF6666><b>定位基点</b></font>是浏览器窗口，这会导致元素的位置不会随着页面滚动而变化，好像是固定在网页上某个位置一样。他如果搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。</p>\n</li>\n</ul>\n<h3 id=\"sticky属性值\"><a href=\"#sticky属性值\" class=\"headerlink\" title=\"sticky属性值\"></a><strong>sticky属性值</strong></h3><ul>\n<li><code>sticky</code>粘滞的意思。可以理解成<code>relative</code>和<code>fixed</code>的结合。正常时候是relative的属性，待在自己该在的位置。当页面滚动到设置了<code>sticky</code>的元素的时候，他就会根据设置top、bottom、left、right来进行定位，属性有点像<code>flex</code>。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">white-wrap:nowrap //让文章不换行</span><br></pre></td></tr></table></figure>\n<h3 id=\"opacity与rgba的区别\"><a href=\"#opacity与rgba的区别\" class=\"headerlink\" title=\"opacity与rgba的区别\"></a><strong>opacity与rgba的区别</strong></h3><p><code>opactiy</code>会创建层叠上下文，而且会让整个元素包括子元素都变成透明。<br><code>rgba</code>不会创建层叠上下文，只会作用在该元素上，不会影响其他元素。</p>\n<p>资料参考：<br>阮一峰CSS详解：<a href=\"http://www.ruanyifeng.com/blog/2019/11/css-position.html\">http://www.ruanyifeng.com/blog/2019/11/css-position.html</a><br>饥人谷</p>\n<p>(完)</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"position的五个取值\"><a href=\"#position的五个取值\" class=\"headerlink\" title=\"position的五个取值\"></a><strong>position的五个取值</strong></h2><p><code>position</code>属性用来指定一个元素在网页上的位置。有以下五个属性值。</p>\n<ul>\n<li><code>static</code></li>\n<li><code>relative</code></li>\n<li><code>absolute</code></li>\n<li><code>fixed</code></li>\n<li><code>sticky</code>","more":"</li>\n</ul>\n<p><font class=\"ff6666\">测速</font></p>\n<h3 id=\"static属性值\"><a href=\"#static属性值\" class=\"headerlink\" title=\"static属性值\"></a><strong>static属性值</strong></h3><p><code>static</code>静态的意思，是<code>position</code>的默认取值，如果省略<code>position</code>属性，浏览器就认为该元素是<code>static</code>定位。</p>\n<h3 id=\"relative-absolute-fixed属性值\"><a href=\"#relative-absolute-fixed属性值\" class=\"headerlink\" title=\"relative,absolute,fixed属性值\"></a><strong>relative,absolute,fixed属性值</strong></h3><p><code>relative</code> 、<code>absolute</code>、<code> fixed</code>这三个属性值有一个共同点，都是相对于某个<font color=#FF3333><b>基点</b></font>定位。不同之处仅仅在于<font color=#FF3333><b>基点</b></font>的不同。</p>\n<ul>\n<li><code>relative</code>相对的意思，表示相对于默认的位置,即<font color=#FF6666><b>定位基点</b></font>就是元素默认的位置。不会脱离文档流。只是浮起来，原先的位置所占的空间还在文档流中。用于做位移和给<code>absolute</code>元素做父元素。</li>\n</ul>\n<ul>\n<li><p><code>absolute</code>绝对的意思，表示相对于离它最近的定位元素定位（必须是非static属性),即<font color=#FF6666><b>定位基点</b></font>是离它做最近的非定位元素。会脱离文档流，另起一层。<code>absolute</code>定位<font color=#FF3333><b>必须</b></font>就搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性里面的两个使用，不然有些浏览器会出现异常，用于做对话框的关闭按钮和鼠标提示。</p>\n</li>\n<li><p><code>fixed</code>固定的意思,表达相对于视口(viewport，浏览器窗口)进行偏移，<font color=#FF6666><b>定位基点</b></font>是浏览器窗口，这会导致元素的位置不会随着页面滚动而变化，好像是固定在网页上某个位置一样。他如果搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。</p>\n</li>\n</ul>\n<h3 id=\"sticky属性值\"><a href=\"#sticky属性值\" class=\"headerlink\" title=\"sticky属性值\"></a><strong>sticky属性值</strong></h3><ul>\n<li><code>sticky</code>粘滞的意思。可以理解成<code>relative</code>和<code>fixed</code>的结合。正常时候是relative的属性，待在自己该在的位置。当页面滚动到设置了<code>sticky</code>的元素的时候，他就会根据设置top、bottom、left、right来进行定位，属性有点像<code>flex</code>。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">white-wrap:nowrap //让文章不换行</span><br></pre></td></tr></table></figure>\n<h3 id=\"opacity与rgba的区别\"><a href=\"#opacity与rgba的区别\" class=\"headerlink\" title=\"opacity与rgba的区别\"></a><strong>opacity与rgba的区别</strong></h3><p><code>opactiy</code>会创建层叠上下文，而且会让整个元素包括子元素都变成透明。<br><code>rgba</code>不会创建层叠上下文，只会作用在该元素上，不会影响其他元素。</p>\n<p>资料参考：<br>阮一峰CSS详解：<a href=\"http://www.ruanyifeng.com/blog/2019/11/css-position.html\">http://www.ruanyifeng.com/blog/2019/11/css-position.html</a><br>饥人谷</p>\n<p>(完)</p>"},{"title":"z-index与层叠上下文","date":"2020-10-02T06:51:37.000Z","toc":true,"cover":"./img/zindex.jpg","_content":"## __层叠上下文__\n* 层叠上下文，英文_stacking context_，是HTML中的一个三维概念，如果一个元素含有层叠上下文，我们就可以理解为这个元素在<font color=#ff6666><b>Z轴</b></font>上就\"高人一等\"。\n<!--more-->\n* 显示器的宽可以理解成<font color=#ff6666><b>X轴</b></font>，高理解成<font color=#ff6666><b>Y轴</b></font>，<font color=#ff6666><b>Z轴</b></font>就是我们眼睛看向显示器的那条线，如下图所示。 \n <div align=\"center\"><img src=\"./img/z.jpg\" width=500></div>\n\n## __层叠顺序__\n* 表示元素发生层叠时候有着特定的垂直顺序\n<div align==\"center\"><img src=\"./img/order.jpg\"></div>\n\n* 当发生层叠的时候，覆盖关系遵循下面2个准则\n\t1. __谁大谁上__ : 当具有明显的层叠水平标识的时候，在 __同一个层叠__ 上下文领域，层叠水平值大的那个覆盖小的那一个。\n\t2. __后来居上__ : 当元素的层叠水平一直，层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。\n\n* 比喻\n\t1. 每个层叠上下文就是一个新的小世界(作用域)\n\t2. 这个小世界里面的z-index跟外界无关。\n\t3. 处在同一小世界的z-index才能做比较。\n\n## __层叠上下文的创建__\n很多属性都会创建层叠上下文,具体可以在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context)\n记住关键几个：`z-index`、`flex`、`opacity`,`transform`\n\n参考资料：\n饥人谷\n张鑫旭深入里面层叠上下文：https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index\n","source":"_posts/z-index与层叠上下文.md","raw":"---\ntitle: z-index与层叠上下文\ndate: 2020-10-02 06:51:37\ntags: CSS\ntoc: true\ncover: ./img/zindex.jpg\n---\n## __层叠上下文__\n* 层叠上下文，英文_stacking context_，是HTML中的一个三维概念，如果一个元素含有层叠上下文，我们就可以理解为这个元素在<font color=#ff6666><b>Z轴</b></font>上就\"高人一等\"。\n<!--more-->\n* 显示器的宽可以理解成<font color=#ff6666><b>X轴</b></font>，高理解成<font color=#ff6666><b>Y轴</b></font>，<font color=#ff6666><b>Z轴</b></font>就是我们眼睛看向显示器的那条线，如下图所示。 \n <div align=\"center\"><img src=\"./img/z.jpg\" width=500></div>\n\n## __层叠顺序__\n* 表示元素发生层叠时候有着特定的垂直顺序\n<div align==\"center\"><img src=\"./img/order.jpg\"></div>\n\n* 当发生层叠的时候，覆盖关系遵循下面2个准则\n\t1. __谁大谁上__ : 当具有明显的层叠水平标识的时候，在 __同一个层叠__ 上下文领域，层叠水平值大的那个覆盖小的那一个。\n\t2. __后来居上__ : 当元素的层叠水平一直，层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。\n\n* 比喻\n\t1. 每个层叠上下文就是一个新的小世界(作用域)\n\t2. 这个小世界里面的z-index跟外界无关。\n\t3. 处在同一小世界的z-index才能做比较。\n\n## __层叠上下文的创建__\n很多属性都会创建层叠上下文,具体可以在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context)\n记住关键几个：`z-index`、`flex`、`opacity`,`transform`\n\n参考资料：\n饥人谷\n张鑫旭深入里面层叠上下文：https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index\n","slug":"z-index与层叠上下文","published":1,"updated":"2020-10-02T08:23:51.294Z","_id":"ckfrw4q2r00001ofq4gtp5uqz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a><strong>层叠上下文</strong></h2><ul>\n<li>层叠上下文，英文_stacking context_，是HTML中的一个三维概念，如果一个元素含有层叠上下文，我们就可以理解为这个元素在<font color=#ff6666><b>Z轴</b></font>上就”高人一等”。<a id=\"more\"></a></li>\n<li>显示器的宽可以理解成<font color=#ff6666><b>X轴</b></font>，高理解成<font color=#ff6666><b>Y轴</b></font>，<font color=#ff6666><b>Z轴</b></font>就是我们眼睛看向显示器的那条线，如下图所示。 <div align=\"center\"><img src=\"./img/z.jpg\" width=500></div>\n\n</li>\n</ul>\n<h2 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a><strong>层叠顺序</strong></h2><ul>\n<li><p>表示元素发生层叠时候有着特定的垂直顺序</p>\n<div align==\"center\"><img src=\"./img/order.jpg\"></div>\n</li>\n<li><p>当发生层叠的时候，覆盖关系遵循下面2个准则</p>\n<ol>\n<li><strong>谁大谁上</strong> : 当具有明显的层叠水平标识的时候，在 <strong>同一个层叠</strong> 上下文领域，层叠水平值大的那个覆盖小的那一个。</li>\n<li><strong>后来居上</strong> : 当元素的层叠水平一直，层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li>\n</ol>\n</li>\n<li><p>比喻</p>\n<ol>\n<li>每个层叠上下文就是一个新的小世界(作用域)</li>\n<li>这个小世界里面的z-index跟外界无关。</li>\n<li>处在同一小世界的z-index才能做比较。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"层叠上下文的创建\"><a href=\"#层叠上下文的创建\" class=\"headerlink\" title=\"层叠上下文的创建\"></a><strong>层叠上下文的创建</strong></h2><p>很多属性都会创建层叠上下文,具体可以在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context\">MDN</a><br>记住关键几个：<code>z-index</code>、<code>flex</code>、<code>opacity</code>,<code>transform</code></p>\n<p>参考资料：<br>饥人谷<br>张鑫旭深入里面层叠上下文：<a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index\">https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a><strong>层叠上下文</strong></h2><ul>\n<li>层叠上下文，英文_stacking context_，是HTML中的一个三维概念，如果一个元素含有层叠上下文，我们就可以理解为这个元素在<font color=#ff6666><b>Z轴</b></font>上就”高人一等”。","more":"</li>\n<li>显示器的宽可以理解成<font color=#ff6666><b>X轴</b></font>，高理解成<font color=#ff6666><b>Y轴</b></font>，<font color=#ff6666><b>Z轴</b></font>就是我们眼睛看向显示器的那条线，如下图所示。 <div align=\"center\"><img src=\"./img/z.jpg\" width=500></div>\n\n</li>\n</ul>\n<h2 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a><strong>层叠顺序</strong></h2><ul>\n<li><p>表示元素发生层叠时候有着特定的垂直顺序</p>\n<div align==\"center\"><img src=\"./img/order.jpg\"></div>\n</li>\n<li><p>当发生层叠的时候，覆盖关系遵循下面2个准则</p>\n<ol>\n<li><strong>谁大谁上</strong> : 当具有明显的层叠水平标识的时候，在 <strong>同一个层叠</strong> 上下文领域，层叠水平值大的那个覆盖小的那一个。</li>\n<li><strong>后来居上</strong> : 当元素的层叠水平一直，层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li>\n</ol>\n</li>\n<li><p>比喻</p>\n<ol>\n<li>每个层叠上下文就是一个新的小世界(作用域)</li>\n<li>这个小世界里面的z-index跟外界无关。</li>\n<li>处在同一小世界的z-index才能做比较。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"层叠上下文的创建\"><a href=\"#层叠上下文的创建\" class=\"headerlink\" title=\"层叠上下文的创建\"></a><strong>层叠上下文的创建</strong></h2><p>很多属性都会创建层叠上下文,具体可以在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context\">MDN</a><br>记住关键几个：<code>z-index</code>、<code>flex</code>、<code>opacity</code>,<code>transform</code></p>\n<p>参考资料：<br>饥人谷<br>张鑫旭深入里面层叠上下文：<a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index\">https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index</a></p>"},{"title":"CSS动画","date":"2020-10-03T11:59:44.000Z","toc":true,"cover":"./img/cssdonghua.jpg","_content":"### __动画的概念__\n* __定义__\n由许多的静止画面（帧），以一定的速度（每秒30张），连续播放，内眼因视觉残象产生的错觉，以为是活动的画面。大部分影视24帧/s就可以正常播放，游戏需要30帧/s。\n\n<!--more-->\n\n### __浏览器的渲染原理__\n* __步骤__\n\t1. 根据HTML构建HTML树（DOM）\n\t2. 根据CSS构建CSS树（CSSOM）\n\t3. 将两棵树合并成一颗渲染树（render tree）\n\t4. Layout布局（文档流、盒模型、计算大小、位置）\n\t5. Paint绘制（把边框颜色、文字颜色、阴影等画出来）\n\t6. Compose合成(根据层叠关系展示画面)\n\n\n* __DOM、CSSOM、render tree__\n<div align=\"center\"><img src=\"./img/threetree.jpg\"></div>\n\n\n* __三种更改样式的方法__\n<div align=\"center\"><img src=\"./img/changestyle.jpg\"></div>\n\t\n\t1. 全走\n\t`div.remove()`会删除DOM里面的元素，其他元素relayout。要走全部过程，重新布局，重新绘制，重新合成。\n\n\t2. 跳过Layout\n\t  改变背景颜色，因为只是改变背景颜色，布局没有发生变化，所以就跳过了布局\n\n\t3. 跳过layout和paint\n\t  改变transform，只需要composite\n\n* __查看更改哪些属性,CSS怎么绘制__ [csstriggers](https://csstriggers.com/)\n\n* __chrome里查看绘制过程__\n<div align=\"center\"><img src=./img/viewrender.jpg></div>\n\n### __transform__\ntransform的[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform)\n__经验:__\n1. 一般需要配合`transition`过度\n2. inline元素不支持transform，需要先变成block\n\n`transform`属性允许你旋转、缩放、倾斜、平移给定元素，具体有以下四个属性：\n1. __translate__\n`translate`是控制元素平移的\n```css\ntransform:translateX(200px) \n// X轴水平移动200px \ntransform:translateY(200px) \n// Y轴垂直移动200px\ntransform:translateZ(1000px)\n// Z轴是我们视线的那根轴，要看出变化，要给父元素加上perspective:1000px //我们眼睛离视点1000px\n```\n\n* 利用translate做绝对居中\n```css\n.box{\npositon:absolute;\ntop:50%;\nleft:50%;\ntransform:translate(-50%,-50%);\n}\n```\n\n2. __scale__\n`scale`是控制元素缩放的\n```css\ntransform:scaleX(1)\n//让元素在X方向上放大1倍\ntransform:scaleY(1)\n//让元素在Y方向上放大1倍\ntransform:scale(1,1)\n//以上两个的缩写形式\n```\n\n3. __rotate__\n`rotate`是控制元素旋转的\n```css\ntransform:rotateX(45deg)\n//围绕元素的X轴，旋转45度\ntransform:rotateY(45deg)\n//围绕元素Y轴，旋<F5>转45度\ntransform:rotateZ(45deg)\n//围绕元素Z轴，旋转45度\n```\n__用途__:一般用于360度旋转制作loading\n\n4. __skew__\n`skew`控制元素的倾斜的\n```css\ntransform:skewX(45deg)\n//x轴歪斜45度\ntransform:skewY(45deg)\n//y轴歪斜45度\ntransform(45deg,45deg)\n//以上两者的缩写\n```\n* __transform的组合写法__\n```css\ntransform:scale(0.5)translate(-100%,-100%)\n```\n\n### __transiton__\n可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。\n* __语法:__\n\t* transiton:`属性名` | `时长` | `过渡方式` | `延迟` |\n\t```css\n\ttransiton:left 200ms linear 3s\n\t//left的变化，过渡时间200ms 过渡方式为linear 延迟3秒过渡\n\t```\n\t* 可以用逗号分隔两个不同属性\n\t```css\n\ttransition:left 200ms,top 400ms\n\t```\n\t* 也可以用all代表所有的属性\n\t```\n\ttransition:all 200ms\n\t```\n\t* 过渡方式：linear匀速 | ease-in淡入 | ease-out淡出 | ease-in-out淡入淡出|\n\n* __注意__\n<font color=\"ff6666\"><b>并不是所有属性都能过渡</b></font>\ndisplay:none => blcok 就是没办法过渡的。一边改成visibility:hidden => visible\n\n\n### __animation__\n* __animation语法__\n```css\nanimation: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名|\n时长：总共的动画时间\n过渡方式：跟ransiton取值一样\n次数：动画完成几次，infinite重复做\n方向：reverse | alternate | alternate-reverse|\n填充模式：none | forwards | backwards | both |\n是否暂停：paused | running |\n```\n* __keyframes语法__\n`animation`描述动画怎么样变化，`@keyframes`就是描述动画每个时间段要做什么\n```\n@keyframes 动画名{\nfrom{\n}\n//最初的状态\nto{\n}\n//最后的状态\n}\n```\n例子：[JSbin](https://jsbin.com/mexerad/edit?html,css,output)\n\n\n资料参考：饥人谷\n\n<div class=\"ff6666\">(完)</div>\n\n\n\n\n\n\n\n\n","source":"_posts/CSS动画.md","raw":"---\ntitle: CSS动画\ndate: 2020-10-03 11:59:44\ntags: CSS\ntoc: true\ncover: ./img/cssdonghua.jpg\n---\n### __动画的概念__\n* __定义__\n由许多的静止画面（帧），以一定的速度（每秒30张），连续播放，内眼因视觉残象产生的错觉，以为是活动的画面。大部分影视24帧/s就可以正常播放，游戏需要30帧/s。\n\n<!--more-->\n\n### __浏览器的渲染原理__\n* __步骤__\n\t1. 根据HTML构建HTML树（DOM）\n\t2. 根据CSS构建CSS树（CSSOM）\n\t3. 将两棵树合并成一颗渲染树（render tree）\n\t4. Layout布局（文档流、盒模型、计算大小、位置）\n\t5. Paint绘制（把边框颜色、文字颜色、阴影等画出来）\n\t6. Compose合成(根据层叠关系展示画面)\n\n\n* __DOM、CSSOM、render tree__\n<div align=\"center\"><img src=\"./img/threetree.jpg\"></div>\n\n\n* __三种更改样式的方法__\n<div align=\"center\"><img src=\"./img/changestyle.jpg\"></div>\n\t\n\t1. 全走\n\t`div.remove()`会删除DOM里面的元素，其他元素relayout。要走全部过程，重新布局，重新绘制，重新合成。\n\n\t2. 跳过Layout\n\t  改变背景颜色，因为只是改变背景颜色，布局没有发生变化，所以就跳过了布局\n\n\t3. 跳过layout和paint\n\t  改变transform，只需要composite\n\n* __查看更改哪些属性,CSS怎么绘制__ [csstriggers](https://csstriggers.com/)\n\n* __chrome里查看绘制过程__\n<div align=\"center\"><img src=./img/viewrender.jpg></div>\n\n### __transform__\ntransform的[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform)\n__经验:__\n1. 一般需要配合`transition`过度\n2. inline元素不支持transform，需要先变成block\n\n`transform`属性允许你旋转、缩放、倾斜、平移给定元素，具体有以下四个属性：\n1. __translate__\n`translate`是控制元素平移的\n```css\ntransform:translateX(200px) \n// X轴水平移动200px \ntransform:translateY(200px) \n// Y轴垂直移动200px\ntransform:translateZ(1000px)\n// Z轴是我们视线的那根轴，要看出变化，要给父元素加上perspective:1000px //我们眼睛离视点1000px\n```\n\n* 利用translate做绝对居中\n```css\n.box{\npositon:absolute;\ntop:50%;\nleft:50%;\ntransform:translate(-50%,-50%);\n}\n```\n\n2. __scale__\n`scale`是控制元素缩放的\n```css\ntransform:scaleX(1)\n//让元素在X方向上放大1倍\ntransform:scaleY(1)\n//让元素在Y方向上放大1倍\ntransform:scale(1,1)\n//以上两个的缩写形式\n```\n\n3. __rotate__\n`rotate`是控制元素旋转的\n```css\ntransform:rotateX(45deg)\n//围绕元素的X轴，旋转45度\ntransform:rotateY(45deg)\n//围绕元素Y轴，旋<F5>转45度\ntransform:rotateZ(45deg)\n//围绕元素Z轴，旋转45度\n```\n__用途__:一般用于360度旋转制作loading\n\n4. __skew__\n`skew`控制元素的倾斜的\n```css\ntransform:skewX(45deg)\n//x轴歪斜45度\ntransform:skewY(45deg)\n//y轴歪斜45度\ntransform(45deg,45deg)\n//以上两者的缩写\n```\n* __transform的组合写法__\n```css\ntransform:scale(0.5)translate(-100%,-100%)\n```\n\n### __transiton__\n可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。\n* __语法:__\n\t* transiton:`属性名` | `时长` | `过渡方式` | `延迟` |\n\t```css\n\ttransiton:left 200ms linear 3s\n\t//left的变化，过渡时间200ms 过渡方式为linear 延迟3秒过渡\n\t```\n\t* 可以用逗号分隔两个不同属性\n\t```css\n\ttransition:left 200ms,top 400ms\n\t```\n\t* 也可以用all代表所有的属性\n\t```\n\ttransition:all 200ms\n\t```\n\t* 过渡方式：linear匀速 | ease-in淡入 | ease-out淡出 | ease-in-out淡入淡出|\n\n* __注意__\n<font color=\"ff6666\"><b>并不是所有属性都能过渡</b></font>\ndisplay:none => blcok 就是没办法过渡的。一边改成visibility:hidden => visible\n\n\n### __animation__\n* __animation语法__\n```css\nanimation: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名|\n时长：总共的动画时间\n过渡方式：跟ransiton取值一样\n次数：动画完成几次，infinite重复做\n方向：reverse | alternate | alternate-reverse|\n填充模式：none | forwards | backwards | both |\n是否暂停：paused | running |\n```\n* __keyframes语法__\n`animation`描述动画怎么样变化，`@keyframes`就是描述动画每个时间段要做什么\n```\n@keyframes 动画名{\nfrom{\n}\n//最初的状态\nto{\n}\n//最后的状态\n}\n```\n例子：[JSbin](https://jsbin.com/mexerad/edit?html,css,output)\n\n\n资料参考：饥人谷\n\n<div class=\"ff6666\">(完)</div>\n\n\n\n\n\n\n\n\n","slug":"CSS动画","published":1,"updated":"2020-10-03T16:38:07.615Z","_id":"ckftmkspu0000j5fq443aht62","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"动画的概念\"><a href=\"#动画的概念\" class=\"headerlink\" title=\"动画的概念\"></a><strong>动画的概念</strong></h3><ul>\n<li><strong>定义</strong><br>由许多的静止画面（帧），以一定的速度（每秒30张），连续播放，内眼因视觉残象产生的错觉，以为是活动的画面。大部分影视24帧/s就可以正常播放，游戏需要30帧/s。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"浏览器的渲染原理\"><a href=\"#浏览器的渲染原理\" class=\"headerlink\" title=\"浏览器的渲染原理\"></a><strong>浏览器的渲染原理</strong></h3><ul>\n<li><strong>步骤</strong><ol>\n<li>根据HTML构建HTML树（DOM）</li>\n<li>根据CSS构建CSS树（CSSOM）</li>\n<li>将两棵树合并成一颗渲染树（render tree）</li>\n<li>Layout布局（文档流、盒模型、计算大小、位置）</li>\n<li>Paint绘制（把边框颜色、文字颜色、阴影等画出来）</li>\n<li>Compose合成(根据层叠关系展示画面)</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>DOM、CSSOM、render tree</strong><div align=\"center\"><img src=\"./img/threetree.jpg\"></div>\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>三种更改样式的方法</strong></p>\n<div align=\"center\"><img src=\"./img/changestyle.jpg\"></div>\n\n<ol>\n<li><p>全走<br><code>div.remove()</code>会删除DOM里面的元素，其他元素relayout。要走全部过程，重新布局，重新绘制，重新合成。</p>\n</li>\n<li><p>跳过Layout<br>改变背景颜色，因为只是改变背景颜色，布局没有发生变化，所以就跳过了布局</p>\n</li>\n<li><p>跳过layout和paint<br>改变transform，只需要composite</p>\n</li>\n</ol>\n</li>\n<li><p><strong>查看更改哪些属性,CSS怎么绘制</strong> <a href=\"https://csstriggers.com/\">csstriggers</a></p>\n</li>\n<li><p><strong>chrome里查看绘制过程</strong></p>\n<div align=\"center\"><img src=./img/viewrender.jpg></div>\n\n</li>\n</ul>\n<h3 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a><strong>transform</strong></h3><p>transform的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\">MDN</a><br><strong>经验:</strong></p>\n<ol>\n<li>一般需要配合<code>transition</code>过度</li>\n<li>inline元素不支持transform，需要先变成block</li>\n</ol>\n<p><code>transform</code>属性允许你旋转、缩放、倾斜、平移给定元素，具体有以下四个属性：</p>\n<ol>\n<li><strong>translate</strong><br><code>translate</code>是控制元素平移的<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translateX(200px)</span> </span><br><span class=\"line\">// X轴水平移动200px </span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translateY(200px)</span> </span><br><span class=\"line\">// Y轴垂直移动200px</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translateZ(1000px)</span></span><br><span class=\"line\">// Z轴是我们视线的那根轴，要看出变化，要给父元素加上perspective:1000px //我们眼睛离视点1000px</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>利用translate做绝对居中<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">positon</span>:absolute;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>scale</strong><br><code>scale</code>是控制元素缩放的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scaleX(1)</span></span><br><span class=\"line\">//让元素在X方向上放大1倍</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scaleY(1)</span></span><br><span class=\"line\">//让元素在Y方向上放大1倍</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scale(1</span>,1)</span><br><span class=\"line\">//以上两个的缩写形式</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>rotate</strong><br><code>rotate</code>是控制元素旋转的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:rotateX(45deg)</span></span><br><span class=\"line\">//围绕元素的X轴，旋转45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:rotateY(45deg)</span></span><br><span class=\"line\">//围绕元素Y轴，旋&lt;F5&gt;转45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:rotateZ(45deg)</span></span><br><span class=\"line\">//围绕元素Z轴，旋转45度</span><br></pre></td></tr></table></figure>\n<p><strong>用途</strong>:一般用于360度旋转制作loading</p>\n</li>\n<li><p><strong>skew</strong><br><code>skew</code>控制元素的倾斜的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:skewX(45deg)</span></span><br><span class=\"line\">//x轴歪斜45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:skewY(45deg)</span></span><br><span class=\"line\">//y轴歪斜45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span>(45<span class=\"selector-tag\">deg</span>,45<span class=\"selector-tag\">deg</span>)</span><br><span class=\"line\">//以上两者的缩写</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><strong>transform的组合写法</strong><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scale(0.5)translate(-100</span>%,<span class=\"selector-tag\">-100</span>%)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"transiton\"><a href=\"#transiton\" class=\"headerlink\" title=\"transiton\"></a><strong>transiton</strong></h3><p>可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。</p>\n<ul>\n<li><p><strong>语法:</strong></p>\n<ul>\n<li>transiton:<code>属性名</code> | <code>时长</code> | <code>过渡方式</code> | <code>延迟</code> |<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transiton</span><span class=\"selector-pseudo\">:left</span> 200<span class=\"selector-tag\">ms</span> <span class=\"selector-tag\">linear</span> 3<span class=\"selector-tag\">s</span></span><br><span class=\"line\">//left的变化，过渡时间200ms 过渡方式为linear 延迟3秒过渡</span><br></pre></td></tr></table></figure></li>\n<li>可以用逗号分隔两个不同属性<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span><span class=\"selector-pseudo\">:left</span> 200<span class=\"selector-tag\">ms</span>,<span class=\"selector-tag\">top</span> 400<span class=\"selector-tag\">ms</span></span><br></pre></td></tr></table></figure></li>\n<li>也可以用all代表所有的属性<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition:all 200ms</span><br></pre></td></tr></table></figure></li>\n<li>过渡方式：linear匀速 | ease-in淡入 | ease-out淡出 | ease-in-out淡入淡出|</li>\n</ul>\n</li>\n<li><p><strong>注意</strong><br><font color=\"ff6666\"><b>并不是所有属性都能过渡</b></font><br>display:none =&gt; blcok 就是没办法过渡的。一边改成visibility:hidden =&gt; visible</p>\n</li>\n</ul>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a><strong>animation</strong></h3><ul>\n<li><strong>animation语法</strong><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名|</span><br><span class=\"line\">时长：总共的动画时间</span><br><span class=\"line\">过渡方式：跟<span class=\"selector-tag\">ransiton</span>取值一样</span><br><span class=\"line\">次数：动画完成几次，<span class=\"selector-tag\">infinite</span>重复做</span><br><span class=\"line\">方向：reverse | alternate | alternate-reverse|</span><br><span class=\"line\">填充模式：none | forwards | backwards | both |</span><br><span class=\"line\">是否暂停：paused | running |</span><br></pre></td></tr></table></figure></li>\n<li><strong>keyframes语法</strong><br><code>animation</code>描述动画怎么样变化，<code>@keyframes</code>就是描述动画每个时间段要做什么<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes 动画名&#123;</span><br><span class=\"line\">from&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;最初的状态</span><br><span class=\"line\">to&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;最后的状态</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n例子：<a href=\"https://jsbin.com/mexerad/edit?html,css,output\">JSbin</a></li>\n</ul>\n<p>资料参考：饥人谷</p>\n<div class=\"ff6666\">(完)</div>\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"动画的概念\"><a href=\"#动画的概念\" class=\"headerlink\" title=\"动画的概念\"></a><strong>动画的概念</strong></h3><ul>\n<li><strong>定义</strong><br>由许多的静止画面（帧），以一定的速度（每秒30张），连续播放，内眼因视觉残象产生的错觉，以为是活动的画面。大部分影视24帧/s就可以正常播放，游戏需要30帧/s。</li>\n</ul>","more":"<h3 id=\"浏览器的渲染原理\"><a href=\"#浏览器的渲染原理\" class=\"headerlink\" title=\"浏览器的渲染原理\"></a><strong>浏览器的渲染原理</strong></h3><ul>\n<li><strong>步骤</strong><ol>\n<li>根据HTML构建HTML树（DOM）</li>\n<li>根据CSS构建CSS树（CSSOM）</li>\n<li>将两棵树合并成一颗渲染树（render tree）</li>\n<li>Layout布局（文档流、盒模型、计算大小、位置）</li>\n<li>Paint绘制（把边框颜色、文字颜色、阴影等画出来）</li>\n<li>Compose合成(根据层叠关系展示画面)</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>DOM、CSSOM、render tree</strong><div align=\"center\"><img src=\"./img/threetree.jpg\"></div>\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>三种更改样式的方法</strong></p>\n<div align=\"center\"><img src=\"./img/changestyle.jpg\"></div>\n\n<ol>\n<li><p>全走<br><code>div.remove()</code>会删除DOM里面的元素，其他元素relayout。要走全部过程，重新布局，重新绘制，重新合成。</p>\n</li>\n<li><p>跳过Layout<br>改变背景颜色，因为只是改变背景颜色，布局没有发生变化，所以就跳过了布局</p>\n</li>\n<li><p>跳过layout和paint<br>改变transform，只需要composite</p>\n</li>\n</ol>\n</li>\n<li><p><strong>查看更改哪些属性,CSS怎么绘制</strong> <a href=\"https://csstriggers.com/\">csstriggers</a></p>\n</li>\n<li><p><strong>chrome里查看绘制过程</strong></p>\n<div align=\"center\"><img src=./img/viewrender.jpg></div>\n\n</li>\n</ul>\n<h3 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a><strong>transform</strong></h3><p>transform的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\">MDN</a><br><strong>经验:</strong></p>\n<ol>\n<li>一般需要配合<code>transition</code>过度</li>\n<li>inline元素不支持transform，需要先变成block</li>\n</ol>\n<p><code>transform</code>属性允许你旋转、缩放、倾斜、平移给定元素，具体有以下四个属性：</p>\n<ol>\n<li><strong>translate</strong><br><code>translate</code>是控制元素平移的<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translateX(200px)</span> </span><br><span class=\"line\">// X轴水平移动200px </span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translateY(200px)</span> </span><br><span class=\"line\">// Y轴垂直移动200px</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translateZ(1000px)</span></span><br><span class=\"line\">// Z轴是我们视线的那根轴，要看出变化，要给父元素加上perspective:1000px //我们眼睛离视点1000px</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>利用translate做绝对居中<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">positon</span>:absolute;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>scale</strong><br><code>scale</code>是控制元素缩放的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scaleX(1)</span></span><br><span class=\"line\">//让元素在X方向上放大1倍</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scaleY(1)</span></span><br><span class=\"line\">//让元素在Y方向上放大1倍</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scale(1</span>,1)</span><br><span class=\"line\">//以上两个的缩写形式</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>rotate</strong><br><code>rotate</code>是控制元素旋转的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:rotateX(45deg)</span></span><br><span class=\"line\">//围绕元素的X轴，旋转45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:rotateY(45deg)</span></span><br><span class=\"line\">//围绕元素Y轴，旋&lt;F5&gt;转45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:rotateZ(45deg)</span></span><br><span class=\"line\">//围绕元素Z轴，旋转45度</span><br></pre></td></tr></table></figure>\n<p><strong>用途</strong>:一般用于360度旋转制作loading</p>\n</li>\n<li><p><strong>skew</strong><br><code>skew</code>控制元素的倾斜的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:skewX(45deg)</span></span><br><span class=\"line\">//x轴歪斜45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:skewY(45deg)</span></span><br><span class=\"line\">//y轴歪斜45度</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span>(45<span class=\"selector-tag\">deg</span>,45<span class=\"selector-tag\">deg</span>)</span><br><span class=\"line\">//以上两者的缩写</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><strong>transform的组合写法</strong><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scale(0.5)translate(-100</span>%,<span class=\"selector-tag\">-100</span>%)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"transiton\"><a href=\"#transiton\" class=\"headerlink\" title=\"transiton\"></a><strong>transiton</strong></h3><p>可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。</p>\n<ul>\n<li><p><strong>语法:</strong></p>\n<ul>\n<li>transiton:<code>属性名</code> | <code>时长</code> | <code>过渡方式</code> | <code>延迟</code> |<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transiton</span><span class=\"selector-pseudo\">:left</span> 200<span class=\"selector-tag\">ms</span> <span class=\"selector-tag\">linear</span> 3<span class=\"selector-tag\">s</span></span><br><span class=\"line\">//left的变化，过渡时间200ms 过渡方式为linear 延迟3秒过渡</span><br></pre></td></tr></table></figure></li>\n<li>可以用逗号分隔两个不同属性<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span><span class=\"selector-pseudo\">:left</span> 200<span class=\"selector-tag\">ms</span>,<span class=\"selector-tag\">top</span> 400<span class=\"selector-tag\">ms</span></span><br></pre></td></tr></table></figure></li>\n<li>也可以用all代表所有的属性<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition:all 200ms</span><br></pre></td></tr></table></figure></li>\n<li>过渡方式：linear匀速 | ease-in淡入 | ease-out淡出 | ease-in-out淡入淡出|</li>\n</ul>\n</li>\n<li><p><strong>注意</strong><br><font color=\"ff6666\"><b>并不是所有属性都能过渡</b></font><br>display:none =&gt; blcok 就是没办法过渡的。一边改成visibility:hidden =&gt; visible</p>\n</li>\n</ul>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a><strong>animation</strong></h3><ul>\n<li><strong>animation语法</strong><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名|</span><br><span class=\"line\">时长：总共的动画时间</span><br><span class=\"line\">过渡方式：跟<span class=\"selector-tag\">ransiton</span>取值一样</span><br><span class=\"line\">次数：动画完成几次，<span class=\"selector-tag\">infinite</span>重复做</span><br><span class=\"line\">方向：reverse | alternate | alternate-reverse|</span><br><span class=\"line\">填充模式：none | forwards | backwards | both |</span><br><span class=\"line\">是否暂停：paused | running |</span><br></pre></td></tr></table></figure></li>\n<li><strong>keyframes语法</strong><br><code>animation</code>描述动画怎么样变化，<code>@keyframes</code>就是描述动画每个时间段要做什么<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes 动画名&#123;</span><br><span class=\"line\">from&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;最初的状态</span><br><span class=\"line\">to&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;最后的状态</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n例子：<a href=\"https://jsbin.com/mexerad/edit?html,css,output\">JSbin</a></li>\n</ul>\n<p>资料参考：饥人谷</p>\n<div class=\"ff6666\">(完)</div>"},{"title":"grid布局","date":"2020-10-08T10:28:00.000Z","toc":true,"cover":"./img/grid.jpg","_content":"### __概述__\ngrid布局是面前最强大的CSS布局方案。\n它将网页划分成一个个网格，可以任意组合不同的网格，做出各式各样的布局。\n<!--more-->\n\n<div align=\"center\"><img src=./img/1.png></div>\n\n以前完成上图要用很多复杂的CSS，现在Grid布局很快就能实现。\nFlex布局是轴线布局，只能指定`项目`针对轴线的位置，可以看作是一维布局 ,Grid布局则是将容器划分成`行`和`列`，产生单元格，然后指定`项目`在哪个单元格，可以看做二维布局 。\n可以在[caniuse](https://caniuse.com/?search=grid)上查看，各个浏览器对grid布局的支持情况。\n\n### __基本概念__\n采用网格布局的区域称为容器`container`。容器内采用网格定位的子元素称为项目`item`\n\n### __容器属性__\n`display:grid`指定一个容器采用网格布局。\n```css\n.contarner{\ndisplay:grid;\n}\n```\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n\n上图是`display:grid`的效果，默认情况下，容器元素都是块级元素，但是也可以设置成行内元素。\n\n```css\n.container{\ndisplay:inline-grid\n}\n```\n\n<div align=\"center\"><img src=\"./img/3.png\"></div>\n\n上图是`display:inline-grid`的效果\n\n* __grid-template-columns属性/grid-template-rows属性__\n使用空格分隔的值列表，用来定义网格的行和列，这些值表示网格轨道的大小。他们之间的空格表示网格线。\n__值:__\n`<track size>`:可以是长度值，百分比，或者等份网格容器中可用空间（使用`fr`单位）\n`<track name>`:可以给网格线取名字。\nCSS代码:\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:40px 50px auto 50px 40px;\ngrid-template-rows:25% 100px auto;\n}\n```\n以上代码可以创建如下图的网格容器。\n<div align=\"center\"><img src=\"./img/4.png\"></div>\n还可以给指定的网格线取名称，注意网格线名称的括号语法\nCSS代码:\n```css\n.container {\ngrid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\ngrid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n```\n<div align=\"center\"><img src=\"./img/5.png\"></div>\n\n* __repeat()关键字__\n有时候重复写值非常麻烦，可以使用`repeat()`简化重复的数值\nCSS代码：\n```\n.container{\ngrid-complate-columns:repeat(3,100px);\ngrid-complate-rows:repeat(3.100px);\n}\n```\n以上代码等价于\n```css\ngrid-complate-columns:100px 100px 100px;\ngrid-complate-rows:100px 100px 100px;\n```\n\n* __auto-fill关键字__\n有时候单位格的大小是固定的，但是容器的大小不确定，如果希望每一行或者每一列容纳尽可能多的单元格，这时候就可以使用`auto-fill`\nCSS代码：\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:repeat(auto-fill 100px)\n}\n```\n上面代码表示每列宽度为100px，然后自动填充，知道容器不能放置更多的列。\n\n* __fr关键字__\n为了方便表示比例关系，网格布局提供了`fr`关键字（fraction的缩写，意思片段）。如果两列的宽度分别为`1fr`和`2fr`,就表示后者是前者的两倍。\nCSS代码：\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:1fr 1fr;\n}\n```\n`fr`可以与绝对长度的单位结合使用\n```css\ndisplay:grid;\ngrid-complate-cloumns:20px 1fr 1fr\n```\n以上代码表示，有三列，第一列为20px，剩下的空间由剩下的两列平均分配。\n\n* __grid-row-gap属性/grid-column-gap属性/grid-gap属性__\n`grid-row-gap` 属性设置行与行的间隔。\n`grid-column-gap`属性设置列与列的间隔。\n`grid-gap`以上两者的缩写。\n\n* __grid-template-areas属性__\n网格布局允许区域（areas），一个区域由单个或多个单元格组成。`grid-template-areas`属性用于定义区域。\n__值__:\n \n `grid-complate-areas`由网格项的`grid-area`指定的网格区域名称\n `.` :代表一个空的网格单元\n `none`: 不定义该网格区域\nCSS代码\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:100px 100px 100px;\ngird-template-rows:100px 100px 100px;\ngrid-template-areas:\n\"a b c\"\n\"d e f\"\t\t\t\t\t\t\t\t\t\n\"g h i\";\n}\n```\n上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应九个单元格。\n下面是一个实例\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:50px 50px 50px 50px;\ngird-template-rows:auto;\ngrid-template-areas:\n\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer footer\";\n}\n```\n<div align=\"center\"><img src=\"./img/6.png\"></div>\n<font class=\"ff6666\">注意:</font>你的声明中的每一行都需要有相同数量的单元格。\n\n* __grid-template属性__\n用来定义`grid-template-rows` `grid-template-columns` `grid-template-areas`的缩写。\n以上代码可以简写为\n```css\n.container{\ndisplay:grid;\ngird-complate:\n\"header header header header\" auto\n\"main main . siderbar\" auto\n\"footer footer foooter footer\" auto\n/50px 50px 50px 50px\n}\n```\n\n### __子元素属性__\n`grid-column`属性是`grid-column-start`和`grid-column-end`的合并简写形式，`grid-row`属性是`grid-row-start`属性和`grid-row-end`的合并简写形式。\n下面是一个例子\n```css\n.item-1{\ngrid-column:1 / 3;\ngrid-rows:1 / 2;\n}\n/*等同于*/\n.item-1{\ngrid-column-start:1;\ngrid-column-end:3;\ngrid-row-start:1;\ngird-row-end:2;\n}\n```\n上面代码中，项目item-1占据第一行，从第一个跟列线到第三根列线。\n这两个属性中，也可以使用`span`关键字，表示跨越多少个网格。\n```css\n.item-1{\ngrid-column:1 span 2;\ngrid-row:1 span 2;\n}\n```\n\n* __grid-area属性__\n`grid-area`属性指定项目放在哪一个区域\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:50px 50px 50px 50px;\ngird-template-rows:auto;\ngrid-template-areas:\n\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer footer\";\n}\n.item-1{\ngrid-area:header;\n}\n```\n上面代码表示把item-1放在header区域。\n`grid-area`属性还可以当做`grid-row-start`、`grid-column-start`、`grid-row-end`、`grid-column-end`的合并简写形式。\n```css\n.item-1{\ngrid-area:<row-start> | <column-start> | <row-end> | <column-end>;\n}\n```\n\n* __justify-content属性/align-content属性__\n`justify-content`属性定义整个内容区域在容器`container`里面的水平位置。`align-content`属性定义整个内容区域在容器`container`里面的垂直位置。\n```css\n.container {\njustify-content: start | end | center | stretch | space-around | space-between | space-evenly;\nalign-content: start | end | center | stretch | space-around | space-between | space-evenly;  \n}\n```\n跟flex类似，只是多了个`space-evenly`，它是将空间平均分配到每个间隔里面。\n\n* __justify-items属性/align-items属性__\n`justifu-items`属性控制容器内所有网格项水平对齐位置。`align-items`属性控制容器内所有网格项垂直对齐位置。\n```css\n.container{\njustify-items:start|end|center|stretch;\nalign-items:start|end|center|stretch;\n}\n```\n* __justify-self属性/align-self属性__\n`justify-self`属性可以单独控制容器内单个网格项的内容的水平对齐方向\n```css\n.item-1{\njustify-self:start|end|center|stretch;\nalign-self:start|end|center|stretch;\n}\n```\n\n（完）\n\n资料参考：\n* 阮一峰《CSS Grid 网格布局教程》\n* 《CSS Grid 布局完全指南(图解 Grid 详细教程\n","source":"_posts/grid布局.md","raw":"---\ntitle: grid布局\ndate: 2020-10-08 10:28:00\ntags: CSS\ntoc: true\ncover: ./img/grid.jpg\n---\n### __概述__\ngrid布局是面前最强大的CSS布局方案。\n它将网页划分成一个个网格，可以任意组合不同的网格，做出各式各样的布局。\n<!--more-->\n\n<div align=\"center\"><img src=./img/1.png></div>\n\n以前完成上图要用很多复杂的CSS，现在Grid布局很快就能实现。\nFlex布局是轴线布局，只能指定`项目`针对轴线的位置，可以看作是一维布局 ,Grid布局则是将容器划分成`行`和`列`，产生单元格，然后指定`项目`在哪个单元格，可以看做二维布局 。\n可以在[caniuse](https://caniuse.com/?search=grid)上查看，各个浏览器对grid布局的支持情况。\n\n### __基本概念__\n采用网格布局的区域称为容器`container`。容器内采用网格定位的子元素称为项目`item`\n\n### __容器属性__\n`display:grid`指定一个容器采用网格布局。\n```css\n.contarner{\ndisplay:grid;\n}\n```\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n\n上图是`display:grid`的效果，默认情况下，容器元素都是块级元素，但是也可以设置成行内元素。\n\n```css\n.container{\ndisplay:inline-grid\n}\n```\n\n<div align=\"center\"><img src=\"./img/3.png\"></div>\n\n上图是`display:inline-grid`的效果\n\n* __grid-template-columns属性/grid-template-rows属性__\n使用空格分隔的值列表，用来定义网格的行和列，这些值表示网格轨道的大小。他们之间的空格表示网格线。\n__值:__\n`<track size>`:可以是长度值，百分比，或者等份网格容器中可用空间（使用`fr`单位）\n`<track name>`:可以给网格线取名字。\nCSS代码:\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:40px 50px auto 50px 40px;\ngrid-template-rows:25% 100px auto;\n}\n```\n以上代码可以创建如下图的网格容器。\n<div align=\"center\"><img src=\"./img/4.png\"></div>\n还可以给指定的网格线取名称，注意网格线名称的括号语法\nCSS代码:\n```css\n.container {\ngrid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\ngrid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n```\n<div align=\"center\"><img src=\"./img/5.png\"></div>\n\n* __repeat()关键字__\n有时候重复写值非常麻烦，可以使用`repeat()`简化重复的数值\nCSS代码：\n```\n.container{\ngrid-complate-columns:repeat(3,100px);\ngrid-complate-rows:repeat(3.100px);\n}\n```\n以上代码等价于\n```css\ngrid-complate-columns:100px 100px 100px;\ngrid-complate-rows:100px 100px 100px;\n```\n\n* __auto-fill关键字__\n有时候单位格的大小是固定的，但是容器的大小不确定，如果希望每一行或者每一列容纳尽可能多的单元格，这时候就可以使用`auto-fill`\nCSS代码：\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:repeat(auto-fill 100px)\n}\n```\n上面代码表示每列宽度为100px，然后自动填充，知道容器不能放置更多的列。\n\n* __fr关键字__\n为了方便表示比例关系，网格布局提供了`fr`关键字（fraction的缩写，意思片段）。如果两列的宽度分别为`1fr`和`2fr`,就表示后者是前者的两倍。\nCSS代码：\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:1fr 1fr;\n}\n```\n`fr`可以与绝对长度的单位结合使用\n```css\ndisplay:grid;\ngrid-complate-cloumns:20px 1fr 1fr\n```\n以上代码表示，有三列，第一列为20px，剩下的空间由剩下的两列平均分配。\n\n* __grid-row-gap属性/grid-column-gap属性/grid-gap属性__\n`grid-row-gap` 属性设置行与行的间隔。\n`grid-column-gap`属性设置列与列的间隔。\n`grid-gap`以上两者的缩写。\n\n* __grid-template-areas属性__\n网格布局允许区域（areas），一个区域由单个或多个单元格组成。`grid-template-areas`属性用于定义区域。\n__值__:\n \n `grid-complate-areas`由网格项的`grid-area`指定的网格区域名称\n `.` :代表一个空的网格单元\n `none`: 不定义该网格区域\nCSS代码\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:100px 100px 100px;\ngird-template-rows:100px 100px 100px;\ngrid-template-areas:\n\"a b c\"\n\"d e f\"\t\t\t\t\t\t\t\t\t\n\"g h i\";\n}\n```\n上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应九个单元格。\n下面是一个实例\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:50px 50px 50px 50px;\ngird-template-rows:auto;\ngrid-template-areas:\n\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer footer\";\n}\n```\n<div align=\"center\"><img src=\"./img/6.png\"></div>\n<font class=\"ff6666\">注意:</font>你的声明中的每一行都需要有相同数量的单元格。\n\n* __grid-template属性__\n用来定义`grid-template-rows` `grid-template-columns` `grid-template-areas`的缩写。\n以上代码可以简写为\n```css\n.container{\ndisplay:grid;\ngird-complate:\n\"header header header header\" auto\n\"main main . siderbar\" auto\n\"footer footer foooter footer\" auto\n/50px 50px 50px 50px\n}\n```\n\n### __子元素属性__\n`grid-column`属性是`grid-column-start`和`grid-column-end`的合并简写形式，`grid-row`属性是`grid-row-start`属性和`grid-row-end`的合并简写形式。\n下面是一个例子\n```css\n.item-1{\ngrid-column:1 / 3;\ngrid-rows:1 / 2;\n}\n/*等同于*/\n.item-1{\ngrid-column-start:1;\ngrid-column-end:3;\ngrid-row-start:1;\ngird-row-end:2;\n}\n```\n上面代码中，项目item-1占据第一行，从第一个跟列线到第三根列线。\n这两个属性中，也可以使用`span`关键字，表示跨越多少个网格。\n```css\n.item-1{\ngrid-column:1 span 2;\ngrid-row:1 span 2;\n}\n```\n\n* __grid-area属性__\n`grid-area`属性指定项目放在哪一个区域\n```css\n.container{\ndisplay:grid;\ngrid-template-columns:50px 50px 50px 50px;\ngird-template-rows:auto;\ngrid-template-areas:\n\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer footer\";\n}\n.item-1{\ngrid-area:header;\n}\n```\n上面代码表示把item-1放在header区域。\n`grid-area`属性还可以当做`grid-row-start`、`grid-column-start`、`grid-row-end`、`grid-column-end`的合并简写形式。\n```css\n.item-1{\ngrid-area:<row-start> | <column-start> | <row-end> | <column-end>;\n}\n```\n\n* __justify-content属性/align-content属性__\n`justify-content`属性定义整个内容区域在容器`container`里面的水平位置。`align-content`属性定义整个内容区域在容器`container`里面的垂直位置。\n```css\n.container {\njustify-content: start | end | center | stretch | space-around | space-between | space-evenly;\nalign-content: start | end | center | stretch | space-around | space-between | space-evenly;  \n}\n```\n跟flex类似，只是多了个`space-evenly`，它是将空间平均分配到每个间隔里面。\n\n* __justify-items属性/align-items属性__\n`justifu-items`属性控制容器内所有网格项水平对齐位置。`align-items`属性控制容器内所有网格项垂直对齐位置。\n```css\n.container{\njustify-items:start|end|center|stretch;\nalign-items:start|end|center|stretch;\n}\n```\n* __justify-self属性/align-self属性__\n`justify-self`属性可以单独控制容器内单个网格项的内容的水平对齐方向\n```css\n.item-1{\njustify-self:start|end|center|stretch;\nalign-self:start|end|center|stretch;\n}\n```\n\n（完）\n\n资料参考：\n* 阮一峰《CSS Grid 网格布局教程》\n* 《CSS Grid 布局完全指南(图解 Grid 详细教程\n","slug":"grid布局","published":1,"updated":"2020-10-12T14:41:31.631Z","_id":"ckg0orjxz0000cgfq5p671hbc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><strong>概述</strong></h3><p>grid布局是面前最强大的CSS布局方案。<br>它将网页划分成一个个网格，可以任意组合不同的网格，做出各式各样的布局。</p>\n<a id=\"more\"></a>\n\n<div align=\"center\"><img src=./img/1.png></div>\n\n<p>以前完成上图要用很多复杂的CSS，现在Grid布局很快就能实现。<br>Flex布局是轴线布局，只能指定<code>项目</code>针对轴线的位置，可以看作是一维布局 ,Grid布局则是将容器划分成<code>行</code>和<code>列</code>，产生单元格，然后指定<code>项目</code>在哪个单元格，可以看做二维布局 。<br>可以在<a href=\"https://caniuse.com/?search=grid\">caniuse</a>上查看，各个浏览器对grid布局的支持情况。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h3><p>采用网格布局的区域称为容器<code>container</code>。容器内采用网格定位的子元素称为项目<code>item</code></p>\n<h3 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a><strong>容器属性</strong></h3><p><code>display:grid</code>指定一个容器采用网格布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.contarner</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n\n<p>上图是<code>display:grid</code>的效果，默认情况下，容器元素都是块级元素，但是也可以设置成行内元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline-grid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div align=\"center\"><img src=\"./img/3.png\"></div>\n\n<p>上图是<code>display:inline-grid</code>的效果</p>\n<ul>\n<li><p><strong>grid-template-columns属性/grid-template-rows属性</strong><br>使用空格分隔的值列表，用来定义网格的行和列，这些值表示网格轨道的大小。他们之间的空格表示网格线。<br><strong>值:</strong><br><code>&lt;track size&gt;</code>:可以是长度值，百分比，或者等份网格容器中可用空间（使用<code>fr</code>单位）<br><code>&lt;track name&gt;</code>:可以给网格线取名字。<br>CSS代码:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">40px</span> <span class=\"number\">50px</span> auto <span class=\"number\">50px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-rows</span>:<span class=\"number\">25%</span> <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码可以创建如下图的网格容器。</p>\n<div align=\"center\"><img src=\"./img/4.png\"></div>\n还可以给指定的网格线取名称，注意网格线名称的括号语法\nCSS代码:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>: [first] <span class=\"number\">40px</span> [line2] <span class=\"number\">50px</span> [line3] auto [col4-start] <span class=\"number\">50px</span> [five] <span class=\"number\">40px</span> [end];</span><br><span class=\"line\"><span class=\"attribute\">grid-template-rows</span>: [row1-start] <span class=\"number\">25%</span> [row1-end] <span class=\"number\">100px</span> [third-line] auto [last-line];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"./img/5.png\"></div>\n</li>\n<li><p><strong>repeat()关键字</strong><br>有时候重复写值非常麻烦，可以使用<code>repeat()</code>简化重复的数值<br>CSS代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">grid-complate-columns:repeat(3,100px);</span><br><span class=\"line\">grid-complate-rows:repeat(3.100px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码等价于</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">grid-complate-columns</span><span class=\"selector-pseudo\">:100px</span> 100<span class=\"selector-tag\">px</span> 100<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">grid-complate-rows</span><span class=\"selector-pseudo\">:100px</span> 100<span class=\"selector-tag\">px</span> 100<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>auto-fill关键字</strong><br>有时候单位格的大小是固定的，但是容器的大小不确定，如果希望每一行或者每一列容纳尽可能多的单元格，这时候就可以使用<code>auto-fill</code><br>CSS代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"built_in\">repeat</span>(auto-fill <span class=\"number\">100px</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码表示每列宽度为100px，然后自动填充，知道容器不能放置更多的列。</p>\n</li>\n<li><p><strong>fr关键字</strong><br>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction的缩写，意思片段）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>,就表示后者是前者的两倍。<br>CSS代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">1</span>fr <span class=\"number\">1</span>fr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>fr</code>可以与绝对长度的单位结合使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:grid</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">grid-complate-cloumns</span><span class=\"selector-pseudo\">:20px</span> 1<span class=\"selector-tag\">fr</span> 1<span class=\"selector-tag\">fr</span></span><br></pre></td></tr></table></figure>\n<p>以上代码表示，有三列，第一列为20px，剩下的空间由剩下的两列平均分配。</p>\n</li>\n<li><p><strong>grid-row-gap属性/grid-column-gap属性/grid-gap属性</strong><br><code>grid-row-gap</code> 属性设置行与行的间隔。<br><code>grid-column-gap</code>属性设置列与列的间隔。<br><code>grid-gap</code>以上两者的缩写。</p>\n</li>\n<li><p><strong>grid-template-areas属性</strong><br>网格布局允许区域（areas），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。<br><strong>值</strong>:</p>\n<p><code>grid-complate-areas</code>由网格项的<code>grid-area</code>指定的网格区域名称<br><code>.</code> :代表一个空的网格单元<br><code>none</code>: 不定义该网格区域<br>CSS代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-template-rows</span>:<span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;a b c&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;d e f&quot;</span>\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"string\">&quot;g h i&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应九个单元格。<br>下面是一个实例</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-template-rows</span>:auto;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;header header header header&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;main main . sidebar&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;footer footer footer footer&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"./img/6.png\"></div>\n<font class=\"ff6666\">注意:</font>你的声明中的每一行都需要有相同数量的单元格。\n</li>\n<li><p><strong>grid-template属性</strong><br>用来定义<code>grid-template-rows</code> <code>grid-template-columns</code> <code>grid-template-areas</code>的缩写。<br>以上代码可以简写为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">gird-complate</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;header header header header&quot;</span> auto</span><br><span class=\"line\"><span class=\"string\">&quot;main main . siderbar&quot;</span> auto</span><br><span class=\"line\"><span class=\"string\">&quot;footer footer foooter footer&quot;</span> auto</span><br><span class=\"line\">/<span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"子元素属性\"><a href=\"#子元素属性\" class=\"headerlink\" title=\"子元素属性\"></a><strong>子元素属性</strong></h3><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。<br>下面是一个例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-column</span>:<span class=\"number\">1</span> / <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-rows</span>:<span class=\"number\">1</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*等同于*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-column-start</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-column-end</span>:<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-row-start</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-row-end</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，项目item-1占据第一行，从第一个跟列线到第三根列线。<br>这两个属性中，也可以使用<code>span</code>关键字，表示跨越多少个网格。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-column</span>:<span class=\"number\">1</span> span <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-row</span>:<span class=\"number\">1</span> span <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>grid-area属性</strong><br><code>grid-area</code>属性指定项目放在哪一个区域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-template-rows</span>:auto;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;header header header header&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;main main . sidebar&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;footer footer footer footer&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-area</span>:header;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码表示把item-1放在header区域。<br><code>grid-area</code>属性还可以当做<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-area</span>:&lt;row-start&gt; | &lt;column-start&gt; | &lt;row-end&gt; | &lt;column-end&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>justify-content属性/align-content属性</strong><br><code>justify-content</code>属性定义整个内容区域在容器<code>container</code>里面的水平位置。<code>align-content</code>属性定义整个内容区域在容器<code>container</code>里面的垂直位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class=\"line\"><span class=\"attribute\">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟flex类似，只是多了个<code>space-evenly</code>，它是将空间平均分配到每个间隔里面。</p>\n</li>\n<li><p><strong>justify-items属性/align-items属性</strong><br><code>justifu-items</code>属性控制容器内所有网格项水平对齐位置。<code>align-items</code>属性控制容器内所有网格项垂直对齐位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-items</span>:start|end|center|stretch;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>:start|end|center|stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>justify-self属性/align-self属性</strong><br><code>justify-self</code>属性可以单独控制容器内单个网格项的内容的水平对齐方向</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-self</span>:start|end|center|stretch;</span><br><span class=\"line\"><span class=\"attribute\">align-self</span>:start|end|center|stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>（完）</p>\n<p>资料参考：</p>\n<ul>\n<li>阮一峰《CSS Grid 网格布局教程》</li>\n<li>《CSS Grid 布局完全指南(图解 Grid 详细教程</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><strong>概述</strong></h3><p>grid布局是面前最强大的CSS布局方案。<br>它将网页划分成一个个网格，可以任意组合不同的网格，做出各式各样的布局。</p>","more":"<div align=\"center\"><img src=./img/1.png></div>\n\n<p>以前完成上图要用很多复杂的CSS，现在Grid布局很快就能实现。<br>Flex布局是轴线布局，只能指定<code>项目</code>针对轴线的位置，可以看作是一维布局 ,Grid布局则是将容器划分成<code>行</code>和<code>列</code>，产生单元格，然后指定<code>项目</code>在哪个单元格，可以看做二维布局 。<br>可以在<a href=\"https://caniuse.com/?search=grid\">caniuse</a>上查看，各个浏览器对grid布局的支持情况。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h3><p>采用网格布局的区域称为容器<code>container</code>。容器内采用网格定位的子元素称为项目<code>item</code></p>\n<h3 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a><strong>容器属性</strong></h3><p><code>display:grid</code>指定一个容器采用网格布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.contarner</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"./img/2.png\"></div>\n\n<p>上图是<code>display:grid</code>的效果，默认情况下，容器元素都是块级元素，但是也可以设置成行内元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline-grid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div align=\"center\"><img src=\"./img/3.png\"></div>\n\n<p>上图是<code>display:inline-grid</code>的效果</p>\n<ul>\n<li><p><strong>grid-template-columns属性/grid-template-rows属性</strong><br>使用空格分隔的值列表，用来定义网格的行和列，这些值表示网格轨道的大小。他们之间的空格表示网格线。<br><strong>值:</strong><br><code>&lt;track size&gt;</code>:可以是长度值，百分比，或者等份网格容器中可用空间（使用<code>fr</code>单位）<br><code>&lt;track name&gt;</code>:可以给网格线取名字。<br>CSS代码:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">40px</span> <span class=\"number\">50px</span> auto <span class=\"number\">50px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-rows</span>:<span class=\"number\">25%</span> <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码可以创建如下图的网格容器。</p>\n<div align=\"center\"><img src=\"./img/4.png\"></div>\n还可以给指定的网格线取名称，注意网格线名称的括号语法\nCSS代码:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>: [first] <span class=\"number\">40px</span> [line2] <span class=\"number\">50px</span> [line3] auto [col4-start] <span class=\"number\">50px</span> [five] <span class=\"number\">40px</span> [end];</span><br><span class=\"line\"><span class=\"attribute\">grid-template-rows</span>: [row1-start] <span class=\"number\">25%</span> [row1-end] <span class=\"number\">100px</span> [third-line] auto [last-line];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"./img/5.png\"></div>\n</li>\n<li><p><strong>repeat()关键字</strong><br>有时候重复写值非常麻烦，可以使用<code>repeat()</code>简化重复的数值<br>CSS代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">grid-complate-columns:repeat(3,100px);</span><br><span class=\"line\">grid-complate-rows:repeat(3.100px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码等价于</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">grid-complate-columns</span><span class=\"selector-pseudo\">:100px</span> 100<span class=\"selector-tag\">px</span> 100<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">grid-complate-rows</span><span class=\"selector-pseudo\">:100px</span> 100<span class=\"selector-tag\">px</span> 100<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>auto-fill关键字</strong><br>有时候单位格的大小是固定的，但是容器的大小不确定，如果希望每一行或者每一列容纳尽可能多的单元格，这时候就可以使用<code>auto-fill</code><br>CSS代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"built_in\">repeat</span>(auto-fill <span class=\"number\">100px</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码表示每列宽度为100px，然后自动填充，知道容器不能放置更多的列。</p>\n</li>\n<li><p><strong>fr关键字</strong><br>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction的缩写，意思片段）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>,就表示后者是前者的两倍。<br>CSS代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">1</span>fr <span class=\"number\">1</span>fr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>fr</code>可以与绝对长度的单位结合使用</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:grid</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">grid-complate-cloumns</span><span class=\"selector-pseudo\">:20px</span> 1<span class=\"selector-tag\">fr</span> 1<span class=\"selector-tag\">fr</span></span><br></pre></td></tr></table></figure>\n<p>以上代码表示，有三列，第一列为20px，剩下的空间由剩下的两列平均分配。</p>\n</li>\n<li><p><strong>grid-row-gap属性/grid-column-gap属性/grid-gap属性</strong><br><code>grid-row-gap</code> 属性设置行与行的间隔。<br><code>grid-column-gap</code>属性设置列与列的间隔。<br><code>grid-gap</code>以上两者的缩写。</p>\n</li>\n<li><p><strong>grid-template-areas属性</strong><br>网格布局允许区域（areas），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。<br><strong>值</strong>:</p>\n<p><code>grid-complate-areas</code>由网格项的<code>grid-area</code>指定的网格区域名称<br><code>.</code> :代表一个空的网格单元<br><code>none</code>: 不定义该网格区域<br>CSS代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-template-rows</span>:<span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;a b c&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;d e f&quot;</span>\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"string\">&quot;g h i&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应九个单元格。<br>下面是一个实例</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-template-rows</span>:auto;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;header header header header&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;main main . sidebar&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;footer footer footer footer&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"./img/6.png\"></div>\n<font class=\"ff6666\">注意:</font>你的声明中的每一行都需要有相同数量的单元格。\n</li>\n<li><p><strong>grid-template属性</strong><br>用来定义<code>grid-template-rows</code> <code>grid-template-columns</code> <code>grid-template-areas</code>的缩写。<br>以上代码可以简写为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">gird-complate</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;header header header header&quot;</span> auto</span><br><span class=\"line\"><span class=\"string\">&quot;main main . siderbar&quot;</span> auto</span><br><span class=\"line\"><span class=\"string\">&quot;footer footer foooter footer&quot;</span> auto</span><br><span class=\"line\">/<span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"子元素属性\"><a href=\"#子元素属性\" class=\"headerlink\" title=\"子元素属性\"></a><strong>子元素属性</strong></h3><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。<br>下面是一个例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-column</span>:<span class=\"number\">1</span> / <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-rows</span>:<span class=\"number\">1</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*等同于*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-column-start</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-column-end</span>:<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-row-start</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-row-end</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，项目item-1占据第一行，从第一个跟列线到第三根列线。<br>这两个属性中，也可以使用<code>span</code>关键字，表示跨越多少个网格。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-column</span>:<span class=\"number\">1</span> span <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"attribute\">grid-row</span>:<span class=\"number\">1</span> span <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>grid-area属性</strong><br><code>grid-area</code>属性指定项目放在哪一个区域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\"><span class=\"attribute\">gird-template-rows</span>:auto;</span><br><span class=\"line\"><span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\"><span class=\"string\">&quot;header header header header&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;main main . sidebar&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;footer footer footer footer&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-area</span>:header;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码表示把item-1放在header区域。<br><code>grid-area</code>属性还可以当做<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">grid-area</span>:&lt;row-start&gt; | &lt;column-start&gt; | &lt;row-end&gt; | &lt;column-end&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>justify-content属性/align-content属性</strong><br><code>justify-content</code>属性定义整个内容区域在容器<code>container</code>里面的水平位置。<code>align-content</code>属性定义整个内容区域在容器<code>container</code>里面的垂直位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class=\"line\"><span class=\"attribute\">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟flex类似，只是多了个<code>space-evenly</code>，它是将空间平均分配到每个间隔里面。</p>\n</li>\n<li><p><strong>justify-items属性/align-items属性</strong><br><code>justifu-items</code>属性控制容器内所有网格项水平对齐位置。<code>align-items</code>属性控制容器内所有网格项垂直对齐位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-items</span>:start|end|center|stretch;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>:start|end|center|stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>justify-self属性/align-self属性</strong><br><code>justify-self</code>属性可以单独控制容器内单个网格项的内容的水平对齐方向</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">justify-self</span>:start|end|center|stretch;</span><br><span class=\"line\"><span class=\"attribute\">align-self</span>:start|end|center|stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>（完）</p>\n<p>资料参考：</p>\n<ul>\n<li>阮一峰《CSS Grid 网格布局教程》</li>\n<li>《CSS Grid 布局完全指南(图解 Grid 详细教程</li>\n</ul>"},{"title":"HTTP入门","date":"2020-10-14T13:15:41.000Z","toc":true,"cover":"./img/http.jpg","_content":"\n### __什么是WWW__\nWWW是李爵士在1990年左右发明的，他由三部分组成，分别是`HTML`、`URL`、`HTTP`\n### __URL__\n`URL`全称统一资源定位符(Uniform Resource Locator),是__WWW__的一个核心概念，它是浏览器用来检索Web上公布的任何资源的机制。\n<!--more-->\n<div align=\"center\"><img src=\"./img/url.jpg\"></div>\n\n`URL`由以上几个部分组成，端口默认是不写的，但是要记住HTTP的端口是80，HTTPS的端口是443.\n另外需要注意的一点是，锚点`#`不会被上传到服务器，锚点只是浏览器里面的功能。\n\n### __HTTP__\n`HTTP`全称超文本传输协议，从字面上就可以知道，它是为了传输`HTML`而生的.`HTTP`是建立在TCP/IP协议上的。\n* __TCP/IP协议__\n\t五层软件模型，分别是物理层、数据链路层、网络层、传输控制层、应用层。如下图所示\n\n<div align=\"center\"><img src=\"./img/tcpip.png\"></div>\n\n <div align=\"center\" class=\"ff3333\"> 越靠下离物理硬件越近，越靠上离用户就越近。</div>\n\n * `物理层`:通过光电信号，传输数据\n * `数据链路层`:通过ARP协议获取访问主机的物理地址。\n *\t`网络层`:通过子网掩码判断要范围主机的ip是否处于同一子网，如果是同一个子网内，就进行`广播`,如果不处于同一个子网，就获取下一条的ip，把数据包丢给下一条的ip，这里的下一条ip，可以理解成网关\n * `传输控制层`:有两个协议，`TCP协议`和`UDP协议`，经常被使用的是`TCP/协议`,因为它是面向连接，可以的传输协议。\n  1. 三次握手\n\t\t ```\n\t\t\t客户端 ----我要建立连接了----> 服务端\n\t\t\t客户端 <----好的我知道了---- 服务端\n\t\t\t客户端 ----好的我也知道了----> 服务端\n\t\t\t完成三次握手后，客户端和服务端 都会为对方开辟一个资源\n\t\t ```\n  2. 四次分手\n\t\t ```\n\t\t 客户端 ----我要断开连接了----> 服务端\n\t\t 客户端 <----好的--- 服务端\n\t\t 客户端  <----我也断开连接了---- 服务端\n\t\t 客户端 ----好的----> 服务端\n\t\t ```\n * `应用层`:应用层上运行着很多协议，是离客户最近的层，上面运行着`HTTP协议`、`SSH协议`、`HTTPS协议`、`FTP协议`等等\n \t以上是从下到上说了每一层的功能，现在有个例子，能更好的理解`TCP/IP`协议，当我们在浏览器输入一个url后，点击回车后发生了什么。\n 1.  `应用层`通过DNS服务，得到需要访问rul所对应的IP，告诉下一层`传输控制层`，我要访问这个IP。\n 2. `数据传输层`在本地开了一个`随机`端口，并且告诉`网络层`我要进行\"三次握手\"了，赶紧帮我找到对方主机的位置。\n 3. `网络层`拿到对方主机ip，先确定主机的ip是否属于子网内，不属于，就把数据丢给下一跳网关的IP。\n 4. `数据链路层` 通过ARP协议，确定对方主机的MAC地址，把对方主机的IP地址和MAC地址封装好，丢给`物理层`\n 5. `物理层`通过光信号，把数据传给对方主机。\n 6. 对方主机拿到数据，又通过网络层、数据链路层、网络层、把之前封装的数据进行拆解，最后到达`传输控制层`，双方`传输控制层`进行完三次握手后，服务器把客户端请求的东西，发给客户端。\n 7. 传输完成后，通过\"四次分手\"断开连接。\n\n* __端口的规则__\n\t1. 0-1023端口是留给系统用的，已经被占用，如果我们自己要使用，要从1024开始。\n\t2. 只有管理员才有权使用留个系统的1024个端口。\n\t3. 一个端口被占用，就只能使用另外一个端口，总的端口数有0~65535\n\n* __关于域名__\n 1. `.com`、`.org`、`.cn` 这些属于顶级域名\n 2. baidu.com 、smartisan.com 这些属于二级域名\n 3. www.baidu.com 、 www.smartisan.com 这些三级域名。\n 4. 其实`www`是多余的，其实是早期为了让用户知道他们在使用的这个东西是`www`才加上的。\n\n\n* __HTTP请求__\n格式：\n```\n请求动词 路径加查询参数 协议名/版本\nHost:访问主机的域名或者/IP \nAccept:text/html   我接受的接受\nContent-type:请求体的格式\n回车\n请求体\n```\n__注意:__\n 1. 请求动词有`GET`、`POST`、`PUT`、`PATCH`、`DELETE`等\n 2. 请求体在`GET`的时候，一般为空\n\n\n* __HTTP响应__\n```\n协议名/版本 状态码 状态字符串\nContent-type：响应体的格式\n回车\n响应体(下载内容)\n```\n__注意:__ 常见的状态码是考点。[状态码](https://zhuanlan.zhihu.com/p/121168258)\n\n（完）\n\n资料参考：\n1.饥人谷\n2.阮一峰TCP/IP协议\n","source":"_posts/HTTP入门.md","raw":"---\ntitle: HTTP入门\ndate: 2020-10-14 13:15:41\ntags: HTTP\ntoc: true\ncover: ./img/http.jpg\n---\n\n### __什么是WWW__\nWWW是李爵士在1990年左右发明的，他由三部分组成，分别是`HTML`、`URL`、`HTTP`\n### __URL__\n`URL`全称统一资源定位符(Uniform Resource Locator),是__WWW__的一个核心概念，它是浏览器用来检索Web上公布的任何资源的机制。\n<!--more-->\n<div align=\"center\"><img src=\"./img/url.jpg\"></div>\n\n`URL`由以上几个部分组成，端口默认是不写的，但是要记住HTTP的端口是80，HTTPS的端口是443.\n另外需要注意的一点是，锚点`#`不会被上传到服务器，锚点只是浏览器里面的功能。\n\n### __HTTP__\n`HTTP`全称超文本传输协议，从字面上就可以知道，它是为了传输`HTML`而生的.`HTTP`是建立在TCP/IP协议上的。\n* __TCP/IP协议__\n\t五层软件模型，分别是物理层、数据链路层、网络层、传输控制层、应用层。如下图所示\n\n<div align=\"center\"><img src=\"./img/tcpip.png\"></div>\n\n <div align=\"center\" class=\"ff3333\"> 越靠下离物理硬件越近，越靠上离用户就越近。</div>\n\n * `物理层`:通过光电信号，传输数据\n * `数据链路层`:通过ARP协议获取访问主机的物理地址。\n *\t`网络层`:通过子网掩码判断要范围主机的ip是否处于同一子网，如果是同一个子网内，就进行`广播`,如果不处于同一个子网，就获取下一条的ip，把数据包丢给下一条的ip，这里的下一条ip，可以理解成网关\n * `传输控制层`:有两个协议，`TCP协议`和`UDP协议`，经常被使用的是`TCP/协议`,因为它是面向连接，可以的传输协议。\n  1. 三次握手\n\t\t ```\n\t\t\t客户端 ----我要建立连接了----> 服务端\n\t\t\t客户端 <----好的我知道了---- 服务端\n\t\t\t客户端 ----好的我也知道了----> 服务端\n\t\t\t完成三次握手后，客户端和服务端 都会为对方开辟一个资源\n\t\t ```\n  2. 四次分手\n\t\t ```\n\t\t 客户端 ----我要断开连接了----> 服务端\n\t\t 客户端 <----好的--- 服务端\n\t\t 客户端  <----我也断开连接了---- 服务端\n\t\t 客户端 ----好的----> 服务端\n\t\t ```\n * `应用层`:应用层上运行着很多协议，是离客户最近的层，上面运行着`HTTP协议`、`SSH协议`、`HTTPS协议`、`FTP协议`等等\n \t以上是从下到上说了每一层的功能，现在有个例子，能更好的理解`TCP/IP`协议，当我们在浏览器输入一个url后，点击回车后发生了什么。\n 1.  `应用层`通过DNS服务，得到需要访问rul所对应的IP，告诉下一层`传输控制层`，我要访问这个IP。\n 2. `数据传输层`在本地开了一个`随机`端口，并且告诉`网络层`我要进行\"三次握手\"了，赶紧帮我找到对方主机的位置。\n 3. `网络层`拿到对方主机ip，先确定主机的ip是否属于子网内，不属于，就把数据丢给下一跳网关的IP。\n 4. `数据链路层` 通过ARP协议，确定对方主机的MAC地址，把对方主机的IP地址和MAC地址封装好，丢给`物理层`\n 5. `物理层`通过光信号，把数据传给对方主机。\n 6. 对方主机拿到数据，又通过网络层、数据链路层、网络层、把之前封装的数据进行拆解，最后到达`传输控制层`，双方`传输控制层`进行完三次握手后，服务器把客户端请求的东西，发给客户端。\n 7. 传输完成后，通过\"四次分手\"断开连接。\n\n* __端口的规则__\n\t1. 0-1023端口是留给系统用的，已经被占用，如果我们自己要使用，要从1024开始。\n\t2. 只有管理员才有权使用留个系统的1024个端口。\n\t3. 一个端口被占用，就只能使用另外一个端口，总的端口数有0~65535\n\n* __关于域名__\n 1. `.com`、`.org`、`.cn` 这些属于顶级域名\n 2. baidu.com 、smartisan.com 这些属于二级域名\n 3. www.baidu.com 、 www.smartisan.com 这些三级域名。\n 4. 其实`www`是多余的，其实是早期为了让用户知道他们在使用的这个东西是`www`才加上的。\n\n\n* __HTTP请求__\n格式：\n```\n请求动词 路径加查询参数 协议名/版本\nHost:访问主机的域名或者/IP \nAccept:text/html   我接受的接受\nContent-type:请求体的格式\n回车\n请求体\n```\n__注意:__\n 1. 请求动词有`GET`、`POST`、`PUT`、`PATCH`、`DELETE`等\n 2. 请求体在`GET`的时候，一般为空\n\n\n* __HTTP响应__\n```\n协议名/版本 状态码 状态字符串\nContent-type：响应体的格式\n回车\n响应体(下载内容)\n```\n__注意:__ 常见的状态码是考点。[状态码](https://zhuanlan.zhihu.com/p/121168258)\n\n（完）\n\n资料参考：\n1.饥人谷\n2.阮一峰TCP/IP协议\n","slug":"HTTP入门","published":1,"updated":"2020-10-14T15:57:49.121Z","_id":"ckg9f85f30000ejfqedzdd7ix","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是WWW\"><a href=\"#什么是WWW\" class=\"headerlink\" title=\"什么是WWW\"></a><strong>什么是WWW</strong></h3><p>WWW是李爵士在1990年左右发明的，他由三部分组成，分别是<code>HTML</code>、<code>URL</code>、<code>HTTP</code></p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a><strong>URL</strong></h3><p><code>URL</code>全称统一资源定位符(Uniform Resource Locator),是__WWW__的一个核心概念，它是浏览器用来检索Web上公布的任何资源的机制。</p>\n<a id=\"more\"></a>\n<div align=\"center\"><img src=\"./img/url.jpg\"></div>\n\n<p><code>URL</code>由以上几个部分组成，端口默认是不写的，但是要记住HTTP的端口是80，HTTPS的端口是443.<br>另外需要注意的一点是，锚点<code>#</code>不会被上传到服务器，锚点只是浏览器里面的功能。</p>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a><strong>HTTP</strong></h3><p><code>HTTP</code>全称超文本传输协议，从字面上就可以知道，它是为了传输<code>HTML</code>而生的.<code>HTTP</code>是建立在TCP/IP协议上的。</p>\n<ul>\n<li><strong>TCP/IP协议</strong><br>  五层软件模型，分别是物理层、数据链路层、网络层、传输控制层、应用层。如下图所示</li>\n</ul>\n<div align=\"center\"><img src=\"./img/tcpip.png\"></div>\n\n <div align=\"center\" class=\"ff3333\"> 越靠下离物理硬件越近，越靠上离用户就越近。</div>\n\n<ul>\n<li><code>物理层</code>:通过光电信号，传输数据</li>\n<li><code>数据链路层</code>:通过ARP协议获取访问主机的物理地址。</li>\n<li><code>网络层</code>:通过子网掩码判断要范围主机的ip是否处于同一子网，如果是同一个子网内，就进行<code>广播</code>,如果不处于同一个子网，就获取下一条的ip，把数据包丢给下一条的ip，这里的下一条ip，可以理解成网关</li>\n<li><code>传输控制层</code>:有两个协议，<code>TCP协议</code>和<code>UDP协议</code>，经常被使用的是<code>TCP/协议</code>,因为它是面向连接，可以的传输协议。<ol>\n<li>三次握手   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端 ----我要建立连接了----&gt; 服务端</span><br><span class=\"line\">客户端 &lt;----好的我知道了---- 服务端</span><br><span class=\"line\">客户端 ----好的我也知道了----&gt; 服务端</span><br><span class=\"line\">完成三次握手后，客户端和服务端 都会为对方开辟一个资源</span><br></pre></td></tr></table></figure></li>\n<li>四次分手   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端 ----我要断开连接了----&gt; 服务端</span><br><span class=\"line\">客户端 &lt;----好的--- 服务端</span><br><span class=\"line\">客户端  &lt;----我也断开连接了---- 服务端</span><br><span class=\"line\">客户端 ----好的----&gt; 服务端</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><code>应用层</code>:应用层上运行着很多协议，是离客户最近的层，上面运行着<code>HTTP协议</code>、<code>SSH协议</code>、<code>HTTPS协议</code>、<code>FTP协议</code>等等<br>  以上是从下到上说了每一层的功能，现在有个例子，能更好的理解<code>TCP/IP</code>协议，当我们在浏览器输入一个url后，点击回车后发生了什么。</li>\n</ul>\n<ol>\n<li><code>应用层</code>通过DNS服务，得到需要访问rul所对应的IP，告诉下一层<code>传输控制层</code>，我要访问这个IP。</li>\n<li><code>数据传输层</code>在本地开了一个<code>随机</code>端口，并且告诉<code>网络层</code>我要进行”三次握手”了，赶紧帮我找到对方主机的位置。</li>\n<li><code>网络层</code>拿到对方主机ip，先确定主机的ip是否属于子网内，不属于，就把数据丢给下一跳网关的IP。</li>\n<li><code>数据链路层</code> 通过ARP协议，确定对方主机的MAC地址，把对方主机的IP地址和MAC地址封装好，丢给<code>物理层</code></li>\n<li><code>物理层</code>通过光信号，把数据传给对方主机。</li>\n<li>对方主机拿到数据，又通过网络层、数据链路层、网络层、把之前封装的数据进行拆解，最后到达<code>传输控制层</code>，双方<code>传输控制层</code>进行完三次握手后，服务器把客户端请求的东西，发给客户端。</li>\n<li>传输完成后，通过”四次分手”断开连接。</li>\n</ol>\n<ul>\n<li><p><strong>端口的规则</strong></p>\n<ol>\n<li>0-1023端口是留给系统用的，已经被占用，如果我们自己要使用，要从1024开始。</li>\n<li>只有管理员才有权使用留个系统的1024个端口。</li>\n<li>一个端口被占用，就只能使用另外一个端口，总的端口数有0~65535</li>\n</ol>\n</li>\n<li><p><strong>关于域名</strong></p>\n<ol>\n<li><code>.com</code>、<code>.org</code>、<code>.cn</code> 这些属于顶级域名</li>\n<li>baidu.com 、smartisan.com 这些属于二级域名</li>\n<li><a href=\"http://www.baidu.com/\">www.baidu.com</a> 、 <a href=\"http://www.smartisan.com/\">www.smartisan.com</a> 这些三级域名。</li>\n<li>其实<code>www</code>是多余的，其实是早期为了让用户知道他们在使用的这个东西是<code>www</code>才加上的。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>HTTP请求</strong><br>格式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求动词 路径加查询参数 协议名&#x2F;版本</span><br><span class=\"line\">Host:访问主机的域名或者&#x2F;IP </span><br><span class=\"line\">Accept:text&#x2F;html   我接受的接受</span><br><span class=\"line\">Content-type:请求体的格式</span><br><span class=\"line\">回车</span><br><span class=\"line\">请求体</span><br></pre></td></tr></table></figure>\n<strong>注意:</strong><ol>\n<li>请求动词有<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>等</li>\n<li>请求体在<code>GET</code>的时候，一般为空</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>HTTP响应</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">协议名&#x2F;版本 状态码 状态字符串</span><br><span class=\"line\">Content-type：响应体的格式</span><br><span class=\"line\">回车</span><br><span class=\"line\">响应体(下载内容)</span><br></pre></td></tr></table></figure>\n<strong>注意:</strong> 常见的状态码是考点。<a href=\"https://zhuanlan.zhihu.com/p/121168258\">状态码</a></li>\n</ul>\n<p>（完）</p>\n<p>资料参考：<br>1.饥人谷<br>2.阮一峰TCP/IP协议</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是WWW\"><a href=\"#什么是WWW\" class=\"headerlink\" title=\"什么是WWW\"></a><strong>什么是WWW</strong></h3><p>WWW是李爵士在1990年左右发明的，他由三部分组成，分别是<code>HTML</code>、<code>URL</code>、<code>HTTP</code></p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a><strong>URL</strong></h3><p><code>URL</code>全称统一资源定位符(Uniform Resource Locator),是__WWW__的一个核心概念，它是浏览器用来检索Web上公布的任何资源的机制。</p>","more":"<div align=\"center\"><img src=\"./img/url.jpg\"></div>\n\n<p><code>URL</code>由以上几个部分组成，端口默认是不写的，但是要记住HTTP的端口是80，HTTPS的端口是443.<br>另外需要注意的一点是，锚点<code>#</code>不会被上传到服务器，锚点只是浏览器里面的功能。</p>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a><strong>HTTP</strong></h3><p><code>HTTP</code>全称超文本传输协议，从字面上就可以知道，它是为了传输<code>HTML</code>而生的.<code>HTTP</code>是建立在TCP/IP协议上的。</p>\n<ul>\n<li><strong>TCP/IP协议</strong><br>  五层软件模型，分别是物理层、数据链路层、网络层、传输控制层、应用层。如下图所示</li>\n</ul>\n<div align=\"center\"><img src=\"./img/tcpip.png\"></div>\n\n <div align=\"center\" class=\"ff3333\"> 越靠下离物理硬件越近，越靠上离用户就越近。</div>\n\n<ul>\n<li><code>物理层</code>:通过光电信号，传输数据</li>\n<li><code>数据链路层</code>:通过ARP协议获取访问主机的物理地址。</li>\n<li><code>网络层</code>:通过子网掩码判断要范围主机的ip是否处于同一子网，如果是同一个子网内，就进行<code>广播</code>,如果不处于同一个子网，就获取下一条的ip，把数据包丢给下一条的ip，这里的下一条ip，可以理解成网关</li>\n<li><code>传输控制层</code>:有两个协议，<code>TCP协议</code>和<code>UDP协议</code>，经常被使用的是<code>TCP/协议</code>,因为它是面向连接，可以的传输协议。<ol>\n<li>三次握手   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端 ----我要建立连接了----&gt; 服务端</span><br><span class=\"line\">客户端 &lt;----好的我知道了---- 服务端</span><br><span class=\"line\">客户端 ----好的我也知道了----&gt; 服务端</span><br><span class=\"line\">完成三次握手后，客户端和服务端 都会为对方开辟一个资源</span><br></pre></td></tr></table></figure></li>\n<li>四次分手   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端 ----我要断开连接了----&gt; 服务端</span><br><span class=\"line\">客户端 &lt;----好的--- 服务端</span><br><span class=\"line\">客户端  &lt;----我也断开连接了---- 服务端</span><br><span class=\"line\">客户端 ----好的----&gt; 服务端</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><code>应用层</code>:应用层上运行着很多协议，是离客户最近的层，上面运行着<code>HTTP协议</code>、<code>SSH协议</code>、<code>HTTPS协议</code>、<code>FTP协议</code>等等<br>  以上是从下到上说了每一层的功能，现在有个例子，能更好的理解<code>TCP/IP</code>协议，当我们在浏览器输入一个url后，点击回车后发生了什么。</li>\n</ul>\n<ol>\n<li><code>应用层</code>通过DNS服务，得到需要访问rul所对应的IP，告诉下一层<code>传输控制层</code>，我要访问这个IP。</li>\n<li><code>数据传输层</code>在本地开了一个<code>随机</code>端口，并且告诉<code>网络层</code>我要进行”三次握手”了，赶紧帮我找到对方主机的位置。</li>\n<li><code>网络层</code>拿到对方主机ip，先确定主机的ip是否属于子网内，不属于，就把数据丢给下一跳网关的IP。</li>\n<li><code>数据链路层</code> 通过ARP协议，确定对方主机的MAC地址，把对方主机的IP地址和MAC地址封装好，丢给<code>物理层</code></li>\n<li><code>物理层</code>通过光信号，把数据传给对方主机。</li>\n<li>对方主机拿到数据，又通过网络层、数据链路层、网络层、把之前封装的数据进行拆解，最后到达<code>传输控制层</code>，双方<code>传输控制层</code>进行完三次握手后，服务器把客户端请求的东西，发给客户端。</li>\n<li>传输完成后，通过”四次分手”断开连接。</li>\n</ol>\n<ul>\n<li><p><strong>端口的规则</strong></p>\n<ol>\n<li>0-1023端口是留给系统用的，已经被占用，如果我们自己要使用，要从1024开始。</li>\n<li>只有管理员才有权使用留个系统的1024个端口。</li>\n<li>一个端口被占用，就只能使用另外一个端口，总的端口数有0~65535</li>\n</ol>\n</li>\n<li><p><strong>关于域名</strong></p>\n<ol>\n<li><code>.com</code>、<code>.org</code>、<code>.cn</code> 这些属于顶级域名</li>\n<li>baidu.com 、smartisan.com 这些属于二级域名</li>\n<li><a href=\"http://www.baidu.com/\">www.baidu.com</a> 、 <a href=\"http://www.smartisan.com/\">www.smartisan.com</a> 这些三级域名。</li>\n<li>其实<code>www</code>是多余的，其实是早期为了让用户知道他们在使用的这个东西是<code>www</code>才加上的。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>HTTP请求</strong><br>格式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求动词 路径加查询参数 协议名&#x2F;版本</span><br><span class=\"line\">Host:访问主机的域名或者&#x2F;IP </span><br><span class=\"line\">Accept:text&#x2F;html   我接受的接受</span><br><span class=\"line\">Content-type:请求体的格式</span><br><span class=\"line\">回车</span><br><span class=\"line\">请求体</span><br></pre></td></tr></table></figure>\n<strong>注意:</strong><ol>\n<li>请求动词有<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>等</li>\n<li>请求体在<code>GET</code>的时候，一般为空</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><strong>HTTP响应</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">协议名&#x2F;版本 状态码 状态字符串</span><br><span class=\"line\">Content-type：响应体的格式</span><br><span class=\"line\">回车</span><br><span class=\"line\">响应体(下载内容)</span><br></pre></td></tr></table></figure>\n<strong>注意:</strong> 常见的状态码是考点。<a href=\"https://zhuanlan.zhihu.com/p/121168258\">状态码</a></li>\n</ul>\n<p>（完）</p>\n<p>资料参考：<br>1.饥人谷<br>2.阮一峰TCP/IP协议</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckfbf0u0c0000kgfq1s28en8u","tag_id":"ckfbf4mpl0000kufqhdp8e9cw","_id":"ckfbf4mpo0001kufq86js34xg"},{"post_id":"ckfc7es4u0000b8fqhom1azv7","tag_id":"ckfc7es510001b8fqcogla15y","_id":"ckfc7es530002b8fqfa1i4c6g"},{"post_id":"ckfcri0au0000dsfqflgnfhsq","tag_id":"ckfcri0b40001dsfqb17ihzgq","_id":"ckfcri0b70002dsfq4g6z6w8g"},{"post_id":"ckfct8ks5000009fq7x1u683h","tag_id":"ckfct8ksc000109fqdwjcha8k","_id":"ckfct8ksi000209fqfnlhc2j6"},{"post_id":"ckfe81by60000zvfqdnm557m2","tag_id":"ckfcri0b40001dsfqb17ihzgq","_id":"ckfe81byd0001zvfq69l8ff42"},{"post_id":"ckfgkinwi000016fq84s42i8z","tag_id":"ckfcri0b40001dsfqb17ihzgq","_id":"ckfgkinwo000116fqfss07p9t"},{"post_id":"ckfjuh4ut0000tufqh4v86j2y","tag_id":"ckfjvzsij00001jfq3r6kd612","_id":"ckfjvzsin00011jfq9hpj914v"},{"post_id":"ckfo7o8j40000xrfq2424dj55","tag_id":"ckfo7o8ja0001xrfq4gt8blgs","_id":"ckfo7o8ji0002xrfqevnzct4x"},{"post_id":"ckfoav38z00007yfqbht7hr7v","tag_id":"ckfo7o8ja0001xrfq4gt8blgs","_id":"ckfoav39600017yfq6flfd1xc"},{"post_id":"ckfrodsoe0000aufqc2pt3043","tag_id":"ckfo7o8ja0001xrfq4gt8blgs","_id":"ckfrodson0001aufq1irxau5h"},{"post_id":"ckfrw4q2r00001ofq4gtp5uqz","tag_id":"ckfo7o8ja0001xrfq4gt8blgs","_id":"ckfrw4q2y00011ofq28sxa81j"},{"post_id":"ckftmkspu0000j5fq443aht62","tag_id":"ckfo7o8ja0001xrfq4gt8blgs","_id":"ckftmksq10001j5fq1e1p6izz"},{"post_id":"ckg0orjxz0000cgfq5p671hbc","tag_id":"ckfo7o8ja0001xrfq4gt8blgs","_id":"ckg0t9i7500001hfq4lbpgc2x"},{"post_id":"ckg9f85f30000ejfqedzdd7ix","tag_id":"ckg9f85fa0001ejfqh4lefs5z","_id":"ckg9f85fg0002ejfqbq0rfjnz"}],"Tag":[{"name":"命令行","_id":"ckfbf4mpl0000kufqhdp8e9cw"},{"name":"git","_id":"ckfc7es510001b8fqcogla15y"},{"name":"HTML","_id":"ckfcri0b40001dsfqb17ihzgq"},{"name":"markdown","_id":"ckfct8ksc000109fqdwjcha8k"},{"name":"ubuntu 网络","_id":"ckfjuh4uz0001tufq6zrb5gmo"},{"name":"ubuntu , 网络","_id":"ckfjuihcv0000eafq22p32qid"},{"name":"ubuntu ;  网络","_id":"ckfjuj0b60000m6fq608zbhu6"},{"name":"ubuntu网络","_id":"ckfjvzsij00001jfq3r6kd612"},{"name":"CSS","_id":"ckfo7o8ja0001xrfq4gt8blgs"},{"name":"css","_id":"ckg0orjy50001cgfq6rqma714"},{"name":"HTTP","_id":"ckg9f85fa0001ejfqh4lefs5z"}]}}